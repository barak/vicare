;;;
;;;Part of: Vicare Scheme
;;;Contents: sending mail with mailx
;;;Date: Thu Jan 22, 2015
;;;
;;;Abstract
;;;
;;;	This library defines  an API to send mail with  the locally installed program
;;;	"mailx".
;;;
;;;Copyright (C) 2015 Marco Maggi <marco.maggi-ipsu@poste.it>
;;;
;;;This program is free software: you can  redistribute it and/or modify it under the
;;;terms  of  the GNU  General  Public  License as  published  by  the Free  Software
;;;Foundation,  either version  3  of the  License,  or (at  your  option) any  later
;;;version.
;;;
;;;This program is  distributed in the hope  that it will be useful,  but WITHOUT ANY
;;;WARRANTY; without  even the implied warranty  of MERCHANTABILITY or FITNESS  FOR A
;;;PARTICULAR PURPOSE.  See the GNU General Public License for more details.
;;;
;;;You should have received a copy of  the GNU General Public License along with this
;;;program.  If not, see <http://www.gnu.org/licenses/>.
;;;


#!vicare
(library (vicare posix mailx)
  (export mailx)
  (import (vicare)
    (prefix (vicare posix) px.))


(define* (mailx {message.bv bytevector?})
  (px.fork-with-binary-ports
    ;;Here we are in the parent.
    (lambda (child-pid stdin-port stdout-port stderr-port)
      ;;Write message.
      (unwind-protect
	  (begin
	    (put-bytevector stdin-port message.bv)
	    (flush-output-port stdin-port))
	(close-output-port stdin-port))
      (unwind-protect
	  (begin
	    ;;Wait until the child exits.
	    (let ((status (px.waitpid child-pid 0)))
	      (if (and (px.WIFEXITED status)
		       (zero? (px.WEXITSTATUS status)))
		  ;;Read  the output  from "mailx"  generated by  the "-v"  flag.
		  ;;Mailx writes to its stdout and its stderr.
		  (values (%read-from-child stdout-port)
			  (%read-from-child stderr-port))
		(error __who__
		  "mailx process exited abnormally"
		  status))))
	(close-output-port stdin-port)
	(close-input-port stdout-port)
	(close-input-port stderr-port)))
    ;;Here we are in the child.
    (lambda ()
      (guard (E (else
		 (print-condition E)
		 (exit 1)))
	(px.setenv "MAILRC" "/dev/null")
	(px.execvp "mailx" '("mailx" "-t" "-n" "-v"))))))


;;;; ports and file descriptors

(define (%read-from-child child-port)
  (port-set-non-blocking-mode! child-port)
  (receive (buffer-port extract)
      (open-bytevector-output-port)
    (let next-chunk ()
      (let ((buf (get-bytevector-some child-port)))
	(cond ((or (eof-object? buf)
		   (would-block-object? buf))
	       (utf8->string (extract)))
	      (else
	       (put-bytevector buffer-port buf)
	       (next-chunk)))))))


;;;; done

#| end of library |# )

;;; end of file
;; Local Variables:
;; mode: vicare
;; coding: utf-8
;; eval: (put 'px.fork 'scheme-indent-function 0)
;; End:
