Subject: [announce] Vicare Scheme revision 0.2d9

                             Vicare Scheme
                             =============


Vicare Scheme is an R6RS compliant fork of Ikarus Scheme, aiming to be a
native compiler for R6 Scheme producing single threaded programs running
on  Intel x86 32-bit  processors, with  experimental support  for 64-bit
machines; it is tested only  on GNU+Linux, no official support for other
platforms is present.  It implements a foreign-functions interface based
on Libffi.  "Vicare" is pronounced the etruscan way.

  The latest  version of this package  can be downloaded  from Github or
Google Code:

	<http://code.google.com/p/vicare-scheme/downloads/list>
            <http://github.com/marcomaggi/vicare/downloads>

the home page of the Vicare project is at:

               <http://marcomaggi.github.com/vicare.html>

development takes place at:

                 <http://github.com/marcomaggi/vicare/>

and as backup at:

		     <http://gitorious.org/vicare>

this project has a mailing list:

	     <http://groups.google.com/group/vicare-users>

  It  is suggested to  use Vicare  Scheme along  with Nausicaa,  a large
collection of R6 Scheme libraries:

	      <http://marcomaggi.github.com/nausicaa.html>


Notes for revision 0.2d9
------------------------

* The package  name, selected in  "configure.ac", has been  changed from
  "vicare" to "vicare-scheme".

* Added built in library  (vicare language-extensions) exporting all the
  bindings exported by (vicare) not exported by (rnrs (6)).

* Added to (vicare ffi) more system-agnostic functions to load a foreign
  shared library.

* Added raw  memory allocation functions  raising exceptions in  case of
  error.

* Documentation was written for  some of the libraries distributed under
  the hierarchy (vicare ---).

* Added documentation  appendix showing how  to exchange raw  and Scheme
  data among Vicare processes using mmapped interprocess shared memory.

* BACKWARDS INCOMPATIBILITY  The functions SYSCONF,  PATHCONF, FPATHCONF
  and CONFSTR  have been  moved from the  library (vicare glibc)  to the
  library (vicare posix).

* Added to (vicare posix) functions: SETITIMER, GETITIMER, ALARM, MLOCK,
  MUNLOCK,   MLOCKALL,  MUNLOCKALL,   MPROTECT,  SELECT-FD-EXCEPTIONAL?,
  SELECT-FD-WRITABLE?, SELECT-FD-READABLE?.

* Added to (vicare linux) functions: SIGNALFD.

* Added library (vicare simple-event-loop).


Notes for revision 0.2d8
------------------------

* Added  configuration  option  "--with-pthread"  to link  the  "vicare"
  executable with the pthread library.  The executable was always linked
  with pthread before, now it is *not* by default.

* Changed default  for configuration option "--with-iconv"  from "no" to
  "check", when  the option is  not specified: the  configuration script
  checks if  an iconv library is available,  but it does not  fail if it
  does not find it.

* CONFIGURATION  BACKWARDS   INCOMPATIBILITY  The  configuration  option
  "--enable-libffi"  has been renamed  to "--with-libffi".   Its default
  value  has  changed from  "no"  to "check",  when  the  option is  not
  specified:  the configuration  script checks  if a  libffi  library is
  available, but it does not fail if it does not find it.

* Added   configuration  option   "--with-readline"  enabling   a  basic
  interface to GNU Readline or compatible library.  By default, when the
  option  is  not  specified:  the  configuration  script  checks  if  a
  compatible library is  available, but it does not fail  if it does not
  find  it.   The  following  bindings  are  exported  by  (vicare)  and
  (icarus):

     readline-enabled?
     readline
     make-readline-input-port

* The C language functions allocating Scheme bytevectors by copying from
  raw memory blocks will *silently  truncate* the input if its length is
  greater than the most positive fixnum.  (This is dirty, I know.)

* BACKWARDS INCOMPATIBILITY Libraries in  the (vicare ---) hierarchy are
  now   installed    under   "$(libdir)/scheme"   rather    than   under
  "$(libdir)/vicare"; the LIBRARY-PATH parameter now includes both these
  directories.     The   boot   image    is   still    installed   under
  "$(libdir)/vicare".

* Added  reader syntax  "#ve(<encoding> <data>)"  to read  bytevector in
  some  form of  encoding.   At present  it  supports converting  Scheme
  strings to  bytevectors using the  conversion function: string->ascii,
  string->latin1, string->utf8, etc.  Example:

     #ve(ascii "hello\n") => #vu8(104 101 108 108 111 10)

* Added  reader syntaxes "#ci<form>"  and "#cs<form>"  to read  the next
  form with case insensitive or case sensitive identifiers.  When a case
  insensitive  identifier is  read: its  string name  is  passed through
  STRING-FOLDCASE.   (These  syntaxes should  be  like  the Chicken  and
  Racket ones.)

* Added reader syntaxes for custom named characters:

    ;define "lambda" as synonym for #\x0E88
    #!(char-names (lambda . #\x0E88))

    ;standalone character
    #\{lambda}		=> #\x0E88

    ;character embedded in string
    "\{lambda}"		=> "\x0E88;"

* Added support for epoll API to (vicare linux).


Notes for revision 0.2d7
------------------------

* Boot images were regenerated.

* Added PARAMETRISE as alias for PARAMETERIZE.

* Parameter functions now accept 0, 1 or 2 values and work as follows:

    (let ((the-value <init-value>)
          (guard <guard-func>))
      (case-lambda
        (()
         the-value)
        ((new-value)
         (set! the-value (guard new-value)))
        ((new-value guard?)
         (if guard?
             (set! the-value (guard new-value))
           (set! the-value new-value)))))

* BACKWARDS INCOMPATIBILITY The  function MAKE-PARAMETER does *not* pass
  the  parameter's  initialisation  value  through  the  guard  function
  anymore.

* POSSIBLE BACKWARDS INCOMPATIBILITY The PARAMETERIZE syntax applies the
  parameter's guard  function when setting  a new value, but  does *not*
  apply it when restoring the original parameter's value.

* Added  command  line  option  to  the "vicare"  executable  to  enable
  entering a  debugging REPL whenever the interprocess  signal SIGINT is
  received.  It was enabled by default, now it is disabled by default.

* Added  functions  ASCII->STRING and  STRING->ASCII  to convert  Scheme
  strings to and from bytevectors holding ASCII representations.

* Functions acting  on pointers, allocating  raw memory and acting  on C
  strings, that  were exported by (vicare  ffi) but do  not need Libffi,
  are  now exported  by (vicare)  and  (ikarus) and  also reexported  by
  (vicare ffi).  This change should be backwards compatible.

* Syntax  bindings associated  to  the "errno"  variable, including  the
  error  code constants,  are now  exported by  the new  library (vicare
  errno).     The   constants   are    also   reexported    by   (vicare
  platform-constants).   The  CASE-ERRNO  and  ERRNO-CODE  syntaxes  are
  reexported  by   (vicare  ffi).   This  change   should  be  backwards
  compatible.

* Added library (vicare weak-hashtables) implementing hashtables holding
  weak references to keys and strong references to values.

* Added   "--disable-posix",  "--disable-glibc"   and  "--disable-linux"
  options  to  the "configure"  script  to  disable  inclusion of  POSIX
  bindings, GNU C Library specific bindings and Linux specific bindings.

* BACKWARDS  INCOMPATIBILITY Scheme  functions for  POSIX  bindings have
  been  moved out  of the  boot  image; they  are only  exported by  the
  (vicare  posix) library.   POSIX functions  whose names  were prefixed
  with "posix-" to avoid collision are now unprefixed:

     posix-read		-> read
     posix-write	-> write
     posix-remove	-> remove
     posix-time		-> time

  RAISE-SIGNAL has been renamed  to RAISE.  Collision between names from
  (vicare) and  names from  (vicare posix) can  be avoided  by prefixing
  bindings from (vicare posix) in the import spec; example:

     (import (vicare)
       (prefix (vicare posix) px.))

* Added POSIX functions for memory-mapped input/output:

    mmap		munmap
    msync		mremap
    madvise

* Added POSIX function POLL.

* Added  to  (vicare  posix)  simple  block/unblock  (BUB)  interprocess
  signals API.

* When "--enable-libffi"  is not used:  the library (vicare ffi)  is not
  installed   anymore.     Fixed   bug   causing    build   error   when
  "--enable-libffi" is not used.


Notes for revision 0.2d6
------------------------

* Big C code review to fix  bad handling of allocated Scheme object with
  respect to garbage collection.

* The documentation of the  C language internals for manipulating Scheme
  objects  has  been reviewed  and  extended  (it  is still  incomplete,
  though).

* The Scheme  code for the glibc  and linux functions has  been moved in
  standalone libraries, out of the  boot image.  The public interface to
  these libraries is unchanged.

* Added  support   for  autoloading  foreign   libraries  associated  to
  precompiled  library files.   The packaging  infrastructure  needs GNU
  Libtool now.

* Optional support for the Iconv API has been added to (vicare glibc) by
  linking with  Libiconv.  By default  disabled, to enable it:  give the
  --with-iconv option to the "configure" script.

* Optional  binding to  the CRE2  library  has been  added.  By  default
  disabled, to enable it use the "--with-cre2" configuration option.

* Added reader syntaxes  to read bytevectors of flonums  and cflonums in
  single and double precision:

    #vf4l #vf4b #vf4n		#vf8l #vf8b #vf8n
    #vc4l #vc4b #vc4n		#vc8l #vc8b #vc8n

* Added conversion  functions between lists of flonums  and cflonums and
  bytevectors:

    f4l-list->bytevector	bytevector->f4l-list
    f4b-list->bytevector	bytevector->f4b-list
    f4n-list->bytevector	bytevector->f4n-list
    f8l-list->bytevector	bytevector->f8l-list
    f8b-list->bytevector	bytevector->f8b-list
    f8n-list->bytevector	bytevector->f8n-list

    c4l-list->bytevector	bytevector->c4l-list
    c4b-list->bytevector	bytevector->c4b-list
    c4n-list->bytevector	bytevector->c4n-list
    c8l-list->bytevector	bytevector->c8l-list
    c8b-list->bytevector	bytevector->c8b-list
    c8n-list->bytevector	bytevector->c8n-list


Notes for revision 0.2d5
------------------------

* Added users and groups, process control, time related functions to the
  POSIX API.

* Some functions where added to (vicare glibc).

* Better  use of  GNU  Autotools and  better  tracking of  files in  the
  repository.

* The "main()" function now calls:

     setlocale(LC_ALL, "")

* The FFI library is now  (vicare ffi).  FFI code and documentation have
  been reviewed.  They need more testing.

* A toy library to build and  load shared libraries at runtime using GCC
  has been added, (vicare gcc).


Notes for revision 0.2d4
------------------------

* The POSIX API  is exported by the (vicare posix)  library, and also by
  (ikarus) and (vicare).

* The GNU C Library API is exported by the (vicare glibc) library.

* The Linux API is exported by the (vicare linux) library.

* Socket functions have been added to the POSIX API.

* Some documentation on handling Scheme  objects at the C language level
  has been written.


Notes for revision 0.2d3
------------------------

* The configuration process is now really long (sorry).

* Restructured most of the POSIX API, in a way non-backwards compatible.
  Still no sockets API available in this release.

* Added the functions:

    make-binary-file-descriptor-input-port
    make-binary-file-descriptor-input-port*
    make-binary-file-descriptor-output-port
    make-binary-file-descriptor-output-port*
    make-binary-file-descriptor-input/output-port
    make-binary-file-descriptor-input/output-port*
    make-textual-file-descriptor-input-port
    make-textual-file-descriptor-input-port*
    make-textual-file-descriptor-output-port
    make-textual-file-descriptor-output-port*
    make-textual-file-descriptor-input/output-port
    make-textual-file-descriptor-input/output-port*
    port-fd

* Added  experimental boot image  for 64-bit  platforms, generated  on a
  32-bit machine.  Hope it works.


Notes for revision 0.2d2
------------------------

* Tarballs extracted from GitHub's  "extract tagged revision" feature do
  not work because of missing files,  so this project is back on relying
  only  on  full repository  checkouts  and  release  tarballs from  the
  download area.

* The  default   list  of  library   file  extensions  now   holds  just
  ".vicare.sls" and ".sls"; the new option --more-file-extensions allows
  to restore  the old  behaviour of searching  for many  file extensions
  plus the "main" file trick.

* Some documentation has been written; other reviewed.

* More code reviewed with support for optional arguments validation.

* Updated  functions to  properly rely  on I/O  port's own  buffer mode;
  DISPLAY, WRITE, NEWLINE do not force a flush anymore.

* Added  SET-PORT-BUFFER-MODE! to  reconfigure the  mode of  an existing
  port.


Notes for revision 0.2d1
------------------------

* It  appears that  Ikarus' mailing  list is  working no  more,  so this
  project  now   has  its  own   mailing  list  for   announcements  and
  discussions:

	     <http://groups.google.com/group/vicare-users>

* Added library (vicare) exporting the same bindings of (ikarus).

* Review of bytevector functions.

* Introduced  the configuration  option "--disable-arguments-validation"
  to exclude  at expansion-time code validating  arguments to functions.
  At present only a few modules support this feature.

* Review  of command line  options and  execution modes.   Added options
  "--print-assembly"  and "--print-optimizer",  at present  neither very
  useful, nor human-friendly.


### end of file
# Local Variables:
# mode: text
# fill-column: 72
# paragraph-start: "*"
# End:
