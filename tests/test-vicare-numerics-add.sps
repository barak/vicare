;;; -*- coding: utf-8-unix -*-
;;;
;;;Part of: Vicare Scheme
;;;Contents: tests for numerics functions: add
;;;Date: Tue Nov 27, 2012
;;;
;;;Abstract
;;;
;;;
;;;
;;;Copyright (C) 2012, 2013 Marco Maggi <marco.maggi-ipsu@poste.it>
;;;
;;;This program is free software:  you can redistribute it and/or modify
;;;it under the terms of the  GNU General Public License as published by
;;;the Free Software Foundation, either version 3 of the License, or (at
;;;your option) any later version.
;;;
;;;This program is  distributed in the hope that it  will be useful, but
;;;WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
;;;MERCHANTABILITY or  FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
;;;General Public License for more details.
;;;
;;;You should  have received a  copy of  the GNU General  Public License
;;;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;;


#!r6rs
(import (vicare)
  (numerics helpers)
  (ikarus system $ratnums)
  (ikarus system $compnums)
  (ikarus system $numerics)
  (vicare language-extensions syntaxes)
  (vicare checks))

(check-set-mode! 'report-failed)
(check-display "*** testing Vicare numerics functions: addition\n")


(parametrise ((check-test-name	'specials))

  (check (+ 1 -1.1-0.0i)       => -0.10000000000000009+0.0i)
  (check (- 1 +1.1+0.0i)       => -0.10000000000000009+0.0i)

  (check (+  0.0 -0.0)           =>  0.0)
  (check (+ -0.0  0.0)           =>  0.0)
  (check (+  0.0  0.0)           =>  0.0)
  (check (+ -0.0 -0.0)           => -0.0)

  #t)


(parametrise ((check-test-name	'fixnums))

  (let-syntax ((test (make-test + $add-fixnum-fixnum)))
    (test 0	0		0)
    (test 0	+1		+1)
    (test +1	0		+1)
    (test 0	-1		-1)
    (test -1	0		-1)

    (test FX1 FX1 2)
    (test FX2 FX1 0)
    (test FX3 FX1 536870912)
    (test FX4 FX1 -536870911)

    (test FX1 FX2 0)
    (test FX2 FX2 -2)
    (test FX3 FX2 536870910)
    (test FX4 FX2 -536870913)

    (test FX1 FX3 536870912)
    (test FX2 FX3 536870910)
    (test FX3 FX3 1073741822)
    (test FX4 FX3 -1)

    (test FX1 FX4 -536870911)
    (test FX2 FX4 -536870913)
    (test FX3 FX4 -1)
    (test FX4 FX4 -1073741824)
    #f)

  (let-syntax ((test (make-test +)))
    (test FX1 BN1 536870913)
    (test FX2 BN1 536870911)
    (test FX3 BN1 1073741823)
    (test FX4 BN1 0)

    (test FX1 BN2 536871012)
    (test FX2 BN2 536871010)
    (test FX3 BN2 1073741922)
    (test FX4 BN2 99)

    (test FX1 BN3 -536870912)
    (test FX2 BN3 -536870914)
    (test FX3 BN3 -2)
    (test FX4 BN3 -1073741825)

    (test FX1 BN4 -536871011)
    (test FX2 BN4 -536871013)
    (test FX3 BN4 -101)
    (test FX4 BN4 -1073741924)
    #f)

  (let-syntax ((test (make-test + $add-fixnum-bignum)))
    (test FX1 VBN1 1152921504606846977)
    (test FX2 VBN1 1152921504606846975)
    (test FX3 VBN1 1152921505143717887)
    (test FX4 VBN1 1152921504069976064)

    (test FX1 VBN2 1152921504606847076)
    (test FX2 VBN2 1152921504606847074)
    (test FX3 VBN2 1152921505143717986)
    (test FX4 VBN2 1152921504069976163)

    (test FX1 VBN3 -1152921504606846976)
    (test FX2 VBN3 -1152921504606846978)
    (test FX3 VBN3 -1152921504069976066)
    (test FX4 VBN3 -1152921505143717889)

    (test FX1 VBN4 -1152921504606847075)
    (test FX2 VBN4 -1152921504606847077)
    (test FX3 VBN4 -1152921504069976165)
    (test FX4 VBN4 -1152921505143717988)
    #f)

  (let-syntax ((test (make-test + $add-fixnum-ratnum)))
    (test FX1 RN01 124/123)
    (test FX2 RN01 -122/123)
    (test FX3 RN01 66035122054/123)
    (test FX4 RN01 -66035122175/123)

    (test FX1 RN02 122/123)
    (test FX2 RN02 -124/123)
    (test FX3 RN02 66035122052/123)
    (test FX4 RN02 -66035122177/123)

    (test FX1 RN03 122/123)
    (test FX2 RN03 -124/123)
    (test FX3 RN03 66035122052/123)
    (test FX4 RN03 -66035122177/123)

    (test FX1 RN04 -536870789/123)
    (test FX2 RN04 -536871035/123)
    (test FX3 RN04 65498251141/123)
    (test FX4 RN04 -66571993088/123)
    #f)

  (let-syntax ((test (make-flonum-test + $add-fixnum-flonum)))
    (test FX1 FL1 1.0)
    (test FX2 FL1 -1.0)
    (test FX3 FL1 536870911.0)
    (test FX4 FL1 -536870912.0)

    (test FX1 FL2 1.0)
    (test FX2 FL2 -1.0)
    (test FX3 FL2 536870911.0)
    (test FX4 FL2 -536870912.0)

    (test FX1 FL3 3.123)
    (test FX2 FL3 1.1230000000000002)
    (test FX3 FL3 536870913.123)
    (test FX4 FL3 -536870909.877)

    (test FX1 FL4 -1.1230000000000002)
    (test FX2 FL4 -3.123)
    (test FX3 FL4 536870908.877)
    (test FX4 FL4 -536870914.123)
    #f)

  (let-syntax ((test (make-cflonum-test + $add-fixnum-cflonum)))
    (test FX1 CFL01 1.0+0.0i)
    (test FX2 CFL01 -1.0+0.0i)
    (test FX3 CFL01 536870911.0+0.0i)
    (test FX4 CFL01 -536870912.0+0.0i)

    (test FX1 CFL02 1.0+0.0i)
    (test FX2 CFL02 -1.0+0.0i)
    (test FX3 CFL02 536870911.0+0.0i)
    (test FX4 CFL02 -536870912.0+0.0i)

    (test FX1 CFL03 1.0-0.0i)
    (test FX2 CFL03 -1.0-0.0i)
    (test FX3 CFL03 536870911.0-0.0i)
    (test FX4 CFL03 -536870912.0-0.0i)

    (test FX1 CFL04 1.0-0.0i)
    (test FX2 CFL04 -1.0-0.0i)
    (test FX3 CFL04 536870911.0-0.0i)
    (test FX4 CFL04 -536870912.0-0.0i)

    (test FX1 CFL05 -0.19999999999999996-0.0i)
    (test FX2 CFL05 -2.2-0.0i)
    (test FX3 CFL05 536870909.8-0.0i)
    (test FX4 CFL05 -536870913.2-0.0i)

    (test FX1 CFL06 -0.19999999999999996+0.0i)
    (test FX2 CFL06 -2.2+0.0i)
    (test FX3 CFL06 536870909.8+0.0i)
    (test FX4 CFL06 -536870913.2+0.0i)

    (test FX1 CFL07 1.0-1.2i)
    (test FX2 CFL07 -1.0-1.2i)
    (test FX3 CFL07 536870911.0-1.2i)
    (test FX4 CFL07 -536870912.0-1.2i)

    (test FX1 CFL08 1.0-1.2i)
    (test FX2 CFL08 -1.0-1.2i)
    (test FX3 CFL08 536870911.0-1.2i)
    (test FX4 CFL08 -536870912.0-1.2i)

    (test FX1 CFL09 -0.19999999999999996-inf.0i)
    (test FX1 CFL10 -0.19999999999999996+inf.0i)
    (test FX1 CFL11 +inf.0-1.2i)
    (test FX1 CFL12 -inf.0-1.2i)

    (test FX1 CFL13 -0.19999999999999996+nan.0i)
    (test FX1 CFL14 -0.19999999999999996+nan.0i)
    (test FX1 CFL15 +nan.0-1.2i)
    (test FX1 CFL16 +nan.0-1.2i)
    #f)

  (let-syntax ((test (make-test + $add-fixnum-compnum)))
    (test 1	10+20i		11+20i)

    (test 1 1+20.0i 2+20.0i)
    (test 1 10.0+2i 11.0+2i)

    (test 1	1/2+20i		3/2+20i)
    (test 1	10+2/3i		11+2/3i)

    (test 1	(make-rectangular BN1 20)	(make-rectangular (+ 1 BN1) 20))
    (test 1	(make-rectangular 10 BN1)	(make-rectangular 11 BN1))
    #f)

  #t)


(parametrise ((check-test-name	'bignums))

  (let-syntax ((test (make-test + #;$add-bignum-fixnum)))
    (test BN1 FX1 536870913)
    (test BN2 FX1 536871012)
    (test BN3 FX1 -536870912)
    (test BN4 FX1 -536871011)

    (test BN1 FX2 536870911)
    (test BN2 FX2 536871010)
    (test BN3 FX2 -536870914)
    (test BN4 FX2 -536871013)

    (test BN1 FX3 1073741823)
    (test BN2 FX3 1073741922)
    (test BN3 FX3 -2)
    (test BN4 FX3 -101)

    (test BN1 FX4 0)
    (test BN2 FX4 99)
    (test BN3 FX4 -1073741825)
    (test BN4 FX4 -1073741924)
    #f)

  (let-syntax ((test (make-test + #;$add-bignum-bignum)))
    (test BN1 BN1 1073741824)
    (test BN2 BN1 1073741923)
    (test BN3 BN1 -1)
    (test BN4 BN1 -100)
    (test BN1 BN2 1073741923)
    (test BN2 BN2 1073742022)
    (test BN3 BN2 98)
    (test BN4 BN2 -1)
    (test BN1 BN3 -1)
    (test BN2 BN3 98)
    (test BN3 BN3 -1073741826)
    (test BN4 BN3 -1073741925)
    (test BN1 BN4 -100)
    (test BN2 BN4 -1)
    (test BN3 BN4 -1073741925)
    (test BN4 BN4 -1073742024)
    #f)

  (let-syntax ((test (make-test + #;$add-bignum-ratnum)))
    (test BN1 RN01 66035122177/123)
    (test BN2 RN01 66035134354/123)
    (test BN3 RN01 -66035122298/123)
    (test BN4 RN01 -66035134475/123)

    (test BN1 RN02 66035122175/123)
    (test BN2 RN02 66035134352/123)
    (test BN3 RN02 -66035122300/123)
    (test BN4 RN02 -66035134477/123)

    (test BN1 RN03 66035122175/123)
    (test BN2 RN03 66035134352/123)
    (test BN3 RN03 -66035122300/123)
    (test BN4 RN03 -66035134477/123)

    (test BN1 RN04 65498251264/123)
    (test BN2 RN04 65498263441/123)
    (test BN3 RN04 -66571993211/123)
    (test BN4 RN04 -66572005388/123)
    #f)

  (let-syntax ((test (make-flonum-test + #;$add-bignum-flonum)))
    (test BN1 FL1 536870912.0)
    (test BN2 FL1 536871011.0)
    (test BN3 FL1 -536870913.0)
    (test BN4 FL1 -536871012.0)

    (test BN1 FL2 536870912.0)
    (test BN2 FL2 536871011.0)
    (test BN3 FL2 -536870913.0)
    (test BN4 FL2 -536871012.0)

    (test BN1 FL3 536870914.123)
    (test BN2 FL3 536871013.123)
    (test BN3 FL3 -536870910.877)
    (test BN4 FL3 -536871009.877)

    (test BN1 FL4 536870909.877)
    (test BN2 FL4 536871008.877)
    (test BN3 FL4 -536870915.123)
    (test BN4 FL4 -536871014.123)
    #f)

  (let-syntax ((test (make-cflonum-test + #;$add-bignum-cflonum)))
    (test BN1 CFL01 536870912.0+0.0i)
    (test BN2 CFL01 536871011.0+0.0i)
    (test BN3 CFL01 -536870913.0+0.0i)
    (test BN4 CFL01 -536871012.0+0.0i)

    (test BN1 CFL02 536870912.0+0.0i)
    (test BN2 CFL02 536871011.0+0.0i)
    (test BN3 CFL02 -536870913.0+0.0i)
    (test BN4 CFL02 -536871012.0+0.0i)

    (test BN1 CFL03 536870912.0-0.0i)
    (test BN2 CFL03 536871011.0-0.0i)
    (test BN3 CFL03 -536870913.0-0.0i)
    (test BN4 CFL03 -536871012.0-0.0i)

    (test BN1 CFL04 536870912.0-0.0i)
    (test BN2 CFL04 536871011.0-0.0i)
    (test BN3 CFL04 -536870913.0-0.0i)
    (test BN4 CFL04 -536871012.0-0.0i)

    (test BN1 CFL05 536870910.8-0.0i)
    (test BN2 CFL05 536871009.8-0.0i)
    (test BN3 CFL05 -536870914.2-0.0i)
    (test BN4 CFL05 -536871013.2-0.0i)

    (test BN1 CFL06 536870910.8+0.0i)
    (test BN2 CFL06 536871009.8+0.0i)
    (test BN3 CFL06 -536870914.2+0.0i)
    (test BN4 CFL06 -536871013.2+0.0i)

    (test BN1 CFL07 536870912.0-1.2i)
    (test BN2 CFL07 536871011.0-1.2i)
    (test BN3 CFL07 -536870913.0-1.2i)
    (test BN4 CFL07 -536871012.0-1.2i)

    (test BN1 CFL08 536870912.0-1.2i)
    (test BN2 CFL08 536871011.0-1.2i)
    (test BN3 CFL08 -536870913.0-1.2i)
    (test BN4 CFL08 -536871012.0-1.2i)

    (test BN1 CFL09 536870910.8-inf.0i)
    (test BN1 CFL10 536870910.8+inf.0i)
    (test BN1 CFL11 +inf.0-1.2i)
    (test BN1 CFL12 -inf.0-1.2i)

    (test BN1 CFL13 536870910.8+nan.0i)
    (test BN1 CFL14 536870910.8+nan.0i)
    (test BN1 CFL15 +nan.0-1.2i)
    (test BN1 CFL16 +nan.0-1.2i)
    #f)

  (let-syntax ((test (make-test + #;$add-bignum-compnum)))
    (test BN1	10+20i				(make-rectangular (+ BN1 10) 20))
    (test BN1	1+20.0i				536870913+20.0i)
    (test BN1	10.0+2i				536870922+2.0i)
    (test BN1	1/2+20i				(make-rectangular (+ BN1 1/2) 20))
    (test BN1	10+2/3i				(make-rectangular (+ BN1 10) 2/3))
    (test BN1	(make-rectangular BN2 20)	(make-rectangular (+ BN1 BN2) 20))
    (test BN1	(make-rectangular 10 BN2)	(make-rectangular (+ BN1 10) BN2))
    #f)

;;; --------------------------------------------------------------------

  (let-syntax ((test (make-test + $add-bignum-fixnum)))
    (test VBN1 FX1 1152921504606846977)
    (test VBN2 FX1 1152921504606847076)
    (test VBN3 FX1 -1152921504606846976)
    (test VBN4 FX1 -1152921504606847075)
    (test VBN1 FX2 1152921504606846975)
    (test VBN2 FX2 1152921504606847074)
    (test VBN3 FX2 -1152921504606846978)
    (test VBN4 FX2 -1152921504606847077)
    (test VBN1 FX3 1152921505143717887)
    (test VBN2 FX3 1152921505143717986)
    (test VBN3 FX3 -1152921504069976066)
    (test VBN4 FX3 -1152921504069976165)
    (test VBN1 FX4 1152921504069976064)
    (test VBN2 FX4 1152921504069976163)
    (test VBN3 FX4 -1152921505143717889)
    (test VBN4 FX4 -1152921505143717988)
    #f)

  (let-syntax ((test (make-test + $add-bignum-bignum)))
    (test VBN1 VBN1 2305843009213693952)
    (test VBN2 VBN1 2305843009213694051)
    (test VBN3 VBN1 -1)
    (test VBN4 VBN1 -100)
    (test VBN1 VBN2 2305843009213694051)
    (test VBN2 VBN2 2305843009213694150)
    (test VBN3 VBN2 98)
    (test VBN4 VBN2 -1)
    (test VBN1 VBN3 -1)
    (test VBN2 VBN3 98)
    (test VBN3 VBN3 -2305843009213693954)
    (test VBN4 VBN3 -2305843009213694053)
    (test VBN1 VBN4 -100)
    (test VBN2 VBN4 -1)
    (test VBN3 VBN4 -2305843009213694053)
    (test VBN4 VBN4 -2305843009213694152)
    #f)

  (let-syntax ((test (make-test + $add-bignum-ratnum)))
    (test VBN1 RN01 141809345066642178049/123)
    (test VBN2 RN01 141809345066642190226/123)
    (test VBN3 RN01 -141809345066642178170/123)
    (test VBN4 RN01 -141809345066642190347/123)
    (test VBN1 RN02 141809345066642178047/123)
    (test VBN2 RN02 141809345066642190224/123)
    (test VBN3 RN02 -141809345066642178172/123)
    (test VBN4 RN02 -141809345066642190349/123)
    (test VBN1 RN03 141809345066642178047/123)
    (test VBN2 RN03 141809345066642190224/123)
    (test VBN3 RN03 -141809345066642178172/123)
    (test VBN4 RN03 -141809345066642190349/123)
    (test VBN1 RN04 141809345066105307136/123)
    (test VBN2 RN04 141809345066105319313/123)
    (test VBN3 RN04 -141809345067179049083/123)
    (test VBN4 RN04 -141809345067179061260/123)
    #f)

  (let-syntax ((test (make-flonum-test + $add-bignum-flonum)))
    (test VBN1 FL1 1.152921504606847e+18)
    (test VBN2 FL1 1.152921504606847e+18)
    (test VBN3 FL1 -1.152921504606847e+18)
    (test VBN4 FL1 -1.152921504606847e+18)
    (test VBN1 FL2 1.152921504606847e+18)
    (test VBN2 FL2 1.152921504606847e+18)
    (test VBN3 FL2 -1.152921504606847e+18)
    (test VBN4 FL2 -1.152921504606847e+18)
    (test VBN1 FL3 1.152921504606847e+18)
    (test VBN2 FL3 1.152921504606847e+18)
    (test VBN3 FL3 -1.152921504606847e+18)
    (test VBN4 FL3 -1.152921504606847e+18)
    (test VBN1 FL4 1.152921504606847e+18)
    (test VBN2 FL4 1.152921504606847e+18)
    (test VBN3 FL4 -1.152921504606847e+18)
    (test VBN4 FL4 -1.152921504606847e+18)
    #f)

  (let-syntax ((test (make-cflonum-test + $add-bignum-cflonum)))
    (test VBN1 CFL01 1.152921504606847e+18+0.0i)
    (test VBN2 CFL01 1.152921504606847e+18+0.0i)
    (test VBN3 CFL01 -1.152921504606847e+18+0.0i)
    (test VBN4 CFL01 -1.152921504606847e+18+0.0i)
    (test VBN1 CFL02 1.152921504606847e+18+0.0i)
    (test VBN2 CFL02 1.152921504606847e+18+0.0i)
    (test VBN3 CFL02 -1.152921504606847e+18+0.0i)
    (test VBN4 CFL02 -1.152921504606847e+18+0.0i)
    (test VBN1 CFL03 1.152921504606847e+18-0.0i)
    (test VBN2 CFL03 1.152921504606847e+18-0.0i)
    (test VBN3 CFL03 -1.152921504606847e+18-0.0i)
    (test VBN4 CFL03 -1.152921504606847e+18-0.0i)
    (test VBN1 CFL04 1.152921504606847e+18-0.0i)
    (test VBN2 CFL04 1.152921504606847e+18-0.0i)
    (test VBN3 CFL04 -1.152921504606847e+18-0.0i)
    (test VBN4 CFL04 -1.152921504606847e+18-0.0i)
    (test VBN1 CFL05 1.152921504606847e+18-0.0i)
    (test VBN2 CFL05 1.152921504606847e+18-0.0i)
    (test VBN3 CFL05 -1.152921504606847e+18-0.0i)
    (test VBN4 CFL05 -1.152921504606847e+18-0.0i)
    (test VBN1 CFL06 1.152921504606847e+18+0.0i)
    (test VBN2 CFL06 1.152921504606847e+18+0.0i)
    (test VBN3 CFL06 -1.152921504606847e+18+0.0i)
    (test VBN4 CFL06 -1.152921504606847e+18+0.0i)
    (test VBN1 CFL07 1.152921504606847e+18-1.2i)
    (test VBN2 CFL07 1.152921504606847e+18-1.2i)
    (test VBN3 CFL07 -1.152921504606847e+18-1.2i)
    (test VBN4 CFL07 -1.152921504606847e+18-1.2i)
    (test VBN1 CFL08 1.152921504606847e+18-1.2i)
    (test VBN2 CFL08 1.152921504606847e+18-1.2i)
    (test VBN3 CFL08 -1.152921504606847e+18-1.2i)
    (test VBN4 CFL08 -1.152921504606847e+18-1.2i)
    (test VBN1 CFL09 1.152921504606847e+18-inf.0i)
    (test VBN1 CFL10 1.152921504606847e+18+inf.0i)
    (test VBN1 CFL11 +inf.0-1.2i)
    (test VBN1 CFL12 -inf.0-1.2i)
    (test VBN1 CFL13 1.152921504606847e+18+nan.0i)
    (test VBN1 CFL14 1.152921504606847e+18+nan.0i)
    (test VBN1 CFL15 +nan.0-1.2i)
    (test VBN1 CFL16 +nan.0-1.2i)
    #f)

  (let-syntax ((test (make-test + $add-bignum-compnum)))
    (test VBN1 10+20i 1152921504606846986+20i)
    (test VBN1 1.0+20.0i 1.152921504606847e+18+20.0i)
    (test VBN1 10.0+2.0i 1.152921504606847e+18+2.0i)
    (test VBN1 1/2+20i 2305843009213693953/2+20i)
    (test VBN1 10+2/3i 1152921504606846986+2/3i)
    (test VBN1 (make-rectangular VBN2 20) 2305843009213694051+20i)
    (test VBN1 (make-rectangular 10 VBN2) 1152921504606846986+1152921504606847075i)
    #f)

  #t)


(parametrise ((check-test-name	'ratnums))

  (let-syntax ((test (make-test + #;$add-ratnum-fixnum)))
    (test 1/2 0				1/2)
    (test 1/2 10			21/2)
    (test 1/2 GREATEST-FX-32-bit	1073741823/2)
    (test 1/2 LEAST-FX-32-bit		-1073741823/2)
    #f)

  (let-syntax ((test (make-test + #;$add-ratnum-bignum)))
    (test 1/2 BN1			1073741825/2)
    (test 1/2 BN2			1073742023/2)
    (test 1/2 BN3			-1073741825/2)
    (test 1/2 BN4			-1073742023/2)
    (test -1/2 BN1			1073741823/2)
    (test -1/2 BN2			1073742021/2)
    (test -1/2 BN3			-1073741827/2)
    (test -1/2 BN4			-1073742025/2)
    #f)

  (let-syntax ((test (make-test + #;$add-ratnum-ratnum)))
    (test 1/2	3/4			5/4)
    (test -1/2	3/4			1/4)
    (test -1/2	-3/4			-5/4)
    #f)

  (let-syntax ((test (make-test + #;$add-ratnum-flonum)))
    (test 1/2 3.4			3.9)
    (test -1/2 3.4			2.9)

    (test RN01 FL1 0.008130081300813009)
    (test RN02 FL1 -0.008130081300813009)
    (test RN03 FL1 -0.008130081300813009)
    (test RN04 FL1 -4364804.1626016265)
    (test RN01 FL2 0.008130081300813009)
    (test RN02 FL2 -0.008130081300813009)
    (test RN03 FL2 -0.008130081300813009)
    (test RN04 FL2 -4364804.1626016265)
    (test RN01 FL3 2.1311300813008134)
    (test RN02 FL3 2.114869918699187)
    (test RN03 FL3 2.114869918699187)
    (test RN04 FL3 -4364802.039601627)
    (test RN01 FL4 -2.114869918699187)
    (test RN02 FL4 -2.1311300813008134)
    (test RN03 FL4 -2.1311300813008134)
    (test RN04 FL4 -4364806.285601626)

    #f)

  (let-syntax ((test (make-cflonum-test + #;$add-ratnum-cflonum)))
    (test RN01 CFL01 0.008130081300813009+0.0i)
    (test RN02 CFL01 -0.008130081300813009+0.0i)
    (test RN03 CFL01 -0.008130081300813009+0.0i)
    (test RN04 CFL01 -4364804.1626016265+0.0i)
    (test RN01 CFL02 0.008130081300813009+0.0i)
    (test RN02 CFL02 -0.008130081300813009+0.0i)
    (test RN03 CFL02 -0.008130081300813009+0.0i)
    (test RN04 CFL02 -4364804.1626016265+0.0i)
    (test RN01 CFL03 0.008130081300813009-0.0i)
    (test RN02 CFL03 -0.008130081300813009-0.0i)
    (test RN03 CFL03 -0.008130081300813009-0.0i)
    (test RN04 CFL03 -4364804.1626016265-0.0i)
    (test RN01 CFL04 0.008130081300813009-0.0i)
    (test RN02 CFL04 -0.008130081300813009-0.0i)
    (test RN03 CFL04 -0.008130081300813009-0.0i)
    (test RN04 CFL04 -4364804.1626016265-0.0i)
    (test RN01 CFL05 -1.191869918699187-0.0i)
    (test RN02 CFL05 -1.208130081300813-0.0i)
    (test RN03 CFL05 -1.208130081300813-0.0i)
    (test RN04 CFL05 -4364805.362601627-0.0i)
    (test RN01 CFL06 -1.191869918699187+0.0i)
    (test RN02 CFL06 -1.208130081300813+0.0i)
    (test RN03 CFL06 -1.208130081300813+0.0i)
    (test RN04 CFL06 -4364805.362601627+0.0i)
    (test RN01 CFL07 0.008130081300813009-1.2i)
    (test RN02 CFL07 -0.008130081300813009-1.2i)
    (test RN03 CFL07 -0.008130081300813009-1.2i)
    (test RN04 CFL07 -4364804.1626016265-1.2i)
    (test RN01 CFL08 0.008130081300813009-1.2i)
    (test RN02 CFL08 -0.008130081300813009-1.2i)
    (test RN03 CFL08 -0.008130081300813009-1.2i)
    (test RN04 CFL08 -4364804.1626016265-1.2i)
    (test RN01 CFL09 -1.191869918699187-inf.0i)
    (test RN01 CFL10 -1.191869918699187+inf.0i)
    (test RN01 CFL11 +inf.0-1.2i)
    (test RN01 CFL12 -inf.0-1.2i)
    (test RN01 CFL13 -1.191869918699187+nan.0i)
    (test RN01 CFL14 -1.191869918699187+nan.0i)
    (test RN01 CFL15 +nan.0-1.2i)
    (test RN01 CFL16 +nan.0-1.2i)

    #f)

  (let-syntax ((test (make-inexact-test + #;$add-ratnum-compnum)))
    (test RN01 10+20i 1231/123+20i)
    (test RN01 1+20.0i 124/123+20.0i)
    (test RN01 10.0+2i 10.008130081300813+2i)
    (test RN01 1/2+20i 125/246+20i)
    (test RN01 10+2/3i 1231/123+2/3i)
    (test RN01 (make-rectangular RN02 20) 0+20i)
    (test RN01 (make-rectangular 10 RN02) 1231/123-1/123i)
    #f)

;;; --------------------------------------------------------------------

  (let-syntax ((test (make-test + #;$add-ratnum-fixnum)))
    (test 1/2 GREATEST-FX-64-bit 2305843009213693951/2)
    (test 1/2 LEAST-FX-64-bit -2305843009213693951/2)
    #f)

  (let-syntax ((test (make-test + $add-ratnum-bignum)))
    (test 1/2 VBN1 2305843009213693953/2)
    (test 1/2 VBN2 2305843009213694151/2)
    (test 1/2 VBN3 -2305843009213693953/2)
    (test 1/2 VBN4 -2305843009213694151/2)
    (test -1/2 VBN1 2305843009213693951/2)
    (test -1/2 VBN2 2305843009213694149/2)
    (test -1/2 VBN3 -2305843009213693955/2)
    (test -1/2 VBN4 -2305843009213694153/2)
    #f)

  (let-syntax ((test (make-test + $add-ratnum-ratnum)))
    (test 1/2	3/4			5/4)
    (test -1/2	3/4			1/4)
    (test -1/2	-3/4			-5/4)
    #f)

  (let-syntax ((test (make-test + $add-ratnum-flonum)))
    (test 1/2 3.4 3.9)
    (test -1/2 3.4 2.9)
    (test VRN01 FL1 0.008130081300813009)
    (test VRN02 FL1 -0.008130081300813009)
    (test VRN03 FL1 -0.008130081300813009)
    (test VRN04 FL1 -4364804.1626016265)
    (test VRN01 FL2 0.008130081300813009)
    (test VRN02 FL2 -0.008130081300813009)
    (test VRN03 FL2 -0.008130081300813009)
    (test VRN04 FL2 -4364804.1626016265)
    (test VRN01 FL3 2.1311300813008134)
    (test VRN02 FL3 2.114869918699187)
    (test VRN03 FL3 2.114869918699187)
    (test VRN04 FL3 -4364802.039601627)
    (test VRN01 FL4 -2.114869918699187)
    (test VRN02 FL4 -2.1311300813008134)
    (test VRN03 FL4 -2.1311300813008134)
    (test VRN04 FL4 -4364806.285601626)
    #f)

  (let-syntax ((test (make-cflonum-test + $add-ratnum-cflonum)))
    (test VRN01 CFL01 0.008130081300813009+0.0i)
    (test VRN02 CFL01 -0.008130081300813009+0.0i)
    (test VRN03 CFL01 -0.008130081300813009+0.0i)
    (test VRN04 CFL01 -4364804.1626016265+0.0i)
    (test VRN01 CFL02 0.008130081300813009+0.0i)
    (test VRN02 CFL02 -0.008130081300813009+0.0i)
    (test VRN03 CFL02 -0.008130081300813009+0.0i)
    (test VRN04 CFL02 -4364804.1626016265+0.0i)
    (test VRN01 CFL03 0.008130081300813009-0.0i)
    (test VRN02 CFL03 -0.008130081300813009-0.0i)
    (test VRN03 CFL03 -0.008130081300813009-0.0i)
    (test VRN04 CFL03 -4364804.1626016265-0.0i)
    (test VRN01 CFL04 0.008130081300813009-0.0i)
    (test VRN02 CFL04 -0.008130081300813009-0.0i)
    (test VRN03 CFL04 -0.008130081300813009-0.0i)
    (test VRN04 CFL04 -4364804.1626016265-0.0i)
    (test VRN01 CFL05 -1.191869918699187-0.0i)
    (test VRN02 CFL05 -1.208130081300813-0.0i)
    (test VRN03 CFL05 -1.208130081300813-0.0i)
    (test VRN04 CFL05 -4364805.362601627-0.0i)
    (test VRN01 CFL06 -1.191869918699187+0.0i)
    (test VRN02 CFL06 -1.208130081300813+0.0i)
    (test VRN03 CFL06 -1.208130081300813+0.0i)
    (test VRN04 CFL06 -4364805.362601627+0.0i)
    (test VRN01 CFL07 0.008130081300813009-1.2i)
    (test VRN02 CFL07 -0.008130081300813009-1.2i)
    (test VRN03 CFL07 -0.008130081300813009-1.2i)
    (test VRN04 CFL07 -4364804.1626016265-1.2i)
    (test VRN01 CFL08 0.008130081300813009-1.2i)
    (test VRN02 CFL08 -0.008130081300813009-1.2i)
    (test VRN03 CFL08 -0.008130081300813009-1.2i)
    (test VRN04 CFL08 -4364804.1626016265-1.2i)
    (test VRN01 CFL09 -1.191869918699187-inf.0i)
    (test VRN01 CFL10 -1.191869918699187+inf.0i)
    (test VRN01 CFL11 +inf.0-1.2i)
    (test VRN01 CFL12 -inf.0-1.2i)
    (test VRN01 CFL13 -1.191869918699187+nan.0i)
    (test VRN01 CFL14 -1.191869918699187+nan.0i)
    (test VRN01 CFL15 +nan.0-1.2i)
    (test VRN01 CFL16 +nan.0-1.2i)
    #f)

  (let-syntax ((test (make-inexact-test + $add-ratnum-compnum)))
    (test VRN01 10+20i 1231/123+20i)
    (test VRN01 1.0+20.0i 1.008130081300813+20.0i)
    (test VRN01 10.0+2.0i 10.008130081300813+2.0i)
    (test VRN01 1/2+20i 125/246+20i)
    (test VRN01 10+2/3i 1231/123+2/3i)
    (test VRN01 (make-rectangular VRN02 20) 0+20i)
    (test VRN01 (make-rectangular 10 VRN02) 1231/123-1/123i)
    #f)

  #t)


(parametrise ((check-test-name	'flonums))

  (let-syntax ((test (make-test + $add-flonum-fixnum)))
    (test FL1 FX1 1.0)
    (test FL2 FX1 1.0)
    (test FL3 FX1 3.123)
    (test FL4 FX1 -1.1230000000000002)
    (test FL1 FX2 -1.0)
    (test FL2 FX2 -1.0)
    (test FL3 FX2 1.1230000000000002)
    (test FL4 FX2 -3.123)
    (test FL1 FX3 536870911.0)
    (test FL2 FX3 536870911.0)
    (test FL3 FX3 536870913.123)
    (test FL4 FX3 536870908.877)
    (test FL1 FX4 -536870912.0)
    (test FL2 FX4 -536870912.0)
    (test FL3 FX4 -536870909.877)
    (test FL4 FX4 -536870914.123)
    #f)

  (let-syntax ((test (make-test + #;$add-flonum-bignum)))
    (test FL1 BN1 536870912.0)
    (test FL2 BN1 536870912.0)
    (test FL3 BN1 536870914.123)
    (test FL4 BN1 536870909.877)
    (test FL1 BN2 536871011.0)
    (test FL2 BN2 536871011.0)
    (test FL3 BN2 536871013.123)
    (test FL4 BN2 536871008.877)
    (test FL1 BN3 -536870913.0)
    (test FL2 BN3 -536870913.0)
    (test FL3 BN3 -536870910.877)
    (test FL4 BN3 -536870915.123)
    (test FL1 BN4 -536871012.0)
    (test FL2 BN4 -536871012.0)
    (test FL3 BN4 -536871009.877)
    (test FL4 BN4 -536871014.123)
    #f)

  (let-syntax ((test (make-test + #;$add-flonum-ratnum)))
    (test FL1 RN01 0.008130081300813009)
    (test FL2 RN01 0.008130081300813009)
    (test FL3 RN01 2.1311300813008134)
    (test FL4 RN01 -2.114869918699187)
    (test FL1 RN02 -0.008130081300813009)
    (test FL2 RN02 -0.008130081300813009)
    (test FL3 RN02 2.114869918699187)
    (test FL4 RN02 -2.1311300813008134)
    (test FL1 RN03 -0.008130081300813009)
    (test FL2 RN03 -0.008130081300813009)
    (test FL3 RN03 2.114869918699187)
    (test FL4 RN03 -2.1311300813008134)
    (test FL1 RN04 -4364804.1626016265)
    (test FL2 RN04 -4364804.1626016265)
    (test FL3 RN04 -4364802.039601627)
    (test FL4 RN04 -4364806.285601626)
    #f)

  (let-syntax ((test (make-flonum-test + $add-flonum-flonum)))
    (test FL1 FL1 0.0)
    (test FL2 FL1 0.0)
    (test FL3 FL1 2.123)
    (test FL4 FL1 -2.123)
    (test FL1 FL2 0.0)
    (test FL2 FL2 -0.0)
    (test FL3 FL2 2.123)
    (test FL4 FL2 -2.123)
    (test FL1 FL3 2.123)
    (test FL2 FL3 2.123)
    (test FL3 FL3 4.246)
    (test FL4 FL3 0.0)
    (test FL1 FL4 -2.123)
    (test FL2 FL4 -2.123)
    (test FL3 FL4 0.0)
    (test FL4 FL4 -4.246)
    #f)

  (let-syntax ((test (make-cflonum-test + $add-flonum-cflonum)))
    (test FL1 CFL01 0.0+0.0i)
    (test FL2 CFL01 0.0+0.0i)
    (test FL3 CFL01 2.123+0.0i)
    (test FL4 CFL01 -2.123+0.0i)
    (test FL1 CFL02 0.0+0.0i)
    (test FL2 CFL02 -0.0+0.0i)
    (test FL3 CFL02 2.123+0.0i)
    (test FL4 CFL02 -2.123+0.0i)
    (test FL1 CFL03 0.0-0.0i)
    (test FL2 CFL03 0.0-0.0i)
    (test FL3 CFL03 2.123-0.0i)
    (test FL4 CFL03 -2.123-0.0i)
    (test FL1 CFL04 0.0-0.0i)
    (test FL2 CFL04 -0.0-0.0i)
    (test FL3 CFL04 2.123-0.0i)
    (test FL4 CFL04 -2.123-0.0i)
    (test FL1 CFL05 -1.2-0.0i)
    (test FL2 CFL05 -1.2-0.0i)
    (test FL3 CFL05 0.9230000000000003-0.0i)
    (test FL4 CFL05 -3.3230000000000004-0.0i)
    (test FL1 CFL06 -1.2+0.0i)
    (test FL2 CFL06 -1.2+0.0i)
    (test FL3 CFL06 0.9230000000000003+0.0i)
    (test FL4 CFL06 -3.3230000000000004+0.0i)
    (test FL1 CFL07 0.0-1.2i)
    (test FL2 CFL07 0.0-1.2i)
    (test FL3 CFL07 2.123-1.2i)
    (test FL4 CFL07 -2.123-1.2i)
    (test FL1 CFL08 0.0-1.2i)
    (test FL2 CFL08 -0.0-1.2i)
    (test FL3 CFL08 2.123-1.2i)
    (test FL4 CFL08 -2.123-1.2i)
    (test FL1 CFL09 -1.2-inf.0i)
    (test FL1 CFL10 -1.2+inf.0i)
    (test FL1 CFL11 +inf.0-1.2i)
    (test FL1 CFL12 -inf.0-1.2i)
    (test FL1 CFL13 -1.2+nan.0i)
    (test FL1 CFL14 -1.2+nan.0i)
    (test FL1 CFL15 +nan.0-1.2i)
    (test FL1 CFL16 +nan.0-1.2i)
    #f)

  (let-syntax ((test (make-inexact-test + #;$add-flonum-compnum)))
    (test FL1 10+20i 10.0+20.0i)
    (test FL1 1+20.0i 1.0+20.0i)
    (test FL1 10.0+2i 10.0+2i)
    (test FL1 1/2+20i 0.5+20.0i)
    (test FL1 10+2/3i 10.0+2/3i)
    (test FL1 (make-rectangular BN2 20) 536871011.0+20.0i)
    (test FL1 (make-rectangular 10 BN2) 10.0+536871011.0i)
    #f)

;;; --------------------------------------------------------------------

  (let-syntax ((test (make-test + $add-flonum-bignum)))
    (test FL1 VBN1 1.152921504606847e+18)
    (test FL2 VBN1 1.152921504606847e+18)
    (test FL3 VBN1 1.152921504606847e+18)
    (test FL4 VBN1 1.152921504606847e+18)
    (test FL1 VBN2 1.152921504606847e+18)
    (test FL2 VBN2 1.152921504606847e+18)
    (test FL3 VBN2 1.152921504606847e+18)
    (test FL4 VBN2 1.152921504606847e+18)
    (test FL1 VBN3 -1.152921504606847e+18)
    (test FL2 VBN3 -1.152921504606847e+18)
    (test FL3 VBN3 -1.152921504606847e+18)
    (test FL4 VBN3 -1.152921504606847e+18)
    (test FL1 VBN4 -1.152921504606847e+18)
    (test FL2 VBN4 -1.152921504606847e+18)
    (test FL3 VBN4 -1.152921504606847e+18)
    (test FL4 VBN4 -1.152921504606847e+18)
    #f)

  (let-syntax ((test (make-test + $add-flonum-ratnum)))
    (test FL1 VRN01 0.008130081300813009)
    (test FL2 VRN01 0.008130081300813009)
    (test FL3 VRN01 2.1311300813008134)
    (test FL4 VRN01 -2.114869918699187)
    (test FL1 VRN02 -0.008130081300813009)
    (test FL2 VRN02 -0.008130081300813009)
    (test FL3 VRN02 2.114869918699187)
    (test FL4 VRN02 -2.1311300813008134)
    (test FL1 VRN03 -0.008130081300813009)
    (test FL2 VRN03 -0.008130081300813009)
    (test FL3 VRN03 2.114869918699187)
    (test FL4 VRN03 -2.1311300813008134)
    (test FL1 VRN04 -4364804.1626016265)
    (test FL2 VRN04 -4364804.1626016265)
    (test FL3 VRN04 -4364802.039601627)
    (test FL4 VRN04 -4364806.285601626)
    #f)

  (let-syntax ((test (make-inexact-test + $add-flonum-compnum)))
    (test FL1 10+20i 10.0+20.0i)
    (test FL1 1.0+20.0i 1.0+20.0i)
    (test FL1 10.0+2.0i 10.0+2.0i)
    (test FL1 1/2+20i 0.5+20.0i)
    (test FL1 10+2/3i 10.0+2/3i)
    (test FL1 (make-rectangular VBN2 20) 1.152921504606847e+18+20.0i)
    (test FL1 (make-rectangular 10 VBN2) 10.0+1.152921504606847e+18i)
    #f)

  #t)


(parametrise ((check-test-name	'cflonums))

  (let-syntax ((test (make-inexact-test + $add-cflonum-fixnum)))
    (test CFL01 FX1 1.0+0.0i)
    (test CFL02 FX1 1.0+0.0i)
    (test CFL03 FX1 1.0-0.0i)
    (test CFL04 FX1 1.0-0.0i)
    (test CFL01 FX2 -1.0+0.0i)
    (test CFL02 FX2 -1.0+0.0i)
    (test CFL03 FX2 -1.0-0.0i)
    (test CFL04 FX2 -1.0-0.0i)
    (test CFL01 FX3 536870911.0+0.0i)
    (test CFL02 FX3 536870911.0+0.0i)
    (test CFL03 FX3 536870911.0-0.0i)
    (test CFL04 FX3 536870911.0-0.0i)
    (test CFL01 FX4 -536870912.0+0.0i)
    (test CFL02 FX4 -536870912.0+0.0i)
    (test CFL03 FX4 -536870912.0-0.0i)
    (test CFL04 FX4 -536870912.0-0.0i)
    #f)

  (let-syntax ((test (make-inexact-test + #;$add-cflonum-bignum)))
    (test CFL01 BN1 536870912.0+0.0i)
    (test CFL02 BN1 536870912.0+0.0i)
    (test CFL03 BN1 536870912.0-0.0i)
    (test CFL04 BN1 536870912.0-0.0i)
    (test CFL01 BN2 536871011.0+0.0i)
    (test CFL02 BN2 536871011.0+0.0i)
    (test CFL03 BN2 536871011.0-0.0i)
    (test CFL04 BN2 536871011.0-0.0i)
    (test CFL01 BN3 -536870913.0+0.0i)
    (test CFL02 BN3 -536870913.0+0.0i)
    (test CFL03 BN3 -536870913.0-0.0i)
    (test CFL04 BN3 -536870913.0-0.0i)
    (test CFL01 BN4 -536871012.0+0.0i)
    (test CFL02 BN4 -536871012.0+0.0i)
    (test CFL03 BN4 -536871012.0-0.0i)
    (test CFL04 BN4 -536871012.0-0.0i)
    #f)

  (let-syntax ((test (make-inexact-test + #;$add-cflonum-ratnum)))
    (test CFL01 RN01 0.008130081300813009+0.0i)
    (test CFL02 RN01 0.008130081300813009+0.0i)
    (test CFL03 RN01 0.008130081300813009-0.0i)
    (test CFL04 RN01 0.008130081300813009-0.0i)
    (test CFL01 RN02 -0.008130081300813009+0.0i)
    (test CFL02 RN02 -0.008130081300813009+0.0i)
    (test CFL03 RN02 -0.008130081300813009-0.0i)
    (test CFL04 RN02 -0.008130081300813009-0.0i)
    (test CFL01 RN03 -0.008130081300813009+0.0i)
    (test CFL02 RN03 -0.008130081300813009+0.0i)
    (test CFL03 RN03 -0.008130081300813009-0.0i)
    (test CFL04 RN03 -0.008130081300813009-0.0i)
    (test CFL01 RN04 -4364804.1626016265+0.0i)
    (test CFL02 RN04 -4364804.1626016265+0.0i)
    (test CFL03 RN04 -4364804.1626016265-0.0i)
    (test CFL04 RN04 -4364804.1626016265-0.0i)
    #f)

  (let-syntax ((test (make-inexact-test + $add-cflonum-flonum)))
    (test CFL01 FL1 0.0+0.0i)
    (test CFL02 FL1 0.0+0.0i)
    (test CFL03 FL1 0.0-0.0i)
    (test CFL04 FL1 0.0-0.0i)
    (test CFL01 FL2 0.0+0.0i)
    (test CFL02 FL2 -0.0+0.0i)
    (test CFL03 FL2 0.0-0.0i)
    (test CFL04 FL2 -0.0-0.0i)
    (test CFL01 FL3 2.123+0.0i)
    (test CFL02 FL3 2.123+0.0i)
    (test CFL03 FL3 2.123-0.0i)
    (test CFL04 FL3 2.123-0.0i)
    (test CFL01 FL4 -2.123+0.0i)
    (test CFL02 FL4 -2.123+0.0i)
    (test CFL03 FL4 -2.123-0.0i)
    (test CFL04 FL4 -2.123-0.0i)
    #f)

  (let-syntax ((test (make-cflonum-test + $add-cflonum-cflonum)))
    (test CFL01 CFL01 0.0+0.0i)
    (test CFL02 CFL01 0.0+0.0i)
    (test CFL03 CFL01 0.0+0.0i)
    (test CFL04 CFL01 0.0+0.0i)
    (test CFL01 CFL02 0.0+0.0i)
    (test CFL02 CFL02 -0.0+0.0i)
    (test CFL03 CFL02 0.0+0.0i)
    (test CFL04 CFL02 -0.0+0.0i)
    (test CFL01 CFL03 0.0+0.0i)
    (test CFL02 CFL03 0.0+0.0i)
    (test CFL03 CFL03 0.0-0.0i)
    (test CFL04 CFL03 0.0-0.0i)
    (test CFL01 CFL04 0.0+0.0i)
    (test CFL02 CFL04 -0.0+0.0i)
    (test CFL03 CFL04 0.0-0.0i)
    (test CFL04 CFL04 -0.0-0.0i)
    (test CFL01 CFL05 -1.2+0.0i)
    (test CFL02 CFL05 -1.2+0.0i)
    (test CFL03 CFL05 -1.2-0.0i)
    (test CFL04 CFL05 -1.2-0.0i)
    (test CFL01 CFL06 -1.2+0.0i)
    (test CFL02 CFL06 -1.2+0.0i)
    (test CFL03 CFL06 -1.2+0.0i)
    (test CFL04 CFL06 -1.2+0.0i)
    (test CFL01 CFL07 0.0-1.2i)
    (test CFL02 CFL07 0.0-1.2i)
    (test CFL03 CFL07 0.0-1.2i)
    (test CFL04 CFL07 0.0-1.2i)
    (test CFL01 CFL08 0.0-1.2i)
    (test CFL02 CFL08 -0.0-1.2i)
    (test CFL03 CFL08 0.0-1.2i)
    (test CFL04 CFL08 -0.0-1.2i)
    (test CFL01 CFL09 -1.2-inf.0i)
    (test CFL01 CFL10 -1.2+inf.0i)
    (test CFL01 CFL11 +inf.0-1.2i)
    (test CFL01 CFL12 -inf.0-1.2i)
    (test CFL01 CFL13 -1.2+nan.0i)
    (test CFL01 CFL14 -1.2+nan.0i)
    (test CFL01 CFL15 +nan.0-1.2i)
    (test CFL01 CFL16 +nan.0-1.2i)
    #f)

  (let-syntax ((test (make-inexact-test + #;$add-cflonum-compnum)))
    (test CFL01 10+20i 10.0+20.0i)
    (test CFL01 1+20.0i 1.0+20.0i)
    (test CFL01 10.0+2i 10.0+2.0i)
    (test CFL01 1/2+20i 0.5+20.0i)
    (test CFL01 10+2/3i 10.0+0.6666666666666666i)
    (test CFL01 (make-rectangular BN2 20) 536871011.0+20.0i)
    (test CFL01 (make-rectangular 10 BN2) 10.0+536871011.0i)
    #f)

;;; --------------------------------------------------------------------

  (let-syntax ((test (make-inexact-test + $add-cflonum-bignum)))
    (test CFL01 VBN1 1.152921504606847e+18+0.0i)
    (test CFL02 VBN1 1.152921504606847e+18+0.0i)
    (test CFL03 VBN1 1.152921504606847e+18-0.0i)
    (test CFL04 VBN1 1.152921504606847e+18-0.0i)
    (test CFL01 VBN2 1.152921504606847e+18+0.0i)
    (test CFL02 VBN2 1.152921504606847e+18+0.0i)
    (test CFL03 VBN2 1.152921504606847e+18-0.0i)
    (test CFL04 VBN2 1.152921504606847e+18-0.0i)
    (test CFL01 VBN3 -1.152921504606847e+18+0.0i)
    (test CFL02 VBN3 -1.152921504606847e+18+0.0i)
    (test CFL03 VBN3 -1.152921504606847e+18-0.0i)
    (test CFL04 VBN3 -1.152921504606847e+18-0.0i)
    (test CFL01 VBN4 -1.152921504606847e+18+0.0i)
    (test CFL02 VBN4 -1.152921504606847e+18+0.0i)
    (test CFL03 VBN4 -1.152921504606847e+18-0.0i)
    (test CFL04 VBN4 -1.152921504606847e+18-0.0i)
    #f)

  (let-syntax ((test (make-inexact-test + $add-cflonum-ratnum)))
    (test CFL01 VRN01 0.008130081300813009+0.0i)
    (test CFL02 VRN01 0.008130081300813009+0.0i)
    (test CFL03 VRN01 0.008130081300813009-0.0i)
    (test CFL04 VRN01 0.008130081300813009-0.0i)
    (test CFL01 VRN02 -0.008130081300813009+0.0i)
    (test CFL02 VRN02 -0.008130081300813009+0.0i)
    (test CFL03 VRN02 -0.008130081300813009-0.0i)
    (test CFL04 VRN02 -0.008130081300813009-0.0i)
    (test CFL01 VRN03 -0.008130081300813009+0.0i)
    (test CFL02 VRN03 -0.008130081300813009+0.0i)
    (test CFL03 VRN03 -0.008130081300813009-0.0i)
    (test CFL04 VRN03 -0.008130081300813009-0.0i)
    (test CFL01 VRN04 -4364804.1626016265+0.0i)
    (test CFL02 VRN04 -4364804.1626016265+0.0i)
    (test CFL03 VRN04 -4364804.1626016265-0.0i)
    (test CFL04 VRN04 -4364804.1626016265-0.0i)
    #f)

  (let-syntax ((test (make-inexact-test + $add-cflonum-compnum)))
    (test CFL01 10+20i 10.0+20.0i)
    (test CFL01 1.0+20.0i 1.0+20.0i)
    (test CFL01 10.0+2.0i 10.0+2.0i)
    (test CFL01 1/2+20i 0.5+20.0i)
    (test CFL01 10+2/3i 10.0+0.6666666666666666i)
    (test CFL01 (make-rectangular VBN2 20) 1.152921504606847e+18+20.0i)
    (test CFL01 (make-rectangular 10 VBN2) 10.0+1.152921504606847e+18i)
    #f)

  #t)


(parametrise ((check-test-name	'compnums))

  (let-syntax ((test (make-test + #;$add-compnum-fixnum)))
    (test 10+20i 1 11+20i)
    (test 1.0+20.0i 1 2.0+20.0i)
    (test 10.0+2.0i 1 11.0+2.0i)
    (test 1/2+20i 1 3/2+20i)
    (test 10+2/3i 1 11+2/3i)
    (test (make-rectangular BN1 20) 1 536870913+20i)
    (test (make-rectangular 10 BN1) 1 11+536870912i)
    #f)

  (let-syntax ((test (make-test + #;$add-compnum-bignum)))
    (test 10+20i BN1 536870922+20i)
    (test 1.0+20.0i BN1 536870913.0+20.0i)
    (test 10.0+2.0i BN1 536870922.0+2.0i)
    (test 1/2+20i BN1 1073741825/2+20i)
    (test 10+2/3i BN1 536870922+2/3i)
    (test (make-rectangular BN2 20) BN1 1073741923+20i)
    (test (make-rectangular 10 BN2) BN1 536870922+536871011i)
    #f)

  (let-syntax ((test (make-inexact-test + #;$add-compnum-ratnum)))
    (test 10+20i RN01 1231/123+20i)
    (test 1+20.0i RN01 124/123+20.0i)
    (test 10.0+2.0i RN01 10.008130081300813+2.0i)
    (test 1/2+20i RN01 125/246+20i)
    (test 10+2/3i RN01 1231/123+2/3i)
    (test (make-rectangular RN02 20) RN01 0+20i)
    (test (make-rectangular 10 RN02) RN01 1231/123-1/123i)
    #f)

  (let-syntax ((test (make-inexact-test + #;$add-compnum-flonum)))
    (test 10+20i FL1 10.0+20.0i)
    (test 1+20.0i FL1 1.0+20.0i)
    (test 10.0+2i FL1 10.0+2.0i)
    (test 1.0+20.0i FL1 1.0+20.0i)
    (test 10.0+2.0i FL1 10.0+2.0i)
    (test 1/2+20i FL1 0.5+20.0i)
    (test 10+2/3i FL1 10.0+2/3i)
    (test (make-rectangular BN2 20) FL1 536871011.0+20.0i)
    (test (make-rectangular 10 BN2) FL1 10.0+536871011.0i)
    #f)

  (let-syntax ((test (make-inexact-test + #;$add-compnum-cflonum)))
    (test 10+20i CFL01 10.0+20.0i)
    (test 1.0+20.0i CFL01 1.0+20.0i)
    (test 10.0+2.0i CFL01 10.0+2.0i)
    (test 1/2+20i CFL01 0.5+20.0i)
    (test 10+2/3i CFL01 10.0+0.6666666666666666i)
    (test (make-rectangular BN2 20) CFL01 536871011.0+20.0i)
    (test (make-rectangular 10 BN2) CFL01 10.0+536871011.0i)
    #f)

;;; --------------------------------------------------------------------

  (let-syntax ((test (make-test + $add-compnum-fixnum)))
    (test 10+20i 1 11+20i)
    (test 1.0+20i 1 2.0+20i)
    (test 10+2.0i 1 11+2.0i)
    (test 1/2+20i 1 3/2+20i)
    (test 10+2/3i 1 11+2/3i)
    (test (make-rectangular VBN1 20) 1 1152921504606846977+20i)
    (test (make-rectangular 10 VBN1) 1 11+1152921504606846976i)
    #f)

  (let-syntax ((test (make-test + $add-compnum-bignum)))
    (test 10+20i VBN1 1152921504606846986+20i)
    (test 1+20.0i VBN1 1152921504606846977+20.0i)
    (test 10+2i VBN1 1152921504606846986+2.0i)
    (test 1/2+20i VBN1 2305843009213693953/2+20i)
    (test 10+2/3i VBN1 1152921504606846986+2/3i)
    (test (make-rectangular VBN2 20) VBN1 2305843009213694051+20i)
    (test (make-rectangular 10 VBN2) VBN1 1152921504606846986+1152921504606847075i)
    #f)

  (let-syntax ((test (make-inexact-test + $add-compnum-ratnum)))
    (test 10+20i VRN01 1231/123+20i)
    (test 1.0+20i VRN01 1.008130081300813+20i)
    (test 10+2.0i VRN01 1231/123+2.0i)
    (test 1/2+20i VRN01 125/246+20i)
    (test 10+2/3i VRN01 1231/123+2/3i)
    (test (make-rectangular VRN02 20) VRN01 0+20i)
    (test (make-rectangular 10 VRN02) VRN01 1231/123-1/123i)
    #f)

  (let-syntax ((test (make-inexact-test + $add-compnum-flonum)))
    (test 10+20i FL1 10.0+20.0i)
    (test 1+20i FL1 1+20i)
    (test 10+2i FL1 10+2i)
    (test 1+20i FL1 1+20i)
    (test 10+2i FL1 10+2i)
    (test 1/2+20i FL1 0.5+20.0i)
    (test 10+2/3i FL1 10.0+2/3i)
    (test (make-rectangular VBN2 20) FL1 1.152921504606847e+18+20.0i)
    (test (make-rectangular 10 VBN2) FL1 10.0+1.152921504606847e+18i)
    #f)

  (let-syntax ((test (make-inexact-test + $add-compnum-cflonum)))
    (test 10+20i CFL01 10.0+20.0i)
    (test 1+20i CFL01 1+20i)
    (test 10+2i CFL01 10.+2.i)
    (test 1/2+20i CFL01 0.5+20.0i)
    (test 10+2/3i CFL01 10.0+0.6666666666666666i)
    (test (make-rectangular VBN2 20) CFL01 1.152921504606847e+18+20.0i)
    (test (make-rectangular 10 VBN2) CFL01 10.0+1.152921504606847e+18i)
    #f)

  #t)


;;;; done

(check-report)

;;; end of file
