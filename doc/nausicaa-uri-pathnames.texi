@node uri pathnames
@section File pathnames


The library hierarchy @library{nausicaa uri pathnames ---} provides
operations on file system pathnames with and without access to the file
system.  Among all the libraries in this hierarchy, the end user might
be interested in @library{nausicaa uri pathnames}: it defines a
platform--independent @api{}.

@menu
* uri pathnames intro::         Overview of the pathname model.
* uri pathnames abstract::      Abstract class interface.
* uri pathnames unix::          Manipulating Unix pathnames.
* uri pathnames native::        Manipulating native pathnames.
@end menu

@c page
@node uri pathnames intro
@subsection Overview of the pathname model


In the context of the libraries @library{nausicaa uri pathname ---}, a
@dfn{file system pathname} is a Scheme bytevector representing a file or
directory on a file system.  To model pathnames Nausicaa defines a
hierarchy of classes that wrap the bytevectors; by using them we can
write code assuming that a bytevector has already been validated as
pathname representation.  To be interpreted as pathname a bytevector
must adhere to the following conventions:

@itemize
@item
Pathnames can be absolute or relative to other pathnames.

@item
A pathname can be split, using any separator, in a list of segment
bytevectors representing its components.

@item
The list of segments alone does not specify if the pathname is absolute
or relative; typically an absolute/relative flag is needed (for example:
a boolean, true if the pathname is absolute).

@item
Some additional information can be needed along with the segments and
the absolute/relative flag to fully specify a pathname (for example:
drive letters on Windows(tm) platforms).

@item
A segment holding a single byte representing a dot in @ascii{} encoding
represents the current directory.

@item
A segment holding two bytes each representing a dot in @ascii{} encoding
represents the parent directory.
@end itemize

@c page
@node uri pathnames abstract
@subsection Abstract class interface


@cindex @library{nausicaa uri pathnames abstract}, library
@cindex Library @library{nausicaa uri pathnames abstract}


The library @library{nausicaa uri pathnames abstract} defines an
abstract @api{} to handle pathname objects in a way that is independent
from the underlying platform.  The classes defined by this library
cannot be instantiated; we must instantiate platform--specific
subclasses instead, like @class{relative-unix-pathname} and
@class{absolute-unix-pathname} exported by @library{nausicaa uri
pathnames unix}, @ref{uri pathnames unix, Manipulating Unix pathnames}.

@menu
* uri pathnames abstract pathname::  Base pathname abstract class.
* uri pathnames abstract absolute::  Absolute pathname abstract class.
* uri pathnames abstract relative::  Relative pathname abstract class.
* uri pathnames abstract methods::   Extending pathname class methods.
@end menu

@c page
@node uri pathnames abstract pathname
@subsubsection Base pathname abstract class


The following bindings are exported by the library @library{nausicaa uri
pathnames abstract}.


@deftp {Abstract Class} @aclass{pathname}
Base type for file system pathname objects.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and predicates


@defop {Super constructor} @aclass{pathname} constructor
Constructor to be used by the derived classes' constructors.
@end defop

@c ------------------------------------------------------------

@subsubheading Public fields


@deftypecv {Immutable virtual field} @aclass{pathname} @aclass{bytevector} bytevector
Bytevector representation of the pathname; the value itself must not be
mutated.  The value of this field is produced by the multimethod
@func{pathname-bytevector}, @ref{uri pathnames abstract methods,
pathname-bytevector}.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{pathname} @aclass{string} string
String representation of the pathname; the value itself must not be
mutated.  The value of this field is produced by the multimethod
@func{pathname-string}, @ref{uri pathnames abstract methods,
pathname-string}.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{pathname} @aclass{bytevector} uri
Bytevector representation of the pathname in the format specified by
@rfc{} 3986; the value itself must not be mutated.  The value of this
field is produced by the multimethod @func{pathname-uri-representation},
@ref{uri pathnames abstract methods, pathname-uri-representation}.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{pathname} extension
Return a bytevector representing the extension of the last segment of
the instance pathname, dot separator @strong{not} included.  This method
is implemented by the multimethod @func{pathname-extension}, @ref{uri
pathnames abstract methods, pathname-extension}.
@end defmethod


@defmethod @aclass{pathname} dirname
Return a pathname object representing the directory part of the instance
pathname.  This method is implemented by the multimethod
@func{pathname-dirname}, @ref{uri pathnames abstract methods,
pathname-dirname}.
@end defmethod


@defmethod @aclass{pathname} tailname
Return a pathname object representing the last segment of the instance
pathname.  This method is implemented by the multimethod
@func{pathname-tailname}, @ref{uri pathnames abstract methods,
pathname-tailname}.
@end defmethod


@defmethod @aclass{pathname} rootname
Return a pathname object representing the instance pathname with the
extension of the last segment stripped, dot separator @strong{not}
included.  This method is implemented by the multimethod
@func{pathname-rootname}, @ref{uri pathnames abstract methods,
pathname-rootname}.
@end defmethod


@defmethod @aclass{pathname} split
Return 2 values: a boolean, @true{} if the instance pathname is
absolute; a list of bytevectors each representing a segment of the
instance pathname.  This method is implemented by the multimethod
@func{pathname-split}, @ref{uri pathnames abstract methods,
pathname-split}.
@end defmethod


@defmethod @aclass{pathname} prefix? @{@var{ptn} @aclass{pathname}@}
Return @true{} if the instance pathname is a prefix of @var{ptn},
otherwise return @false{}.  This method is implemented by the
multimethod @func{pathname-prefix?}, @ref{uri pathnames abstract
methods, pathname-prefix?}.
@end defmethod


@defmethod @aclass{pathname} suffix? @{@var{ptn} @aclass{pathname}@}
Return @true{} if the instance pathname is a suffix of @var{ptn},
otherwise return @false{}.  This method is implemented by the
multimethod @func{pathname-suffix?}, @ref{uri pathnames abstract
methods, pathname-suffix?}.
@end defmethod


@defmethod @aclass{pathname} prepend @{@var{ptn} @aclass{pathname}@}
Return a new pathname object representing the instance pathname
prepended to @var{ptn}.  This method is implemented by the multimethod
@func{pathname-prepend}, @ref{uri pathnames abstract methods,
pathname-prepend}.
@end defmethod


@defmethod @aclass{pathname} replace-extension @var{ext}
Return a new pathname object representing the instance pathname with the
extension of the last segment replaced by @var{ext}.  This method is
implemented by the multimethod @func{pathname-replace-extension},
@ref{uri pathnames abstract methods, pathname-replace-extension}.
@end defmethod

@c page
@node uri pathnames abstract absolute
@subsubsection Absolute pathname abstract class


The following bindings are exported by the library @library{nausicaa uri
pathnames abstract}.


@deftp {Abstract Class} @aclass{absolute-pathname}
Base type for absolute pathnames; it is derived from @class{pathname}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and predicates


@defop {Super constructor} @aclass{absolute-pathname} constructor
Constructor to be used by the derived classes' constructors.
@end defop

@c page
@node uri pathnames abstract relative
@subsubsection Relative pathname abstract class


The following bindings are exported by the library @library{nausicaa uri
pathnames abstract}.


@deftp {Abstract Class} @aclass{relative-pathname}
Base type for relative pathnames; it is derived from @class{pathname}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and predicates


@defop {Super constructor} @aclass{relative-pathname} constructor
Constructor to be used by the derived classes' constructors.
@end defop

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{pathname} append @{@var{ptn} @aclass{pathname}@}
Return a new pathname object representing the instance pathname appended
to @var{ptn}.  This method is implemented by the multimethod
@func{pathname-append}, @ref{uri pathnames abstract methods,
pathname-append}.
@end defmethod

@c page
@node uri pathnames abstract methods
@subsubsection Extending class methods


The following bindings are exported by the library @library{nausicaa uri
pathnames abstract}.


@deftypefn Multimethod @aclass{bytevector} pathname-bytevector @var{ptn}
Return a bytevector representation of the pathname; the returned value
must not be mutated.
@end deftypefn


@deftypefn Multimethod @aclass{string} pathname-string @var{ptn}
Return a string representation of the pathname; the returned value must
not be mutated.
@end deftypefn


@deftypefn Multimethod @aclass{bytevector} pathname-uri-representation @var{ptn}
Return a bytevector representation of the pathname in the format
specified by @rfc{} 3986; the returned value must not be mutated.
@end deftypefn


@deftypefn Multimethod @aclass{pathname} pathname-extension @var{ptn}
Return a bytevector representing the extension of the last segment of
the instance pathname, dot separator @strong{not} included.
@end deftypefn


@deftypefn Multimethod @aclass{pathname} pathname-dirname @var{ptn}
Return a pathname object representing the directory part of the instance
pathname.
@end deftypefn


@deftypefn Multimethod @aclass{pathname} pathname-tailname @var{ptn}
Return a pathname object representing the last segment of the instance
pathname.
@end deftypefn


@deftypefn Multimethod @aclass{pathname} pathname-rootname @var{ptn}
Return a pathname object representing the instance pathname with the
extension of the last segment stripped, dot separator @strong{not}
included.
@end deftypefn


@deffn Multimethod pathname-split @var{ptn}
Return 2 values: a boolean, @true{} if the instance pathname is
absolute; a list of bytevectors each representing a segment of the
instance pathname.
@end deffn


@deftypefn Multimethod @aclass{boolean} pathname-prefix? @vari{ptn} @varii{ptn}
Return @true{} if the pathname @vari{ptn} is a prefix of the pathname
@varii{ptn}, otherwise return @false{}.
@end deftypefn


@deftypefn Multimethod @aclass{boolean} pathname-suffix? @vari{ptn} @varii{ptn}
Return @true{} if the pathname @vari{ptn} is a suffix of the pathname
@varii{ptn}, otherwise return @false{}.
@end deftypefn


@deftypefn Multimethod @aclass{pathname} pathname-prepend @vari{ptn} @varii{ptn}
Return a new pathname object representing the pathname @vari{ptn}
prepended to the pathname @varii{ptn}.
@end deftypefn


@deftypefn Multimethod @aclass{pathname} pathname-append @vari{ptn} @varii{ptn}
Return a new pathname object representing the pathname @vari{ptn}
appended to the pathname @varii{ptn}.
@end deftypefn


@deftypefn Multimethod @aclass{pathname} pathname replace-extension @var{ptn} @var{ext}
Return a new pathname object representing the pathname @var{ptn} with
the extension of the last segment replaced by @var{ext}.
@end deftypefn


@deftypefn Multimethod @aclass{boolean} pathname=? @vari{ptn} @varii{ptn}
@deftypefnx Multimethod @aclass{boolean} pathname=? @{@vari{ptn} @aclass{absolute-pathname}@} @{@varii{ptn} @aclass{relative-pathname}@}
@deftypefnx Multimethod @aclass{boolean} pathname=? @{@vari{ptn} @aclass{relative-pathname}@} @{@varii{ptn} @aclass{absolute-pathname}@}
Return @true{} if the pathname arguments are equal, otherwise return
@false{}.  The two predefined implementations always return @false{}
because, obviously, absolute pathnames cannot be equal to relative
pathnames.
@end deftypefn

@c page
@node uri pathnames unix
@subsection Manipulating Unix pathnames


@cindex @library{nausicaa uri pathnames unix}, library
@cindex Library @library{nausicaa uri pathnames unix}


The library @library{nausicaa uri pathnames unix} specialises the
pathnames @api{} defined by @library{nausicaa uri pathnames abstract} to
handle Unix--style pathnames.  It implements all the methods required by
the abstract base classes.

The following bindings from @library{nausicaa uri pathnames abstract}
are reexported by @library{nausicaa uri pathnames unix}:

@example
<pathname>
<relative-pathname>
<absolute-pathname>
pathname=?
@end example

The string and bytevector representations of Unix--pathnames used by
@library{nausicaa uri pathnames unix} are the same as the ones defined
by @library{vicare parser-tools unix-pathnames}, @libsref{parser-tools
unix-pathnames, Parsing Unix file system pathnames}.

@menu
* uri pathnames unix intro::    Introduction to Unix pathnames.
* uri pathnames unix absolute:: Absolute Unix pathname objects.
* uri pathnames unix relative:: Relative Unix pathname objects.
* uri pathnames unix utils::    Unix pathname utilities.
* uri pathnames unix errors::   Condition object types.
@end menu

@c page
@node uri pathnames unix intro
@subsubsection Introduction to Unix pathnames


A Unix pathname has the following grammar:

@example
unix-pathname      = absolute-pathname
                   | relative-pathname

absolute-pathname  = "/" segment *( "/" segment )
relative-pathname  = segment-nz *( "/" segment )

segment            = *char
segment-nz         = 1*char

char               = [1, 255]
@end example

@noindent
where @math{[1, 255]} represents the byte interval between @math{1}
included and @math{255} included.

On Unix--system, which means @posix{} systems, the system functions
accept pathnames as C strings: @asciiz{} strings; @value{PRJNAME}
bytevectors are compatible with C strings and so the bytevector
representation of Unix--specialised @class{pathname} objects is
compatible, too.

@c page
@node uri pathnames unix absolute
@subsubsection Absolute Unix pathname objects


The following bindings are exported by the library @library{nausicaa uri
pathnames unix}.


@deftp Class @aclass{absolute-unix-pathname}
Type of absolute Unix pathnames; it is derived from
@class{absolute-pathname} exported by @library{nausicaa uri pathnames
abstract}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Makers, constructors, predicates


@defop {Common constructor} @aclass{absolute-unix-pathname} constructor @var{pathname}
Build and return a new Unix pathname record from @var{pathname}, which
must be a string or bytevector representing an absolute Unix pathname
according to the predicates @func{pathname?} and @func{absolute?}
defined by @library{vicare parser-tools unix-pathnames}.

@var{pathname} is converted to bytevector with the function
@func{string/bytevector->pathname-bytevector} and normalised with the
function @func{normalise-segments}, both defined by @library{vicare
parser-tools unix-pathnames}.
@end defop


@defop Maker @aclass{absolute-unix-pathname} @aclass{absolute-unix-pathname} (@meta{pathname})
Build and return a new instance of @class{absolute-unix-pathname} using
the common constructor.
@end defop

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{absolute-unix-pathname} extension
Return a bytevector representing the extension of the last segment of
the instance pathname, dot separator @strong{not} included.  This method
is implemented with the function @func{extension} defined by
@library{vicare parser-tools unix-pathnames}, @libsref{parser-tools
unix-pathnames comp, extension}.
@end defmethod


@defmethod @aclass{absolute-unix-pathname} dirname
Return an @class{absolute-unix-pathname} object representing the
directory part of the instance pathname.  This method is implemented
with the function @func{dirname} defined by @library{vicare parser-tools
unix-pathnames}, @libsref{parser-tools unix-pathnames comp, dirname}.
@end defmethod


@defmethod @aclass{absolute-unix-pathname} tailname
Return a @class{relative-unix-pathname} object representing the last
segment of the instance pathname.  This method is implemented with the
function @func{tailname} defined by @library{vicare parser-tools
unix-pathnames}, @libsref{parser-tools unix-pathnames comp, tailname}.
@end defmethod


@defmethod @aclass{absolute-unix-pathname} rootname
Return an @class{absolute-unix-pathname} object representing the
instance pathname with the extension of the last segment stripped, dot
separator @strong{not} included.  This method is implemented with the
function @func{rootname} defined by @library{vicare parser-tools
unix-pathnames}, @libsref{parser-tools unix-pathnames comp, rootname}.
@end defmethod


@defmethod @aclass{absolute-unix-pathname} split
Return 2 values: a boolean, @true{} if the instance pathname is
absolute; a list of bytevectors each representing a segment of the
instance pathname.  This method is implemented with the function
@func{split} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, split}.
@end defmethod


@defmethod @aclass{absolute-unix-pathname} prefix? @{@var{ptn} @aclass{absolute-unix-pathname}@}
@defmethodx @aclass{absolute-unix-pathname} prefix? @{@var{ptn} @aclass{relative-unix-pathname}@}
Return @true{} if the instance pathname is a prefix of @var{ptn},
otherwise return @false{}.  This method is implemented with the function
@func{prefix?} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, prefix?}.
@end defmethod


@defmethod @aclass{absolute-unix-pathname} suffix? @{@var{ptn} @aclass{absolute-unix-pathname}@}
@defmethodx @aclass{absolute-unix-pathname} suffix? @{@var{ptn} @aclass{relative-unix-pathname}@}
Return @true{} if the instance pathname is a suffix of @var{ptn},
otherwise return @false{}.  This method is implemented with the function
@func{suffix?} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, suffix?}.
@end defmethod


@defmethod @aclass{absolute-unix-pathname} prepend @{@var{ptn} @aclass{absolute-unix-pathname}@}
Return a new pathname object representing the instance pathname
prepended to @var{ptn}.  This method is implemented with the function
@func{prepend} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, prepend}.
@end defmethod


@defmethod @aclass{absolute-unix-pathname} replace-extension @{@var{ext} @aclass{bytevector}@}
@defmethodx @aclass{absolute-unix-pathname} replace-extension @{@var{ext} @aclass{string}@}
Return an @aclass{absolute-unix-pathname} object representing the
instance pathname with the extension of the last segment replaced by
@var{ext}.  This method is implemented with the function
@func{replace-extension} defined by @library{vicare parser-tools
unix-pathnames}, @libsref{parser-tools unix-pathnames comp,
replace-extension}.
@end defmethod

@c page
@node uri pathnames unix relative
@subsubsection Relative Unix pathname objects


The following bindings are exported by the library @library{nausicaa uri
pathnames unix}.


@deftp Class @aclass{relative-unix-pathname}
Type of relative Unix pathnames; it is derived from
@class{relative-pathname} exported by @library{nausicaa uri pathnames
abstract}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Makers, constructors, predicates


@defop {Common constructor} @aclass{relative-unix-pathname} constructor @var{pathname}
Build and return a new Unix pathname record from @var{pathname}, which
must be a string or bytevector representing an relative Unix pathname
according to the predicates @func{pathname?} and @func{relative?}
defined by @library{vicare parser-tools unix-pathnames}.

@var{pathname} is converted to bytevector with the function
@func{string/bytevector->pathname-bytevector} and normalised with the
function @func{normalise-segments}, both defined by @library{vicare
parser-tools unix-pathnames}.
@end defop


@defop Maker @aclass{relative-unix-pathname} @aclass{relative-unix-pathname} (@meta{pathname})
Build and return a new instance of @class{relative-unix-pathname} using
the common constructor.
@end defop

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{relative-unix-pathname} extension
Return a bytevector representing the extension of the last segment of
the instance pathname, dot separator @strong{not} included.  This method
is implemented with the function @func{extension} defined by
@library{vicare parser-tools unix-pathnames}, @libsref{parser-tools
unix-pathnames comp, extension}.
@end defmethod


@defmethod @aclass{relative-unix-pathname} dirname
Return a @class{absolute-unix-pathname} object representing the
directory part of the instance pathname.  This method is implemented
with the function @func{dirname} defined by @library{vicare parser-tools
unix-pathnames}, @libsref{parser-tools unix-pathnames comp, dirname}.
@end defmethod


@defmethod @aclass{relative-unix-pathname} tailname
Return a @class{relative-unix-pathname} object representing the last
segment of the instance pathname.  This method is implemented with the
function @func{tailname} defined by @library{vicare parser-tools
unix-pathnames}, @libsref{parser-tools unix-pathnames comp, tailname}.
@end defmethod


@defmethod @aclass{relative-unix-pathname} rootname
Return a @class{absolute-unix-pathname} object representing the instance
pathname with the extension of the last segment stripped, dot separator
@strong{not} included.  This method is implemented with the function
@func{rootname} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, rootname}.
@end defmethod


@defmethod @aclass{relative-unix-pathname} split
Return 2 values: a boolean, @false{} if the instance pathname is
relative; a list of bytevectors each representing a segment of the
instance pathname.  This method is implemented with the function
@func{split} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, split}.
@end defmethod


@defmethod @aclass{relative-unix-pathname} prefix? @{@var{ptn} @aclass{absolute-unix-pathname}@}
@defmethodx @aclass{relative-unix-pathname} prefix? @{@var{ptn} @aclass{relative-unix-pathname}@}
Return @true{} if the instance pathname is a prefix of @var{ptn},
otherwise return @false{}.  This method is implemented with the function
@func{prefix?} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, prefix?}.
@end defmethod


@defmethod @aclass{relative-unix-pathname} suffix? @{@var{ptn} @aclass{absolute-unix-pathname}@}
@defmethodx @aclass{relative-unix-pathname} suffix? @{@var{ptn} @aclass{relative-unix-pathname}@}
Return @true{} if the instance pathname is a suffix of @var{ptn},
otherwise return @false{}.  This method is implemented with the function
@func{suffix?} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, suffix?}.
@end defmethod


@defmethod @aclass{relative-unix-pathname} prepend @{@var{ptn} @aclass{absolute-unix-pathname}@}
@defmethodx @aclass{relative-unix-pathname} prepend @{@var{ptn} @aclass{relative-unix-pathname}@}
Return a new pathname object representing the instance pathname
prepended to @var{ptn}.  This method is implemented with the function
@func{prepend} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, prepend}.
@end defmethod


@defmethod @aclass{relative-unix-pathname} append @{@var{ptn} @aclass{absolute-unix-pathname}@}
@defmethodx @aclass{relative-unix-pathname} append @{@var{ptn} @aclass{relative-unix-pathname}@}
Return a new pathname object representing the instance pathname appended
to @var{ptn}.  This method is implemented with the function
@func{append} defined by @library{vicare parser-tools unix-pathnames},
@libsref{parser-tools unix-pathnames comp, append}.
@end defmethod


@defmethod @aclass{relative-unix-pathname} replace-extension @{@var{ext} @aclass{bytevector}@}
@defmethodx @aclass{relative-unix-pathname} replace-extension @{@var{ext} @aclass{string}@}
Return a @aclass{relative-unix-pathname} object representing the
instance pathname with the extension of the last segment replaced by
@var{ext}.  This method is implemented with the function
@func{replace-extension} defined by @library{vicare parser-tools
unix-pathnames}, @libsref{parser-tools unix-pathnames comp,
replace-extension}.
@end defmethod

@c page
@node uri pathnames unix utils
@subsubsection Unix pathname utilities


The following bindings are exported by the library @library{nausicaa uri
pathnames unix}.


@deffn Multimethod pathname @{@var{ptn} @aclass{string}@}
@deffnx Multimethod pathname @{@var{ptn} @aclass{bytevector}@}
Build and return a new instance of @class{absolute-unix-pathname} or
@class{relative-unix-pathname} from @var{ptn}, which must be a string or
bytevector representing an absolute or relative Unix pathname according
to the predicates @func{pathname?}, @func{absolute?} and
@func{relative?} defined by @library{vicare parser-tools
unix-pathnames}.
@end deffn


@deffn Multimethod pathname=? @{@vari{ptn} @aclass{absolute-unix-pathname}@} @{@varii{ptn} @aclass{absolute-unix-pathname}@}
@deffnx Multimethod pathname=? @{@vari{ptn} @aclass{relative-unix-pathname}@} @{@varii{ptn} @aclass{relative-unix-pathname}@}
Implementations for the multimethod @func{pathname=?} defined by
@library{nausicaa uri pathnames abstract}.
@end deffn

@c page
@node uri pathnames unix errors
@subsubsection Condition object types


The library @library{nausicaa uri pathnames unix} is built on top of
facilities defined by @library{vicare parser-tools unix-pathnames}; the
latter library uses some condition object type to signal exceptions
@libsref{parser-tools unix-pathnames errors, Condition object types}.
@library{nausicaa uri pathnames unix} defines some labels to shadow the
primitive condition types.

The following bindings are exported by the library @library{nausicaa uri
pathnames unix}.


@deftp {Condition Type} &unix-pathname-parser-error
Signals an error while parsing a Unix pathname representation; it is
derived from @condition{error}.
@end deftp


@deftp {Condition Type} &unix-pathname-normalisation-error
Signals an error while normalising a Unix pathname representation; it is
derived from @condition{error}.
@end deftp

@c page
@node uri pathnames native
@subsection Manipulating native pathnames


@cindex @library{nausicaa uri pathnames}, library
@cindex Library @library{nausicaa uri pathnames}


The library @library{nausicaa uri pathnames} defines an @api{} to handle
pathname objects in a way that is independent from the underlying
platform.  It does so by reexporting renamed bindings defined by a
platform--dependent library; for example on Unix--like systems: it
reexports bindings from @library{nausicaa uri pathnames unix}.

The selection of the platform--specific library happens at package
configuration time; at present only Unix style pathnames are supported.

The following bindings defined by @library{nausicaa uri pathnames
abstract} are reexported by @library{nausicaa uri pathnames}:

@example
<pathname>
<absolute-pathname>
<relative-pathname>
@end example

@menu
* uri pathnames native absolute::  Absolute pathname native class.
* uri pathnames native relative::  Relative pathname native class.
* uri pathnames native utils::     Native pathname utilities.
@end menu

@c page
@node uri pathnames native absolute
@subsubsection Absolute pathname native class


The following bindings are exported by the library @library{nausicaa uri
pathnames}.


@deftp Class @aclass{absolute-native-pathname}
Type of absolute native pathnames; it is derived from
@class{absolute-pathname}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Makers, constructors, predicates


@defop {Common constructor} @aclass{absolute-native-pathname} constructor @var{pathname}
Build and return a new instance of @class{absolute-native-pathname} from
@var{pathname}, which must be a string or bytevector representing an
absolute native pathname.
@end defop


@defop Maker @aclass{absolute-native-pathname} @aclass{absolute-native-pathname} (@meta{pathname})
Build and return a new instance of @class{absolute-native-pathname}
using the common constructor.
@end defop

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{absolute-native-pathname} extension
Return a bytevector representing the extension of the last segment of
the instance pathname, dot separator @strong{not} included.
@end defmethod


@defmethod @aclass{absolute-native-pathname} dirname
Return an @class{absolute-native-pathname} object representing the
directory part of the instance pathname.
@end defmethod


@defmethod @aclass{absolute-native-pathname} tailname
Return a @class{relative-native-pathname} object representing the last
segment of the instance pathname.
@end defmethod


@defmethod @aclass{absolute-native-pathname} rootname
Return an @class{absolute-native-pathname} object representing the
instance pathname with the extension of the last segment stripped, dot
separator @strong{not} included.
@end defmethod


@defmethod @aclass{absolute-native-pathname} split
Return 2 values: a boolean, @true{} if the instance pathname is
absolute; a list of bytevectors each representing a segment of the
instance pathname.
@end defmethod


@defmethod @aclass{absolute-native-pathname} prefix? @{@var{ptn} @aclass{absolute-native-pathname}@}
@defmethodx @aclass{absolute-native-pathname} prefix? @{@var{ptn} @aclass{relative-native-pathname}@}
Return @true{} if the instance pathname is a prefix of @var{ptn},
otherwise return @false{}.
@end defmethod


@defmethod @aclass{absolute-native-pathname} suffix? @{@var{ptn} @aclass{absolute-native-pathname}@}
@defmethodx @aclass{absolute-native-pathname} suffix? @{@var{ptn} @aclass{relative-native-pathname}@}
Return @true{} if the instance pathname is a suffix of @var{ptn},
otherwise return @false{}.
@end defmethod


@defmethod @aclass{absolute-native-pathname} prepend @{@var{ptn} @aclass{absolute-native-pathname}@}
Return a new pathname object representing the instance pathname
prepended to @var{ptn}.
@end defmethod


@defmethod @aclass{absolute-native-pathname} replace-extension @{@var{ext} @aclass{bytevector}@}
@defmethodx @aclass{absolute-native-pathname} replace-extension @{@var{ext} @aclass{string}@}
Return an @aclass{absolute-native-pathname} object representing the
instance pathname with the extension of the last segment replaced by
@var{ext}.
@end defmethod

@c page
@node uri pathnames native relative
@subsubsection Relative pathname native class


The following bindings are exported by the library @library{nausicaa uri
pathnames}.


@deftp Class @aclass{relative-native-pathname}
Type of relative native pathnames; it is derived from
@class{relative-pathname}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Makers, constructors, predicates


@defop {Common constructor} @aclass{relative-native-pathname} constructor @var{pathname}
Build and return a new instance of @class{relative-native-pathname} from
@var{pathname}, which must be a string or bytevector representing an
relative native pathname.
@end defop


@defop Maker @aclass{relative-native-pathname} @aclass{relative-native-pathname} (@meta{pathname})
Build and return a new instance of @class{relative-native-pathname}
using the common constructor.
@end defop

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{relative-native-pathname} extension
Return a bytevector representing the extension of the last segment of
the instance pathname, dot separator @strong{not} included.
@end defmethod


@defmethod @aclass{relative-native-pathname} dirname
Return a @class{absolute-native-pathname} object representing the
directory part of the instance pathname.
@end defmethod


@defmethod @aclass{relative-native-pathname} tailname
Return a @class{relative-native-pathname} object representing the last
segment of the instance pathname.
@end defmethod


@defmethod @aclass{relative-native-pathname} rootname
Return a @class{absolute-native-pathname} object representing the
instance pathname with the extension of the last segment stripped, dot
separator @strong{not} included.
@end defmethod


@defmethod @aclass{relative-native-pathname} split
Return 2 values: a boolean, @false{} if the instance pathname is
relative; a list of bytevectors each representing a segment of the
instance pathname.
@end defmethod


@defmethod @aclass{relative-native-pathname} prefix? @{@var{ptn} @aclass{absolute-native-pathname}@}
@defmethodx @aclass{relative-native-pathname} prefix? @{@var{ptn} @aclass{relative-native-pathname}@}
Return @true{} if the instance pathname is a prefix of @var{ptn},
otherwise return @false{}.
@end defmethod


@defmethod @aclass{relative-native-pathname} suffix? @{@var{ptn} @aclass{absolute-native-pathname}@}
@defmethodx @aclass{relative-native-pathname} suffix? @{@var{ptn} @aclass{relative-native-pathname}@}
Return @true{} if the instance pathname is a suffix of @var{ptn},
otherwise return @false{}.
@end defmethod


@defmethod @aclass{relative-native-pathname} prepend @{@var{ptn} @aclass{absolute-native-pathname}@}
@defmethodx @aclass{relative-native-pathname} prepend @{@var{ptn} @aclass{relative-native-pathname}@}
Return a new pathname object representing the instance pathname
prepended to @var{ptn}.
@end defmethod


@defmethod @aclass{relative-native-pathname} append @{@var{ptn} @aclass{absolute-native-pathname}@}
@defmethodx @aclass{relative-native-pathname} append @{@var{ptn} @aclass{relative-native-pathname}@}
Return a new pathname object representing the instance pathname appended
to @var{ptn}.
@end defmethod


@defmethod @aclass{relative-native-pathname} replace-extension @{@var{ext} @aclass{bytevector}@}
@defmethodx @aclass{relative-native-pathname} replace-extension @{@var{ext} @aclass{string}@}
Return a @aclass{relative-native-pathname} object representing the
instance pathname with the extension of the last segment replaced by
@var{ext}.
@end defmethod

@c page
@node uri pathnames native utils
@subsubsection Native pathname utilities


The following bindings are exported by the library @library{nausicaa uri
pathnames}.


@deffn Multimethod pathname @{@var{ptn} @aclass{string}@}
@deffnx Multimethod pathname @{@var{ptn} @aclass{bytevector}@}
Build and return a new instance of @class{absolute-native-pathname} or
@class{relative-native-pathname} from @var{ptn}, which must be a string
or bytevector representing an absolute or relative native pathname.
@end deffn


@deffn Multimethod pathname=? @{@vari{ptn} @aclass{absolute-native-pathname}@} @{@varii{ptn} @aclass{absolute-native-pathname}@}
@deffnx Multimethod pathname=? @{@vari{ptn} @aclass{relative-native-pathname}@} @{@varii{ptn} @aclass{relative-native-pathname}@}
Implementations for the multimethod @func{pathname=?} defined by
@library{nausicaa uri pathnames abstract}.
@end deffn

@c end of file
