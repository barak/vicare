@node net addresses
@section Network--related libraries


@menu
* net addresses ipv4::          IPv4 address objects.
* net addresses ipv6::          IPv6 address objects.
@end menu

@c page
@node net addresses ipv4
@subsection Ipv4 address objects


@cindex @library{nausicaa net addresses ipv4}, library
@cindex Library @library{nausicaa net addresses ipv4}


The library @library{nausicaa net addresses ipv4} exports utilities to
handle IPv4 addresses specifications, according to @rfc{} 5735.  To
parse the string representation of IPv4 addresses we can use the library
@library{nausicaa parser-tools ipv4-addresses}.

@menu
* net addresses ipv4 address::  IPv4 address objects class.
* net addresses ipv4 prefix::   IPv4 address prefix objects class.
* net addresses ipv4 aux::      IPv4 address auxiliary classes.
@end menu

@c page
@node net addresses ipv4 address
@subsubsection IPv4 address objects class


The following bindings are exported by the library @library{nausicaa net
addresses ipv4}.


@deftp Class @aclass{ipv4-address}
Represents an IPv4 address.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv4-address} constructor @var{numbers}
@defopx {Common constructor} @aclass{ipv4-address} constructor @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv4-address}.  When
applied to a single argument: @var{numbers} must be a list of @math{4}
fixnums in the range @math{[0, 255]}.  When applied to @math{4}
arguments: each one must be a fixnum in the range @math{[0, 255]}.
@end defop


@defop Maker @aclass{ipv4-address} @aclass{ipv4-address} (@meta{numbers})
@defopx Maker @aclass{ipv4-address} @aclass{ipv4-address} (@meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv4-address} using the
common constructor.

@example
(<ipv4-address> O
  (<> ((parse-ipv4-address-only "1.2.3.4"))))

(list (O third) (O second) (O first) (O zeroth))
@result{} (1 2 3 4)
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} third
The numeric components of the address, each representing @math{8} bits.
@code{zeroth} is the rightmost component, @code{first} is the second
from the right, etc.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{exact-integer} bignum
A single exact integer of @math{32} bits representing the whole address
number.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{string} string
The string representation of the address.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} private?
True if the address' prefix is @code{10.0.0.0/8} or @code{172.16.0.0/12}
or @code{192.168.0.0/16}.  See Section 3 ``Global and Other Specialized
Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} loopback?
True if the address' prefix is @code{127.0.0.0/8}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} localhost?
True if the address is @code{127.0.0.1}.  See Section 3 ``Global and
Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} link-local?
True if the address' prefix is @code{169.254.0.0/16}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} reserved?
True if the address' prefix is @code{192.0.0.0/24} or
@code{240.0.0.0/4}.  See Section 3 ``Global and Other Specialized
Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} test-net-1?
True if the address' prefix is @code{192.0.2.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} six-to-four-relay-anycast?
True if the address' prefix is @code{192.88.99.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} benchmark-tests?
True if the address' prefix is @code{198.18.0.0/15}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} test-net-2?
True if the address' prefix is @code{198.51.100.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} test-net-3?
True if the address' prefix is @code{203.0.113.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} multicast?
True if the address' prefix is @code{224.0.0.0/4}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} limited-broadcast?
True if the address prefix is @code{255.255.255.255}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv

@c page
@node net addresses ipv4 prefix
@subsubsection IPv4 address prefix objects class


The following bindings are exported by the library @library{nausicaa net
addresses ipv4}.


@deftp Class @aclass{ipv4-address-prefix}
Represents an IPv4 address prefix; it is derived from
@class{ipv4-address}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv4-address-prefix} constructor @var{numbers} @var{prefix-length}
Build and return a new object of type @class{ipv4-address-prefix}.
@var{numbers} must be a list of @math{4} fixnums in the range @math{[0,
255]}; @var{prefix-length} must be a non--negative fixnum specifying how
many of the leftmost contiguous bits of the address comprise the prefix.
@end defop


@defop Maker @aclass{ipv4-address-prefix} @aclass{ipv4-address-prefix} (@meta{numbers} @meta{prefix-length})
Build and return a new object of type @class{ipv4-address-prefix} using
the common constructor.

@example
(<ipv4-address-prefix> O
  (receive (numbers len)
      (parse-ipv4-address-prefix "1.2.3.4/8")
    (<ipv4-address-prefix> (numbers len))))

(list (O third) (O second) (O first) (O zeroth))
@result{} (1 2 3 4)

(O prefix-length)
@result{} 8
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields



@deftypecv {Immutable Field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-prefix-length} prefix-length
A fixnum specifying how many of the leftmost contiguous bits of the
address comprise the prefix.
@end deftypecv


@deftypecv {Immutable Virtual Field} @aclass{ipv4-address-prefix} @aclass{string} string
The string representation of the address prefix.
@end deftypecv

@c page
@node net addresses ipv4 aux
@subsubsection IPv4 address auxiliary classes


The following bindings are exported by the library @library{nausicaa net
addresses ipv4}.


@deftp Label @aclass{ipv4-address-fixnum}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @math{[0, 255]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp


@deftp Label @aclass{list-of-ipv4-address-fixnums}
Label type whose predicate tests that the object is a list of @math{4}
items all being of type @class{ipv4-address-fixnum}.  It is derived from
@class{list} as defined by @library{nausicaa language builtins},
@ref{builtins lists, List label}.
@end deftp


@deftp Label @aclass{ipv4-address-prefix-length}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @math{[0, 32]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp

@c page
@node net addresses ipv6
@subsection IPv6 address objects


@cindex @library{nausicaa net address ipv6}, library
@cindex Library @library{nausicaa net address ipv6}


The library @library{nausicaa net addresses ipv6} exports utilities to
handle IPv6 addresses specifications, according to @rfc{} 4291.  To
parse the string representation of IPv4 addresses we can use the library
@library{nausicaa parser-tools ipv6-addresses}.

@menu
* net addresses ipv6 address::  IPv6 address objects class.
* net addresses ipv6 prefix::   IPv6 address prefix objects class.
* net addresses ipv6 aux::      IPv6 address auxiliary classes.
@end menu

@c page
@node net addresses ipv6 address
@subsubsection IPv6 address objects class


The following bindings are exported by the @library{nausicaa net
addresses ipv6} library.


@deftp Class @aclass{ipv6-address}
Represents an IPv6 address.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv6-address} constructor @var{numbers}
@defopx {Common constructor} @aclass{ipv6-address} constructor @var{seventh} @var{sixth} @var{fifth} @var{fourth} @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv6-address}.  When
applied to a single argument: @var{numbers} must be a list of @math{8}
fixnums in the range @code{[0, #xFFFF]} representing the address
components.  When applied to @math{8} arguments: each must be a fixnum
in the range @code{[0, #xFFFF]} representing an address component.
@end defop


@defop Maker @aclass{ipv6-address} @aclass{ipv6-address} (@meta{numbers})
@defopx Maker @aclass{ipv6-address} @aclass{ipv6-address} (@meta{seventh} @meta{sixth} @meta{fifth} @meta{fourth} @meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv6-address} using the
common constructor.

@example
(<ipv6-address> O
  (<> (1 2 3 4 5 6 7 8)))

(list (O third) (O second) (O first) (O zeroth))
@result{} (5 6 7 8)
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} third
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} fourth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} fifth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} sixth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} seventh
The numeric components of the address, each representing @math{16} bits.
@code{zeroth} is the rightmost component, @code{first} is the second
from the right, etc.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address} @aclass{exact-integer} bignum
A single big exact integer of @math{128} bits representing the whole
address number.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address} @aclass{string} string
The string representation of the address.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} unspecified?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} loopback?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} multicast?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} link-local-unicast?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} global-unicast?
True if the address has type, respectively: unspecified, loopback,
multicast, link--local unicast, global unicast.  See Section 2.4
``Address Type Identification'' of @rfc{} 4291.
@end deftypecv

@c page
@node net addresses ipv6 prefix
@subsubsection IPv6 address prefix objects class


The following bindings are exported by the @library{nausicaa net
addresses ipv6} library.


@deftp Class @aclass{ipv6-address-prefix}
Represents an IPv6 address prefix; it is derived from
@class{ipv6-address}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv6-address-prefix} constructor @var{numbers} @var{prefix-length}
Build and return a new object of type @class{ipv6-address-prefix}.
@var{numbers} must be a list of @math{8} fixnums in the range @code{[0,
#xFFFF]} representing the address components.  @var{prefix-length} must
be a non--negative fixnum specifying how many of the leftmost contiguous
bits of the address comprise the prefix.
@end defop


@defop Maker @aclass{ipv6-address-prefix} @aclass{ipv6-address-prefix} (@meta{numbers} @meta{prefix-length})
Build and return a new object of type @class{ipv6-address-prefix} using
the common constructor.

@example
(<ipv6-address-prefix> O
  (<> ('(1 2 3 4 5 6 7 8) 10)))

(list (O third) (O second) (O first) (O zeroth))
@result{} (5 6 7 8)

(O prefix-length)
@result{} 10
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-prefix-length} prefix-length
A number specifying how many of the leftmost contiguous bits of the
address comprise the prefix.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address-prefix} @aclass{string} string
The string representation of the address prefix.
@end deftypecv

@c page
@node net addresses ipv6 aux
@subsubsection IPv6 address auxiliary classes


The following bindings are exported by the library @library{nausicaa net
addresses ipv6}.


@deftp Label @aclass{ipv6-address-fixnum}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @code{[0, #xFFFF]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp


@deftp Label @aclass{list-of-ipv6-address-fixnums}
Label type whose predicate tests that the object is a list of @math{8}
items all being of type @class{ipv6-address-fixnum}.  It is derived from
@class{list} as defined by @library{nausicaa language builtins},
@ref{builtins lists, List label}.
@end deftp


@deftp Label @aclass{ipv6-address-prefix-length}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @math{[0, 128]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp

@c end of file
