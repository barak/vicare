@node checks
@chapter Lightweight testing


@cindex @library{vicare checks}, library
@cindex Library @library{vicare checks}


The library @library{vicare checks} aprovides a simple mechanism for
testing Scheme programs.  As a primitive example, the expression:

@example
(check (+ 1 1) => 3)
@end example

@noindent
evaluates the expression @code{(+ 1 1)} and compares the result with the
expected result @samp{3} provided after the syntactic keyword @samp{=>}.
Then the outcome of this comparison is reported in human--readable form
by printing a message of the form:

@example
(+ 1 1)
 => 2
 ; *** failed ***
 ; expected result: 3
@end example

The library @library{vicare checks} is derived by @ansrfi{78}; @ref{srfi
lightweight-testing, @ansrfi{78} lightweight testing}, for details.

@menu
* checks select::               Selecting tests to be run.
* checks eval::                 Evaluating code.
* checks result::               Handling multiple results.
* checks output::               Special output functions.
@end menu

@c page
@node checks select
@section Selecting tests to be run


As usage example, let's assume that the system environment variable
@env{CHECK_TEST_NAME} is set to @code{yellow}:

@example
(parameterise ((check-test-name 'yellow))

  ;; this is evaluated
  (check
      (do-something)
    => 123)

  ;; this is evaluated, too
  (check
      (do-some-other-thing)
    => 456))

(parameterise ((check-test-name 'blue))

  ;; this is NOT evaluated
  (check
      (do-something)
    => #t)

  ;; this is NOT evaluated
  (check
      (do-some-other-thing)
    => #f))

;; this is evaluated
(check "yellow-one"
    (do-something)
  => 123)

;; this is NOT evaluated
(check 'red
    (do-something)
  => #t)
@end example


@defvr {Environment Variable} CHECK_TEST_NAME
The system environment variable used to select tests in a test suite
file.  The value of the variable must be the name, or the prefix of the
name, or the suffix of the name, of one or more tests.
@end defvr


@deffn Parameter check-test-name
Holds the name of the current test or tests.  Must be set to @false{}, a
string or a symbol.
@end deffn

@c page
@node checks eval
@section Evaluating code


@deffn Syntax check @var{expr} (=> @var{equal}) @var{expected}
@deffnx Syntax check @var{expr} => @var{expected}
@deffnx Syntax check @var{name} @var{expr} (=> @var{equal}) @var{expected}
@deffnx Syntax check @var{name} @var{expr} => @var{expected}
Evaluate @var{expr} and compare its return value to the return value of
@var{expected} using the predicate @var{equal}, which is @func{equal?}
when omitted.  Then a report is printed according to the current mode
setting (see below) and the outcome is recorded in a global state to be
used in @func{check-report}.

The precise order of evaluation is that first @var{equal} and
@var{expected} are evaluated (in unspecified order) and then @var{expr}
is evaluated.  Example: @code{(check (+ 1 1) => 2)}.

When @var{name} is given: it is the name of this test, @ref{checks
select, Selecting tests to be run}.
@end deffn


@defun check-report
Print a summary and the first failed check, if there is any, depending
on the current mode settings.  Call @func{exit} to exit the current
process with code:

@table @code
@item 0
If all the tests were run successfully.

@item 1
If at least one test failed.
@end table
@end defun


@defun check-set-mode! @var{mode}
Set the current mode to @var{mode}, which must be a symbol among:
@code{off}, @code{summary}, @code{report-failed}, @code{report}; the
default is @code{report}.  Note that you can change the mode at any
time, and that @func{check} and @func{check-report} use the current
value.

The mode symbols have the following meaning:

@table @code
@item off
do not execute any of the checks;

@item summary
print only summary in @func{check-report} and nothing else;

@item report-failed
report failed checks when they happen, and in summary;

@item report
report every example executed.
@end table
@end defun


@defun check-reset!
Reset the global state (counters of correct/failed examples) to the
state immediately after loading the module for the first time, i.e. no
checks have been executed.
@end defun


@defun check-passed? @var{expected-total-count}
Return @true{} if there were no failed checks and
@var{expected-total-count} correct checks, @false{} otherwise.

Rationale: This procedure can be used in automatized tests by
terminating a test program with the statement:

@example
(exit (if (check-passed? n) 0 1))
@end example
@end defun


@deffn Syntax false-if-exception @var{form0} @var{form} ...
Evaluate all the @var{form}s as in @func{begin}.  If an exception is
raised: return @false{}.
@end deffn


@deffn Syntax check-for-true @var{expr}
@deffnx Syntax check-for-true @var{name} @var{expr}
@deffnx Syntax check-for-false @var{expr}
@deffnx Syntax check-for-false @var{name} @var{expr}
Evaluate @var{expr} in a @func{check} form, expecting a non--false or
@false{} value as result.

When @var{name} is given: it is the name of this test, @ref{checks
select, Selecting tests to be run}.
@end deffn



@deffn Syntax check-for-procedure-argument-violation @meta{body} => @meta{expected-who/irritants}
@deffnx {Auxiliary Syntax} =>
Expand to:

@example
(check
    (guard (E ((procedure-argument-violation? E)
               (list (condition-who E)
                     (condition-irritants E)))
              (else E))
      @meta{body})
  => @meta{expected-who/irritants})
@end example
@end deffn


@deffn Syntax check-for-expression-return-value-violation @meta{body} => @meta{expected-who/irritants}
@deffnx {Auxiliary Syntax} =>
Expand to:

@example
(check
    (guard (E ((expression-return-value-violation? E)
               (list (condition-who E)
                     (condition-irritants E)))
              (else E))
      @meta{body})
  => @meta{expected-who/irritants})
@end example
@end deffn

@c page
@node checks result
@section Handling multiple results


@deffn Syntax with-result @var{form0} @var{form} ...
Evaluate all the @var{form}s, as in @syntax{internal-body}, in a dynamic
environment in which an implicit result variable is defined.  The
implicit variable is handled as a list.

Return a list whose first value is the return value of the last
@var{form} and whose second value is the value of the implicit variable.
@end deffn


@defun add-result @var{obj}
Append @var{obj} to the list in the implicit variable defined by
@func{with-result}, return @var{obj} itself.
@end defun


@defun get-result
Return the current value of the implicit variable defined by
@func{with-result}.
@end defun

@c page
@node checks output
@section Special output functions


@defvr Constant check-quiet-tests?
@cindex @env{VICARE_CHECK_QUIET}
Set to a boolean value.  It is initialised from the system environment
variable @env{VICARE_CHECK_QUIET}: when the variable is set to
@samp{yes} or a non--zero fixnum, the boolean is @true{}; otherwise it
is @false{}.
@end defvr


@defun check-display @var{obj}
Display @var{obj} to the current error port if @code{check-quiet-tests?}
is set to @true{}.
@end defun


@defun check-write @var{obj}
Write @var{obj} to the current error port if @code{check-quiet-tests?}
is set to @true{}.
@end defun


@defun check-newline
Display a newline character to the current error port if
@code{check-quiet-tests?}  is set to @true{}.
@end defun


@defun check-pretty-print @var{obj}
Pretty prints @var{obj} to the current error port if
@code{check-quiet-tests?}  is set to @true{}.
@end defun


@c end of file
