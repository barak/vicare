@node srfi marray
@section @ansrfi{25} multidimensional array


@cindex @ansrfi{25} multi--dimensional array primitives
@cindex @library{srfi :25}, library
@cindex @library{srfi :25 multi-dimensional-arrays}, library
@cindex Library @library{srfi :25}
@cindex Library @library{srfi :25 multi-dimensional-arrays}


The library @library{srfi :25} is by Jussi Piitulainen as the reference
implementation for @ansrfi{25}; see:

@center @url{http://srfi.schemers.org/srfi-25/srfi-25.html}

@noindent
for more details.

@menu
* srfi marray abstract::        Abstract.
* srfi marray rationale::       Rationale.
* srfi marray spec::            Specification.
* srfi marray ack::             Acknowledgements.
* srfi marray copyright::       Copyright.
@end menu

@c page
@node srfi marray abstract
@subsection Abstract


A core set of procedures for creating and manipulating heterogeneous
multidimensional arrays is proposed.  The design is consistent with the
rest of Scheme and independent of other container data types.  It
provides easy sharing of parts of an array as other arrays without
copying, encouraging a declarative style of programming.

The specification is based on an original contribution by Alan Bawden in
1993.

@c page
@node srfi marray rationale
@subsection Rationale


The proposed arrays encourage a natural declarative programming style.
They allow sharing of most any rectangular part of an array through an
affine index mapping, without copying.  But imperative style is equally
natural.

The design is consistent with the two indexed data structures of Scheme:
vectors and strings.  The design makes arrays a self--contained type.
These statements are illustrated in the following paragraphs.

First, in the one--dimensional case, the arguments of the following
relevant calls match exactly.

@example
(vector-set! v k o)
(string-set! s k c)
(array-set! a k o)
@end example

Likewise, @func{make-array} matches @func{make-vector} and
@func{make-string}.  An analogue to @func{vector}, @func{string} and
@func{list} is provided, alleviating the lack of an external
representation.  Index bounds are specified as for @func{substring},
lower bound included and upper bound excluded.

Array shapes are specified as arrays.  These can be made with a special
procedure @func{shape} that does not have a shape argument.  An array
does not retain a dependence to the shape array.  For example, mutation
of a shape array is allowed.

Index mappings return multiple values as multiple values.

Array dimensions can begin at any index. In particular, the choice
between @code{0} and @code{1} is left to the user.  (Shapes and index
objects are zero based, though.)

The ability to pack an index sequence in a vector is useful for
implementing higher level operations.  (The ability to pack it in a
one--dimensional array lets one use, say, a row of a matrix as an
index.)

It is not required that vectors not be arrays.  It is not required that
they be, either.

@c page
@node srfi marray spec
@subsection Specification


Arrays are heterogeneous data structures whose elements are indexed by
integer sequences of fixed length.  The length of a valid index sequence
is the @dfn{rank} or the number of @dfn{dimensions} of an array.  The
@dfn{shape} of an array consists of bounds for each index.

The lower bound @var{B} and the upper bound @var{E} of a dimension are
exact integers with @code{(<= @var{B} @var{E})}.

A valid index along the dimension is an exact integer @var{K} that
satisfies both @code{(<= @var{B} @var{K})} and @code{(< @var{K}
@var{E})}.  The length of the array along the dimension is the
difference @code{(- @var{E} @var{B})}.  The @dfn{size} of an array is
the product of the lengths of its dimensions.

A shape is specified as an even number of exact integers.  These are
alternately the lower and upper bounds for the dimensions of an array.

The following ten procedures should be implemented.


@defun array? @var{obj}
Return @true{} if @var{obj} is an array, otherwise return @false{}.
@end defun


@defun make-array @var{shape}
@defunx make-array @var{shape} @var{obj}
Return a newly allocated array whose shape is given by @var{shape}.  If
@var{obj} is provided, then each element is initialized to it.
Otherwise the initial contents of each element is unspecified.  The
array does not retain a dependence to @var{shape}.
@end defun


@defun shape @var{bound} @dots{}
Return a shape.  The sequence @var{bound} @dots{} must consist of an
even number of exact integers that are pairwise not decreasing.  Each
pair gives the lower and upper bound of a dimension.  If the shape is
used to specify the dimensions of an array and @var{bound} @dots{} is
the sequence @varo{b} @varo{e} @dots{} @vark{b} @vark{e} @dots{} of
@math{N} pairs of bounds, then a valid index to the array is any
sequence @varo{j} @dots{} @vark{j} @dots{} of @math{N} exact integers
where each @vark{j} satisfies @code{(<= @vark{b} @vark{j})} and @code{(<
@vark{j} @vark{e})}.

The shape of a @var{d}-dimensional array is a
@iftex
@var{d} \times 2
@end iftex
@ifnottex
@math{@var{d} * 2}
@end ifnottex
array where the element at @math{@var{K} = 0} contains the lower bound
for an index along dimension @var{K} and the element at @math{@var{K} =
1} contains the corresponding upper bound, where @var{K} satisfies
@code{(<= 0 @var{K})} and @code{(< @var{K} @var{d})}.
@end defun


@defun array @var{shape} @var{obj} @dots{}
Return a new array whose shape is given by @var{shape} and the initial
contents of the elements are @var{obj} @dots{} in row major order.  The
array does not retain a dependence to @var{shape}.
@end defun


@defun array-rank @var{array}
Return the number of dimensions of @var{array}.

@example
(array-rank (make-array (shape 1 2 3 4)))
@result{} 2
@end example
@end defun


@defun array-start @var{array} @var{K}
Return the lower bound for the index along dimension @var{K}.
@end defun


@defun array-end @var{array} @var{K}
Return the upper bound for the index along dimension @var{K}.
@end defun


@defun array-ref @var{array} @var{K} @dots{}
@defunx array-ref @var{array} @var{index}
Return the contents of the element of @var{array} at index @var{K}
@dots{}.  The sequence @var{K} @dots{} must be a valid index to
@var{array}.  In the second form, @var{index} must be either a vector or
a @math{0}-based @math{1}-dimensional array containing @var{K} @dots{}.

@example
(array-ref (array (shape 0 2 0 3)
                  'uno 'dos 'tres
                  'cuatro 'cinco 'seis)
           1 0)
@result{} cuatro

(let ((a (array (shape 4 7 1 2) 3 1 4)))
  (list (array-ref a 4 1)
        (array-ref a (vector 5 1))
        (array-ref a (array (shape 0 2) 6 1))))
@result{} (3 1 4)
@end example
@end defun


@defun array-set! @var{array} @var{K} @dots{} @var{obj}
@defunx array-set! @var{array} @var{index} @var{obj}
Store @var{obj} in the element of @var{array} at index @var{K} @dots{}.
Return an unspecified value.  The sequence @var{K} @dots{} must be a
valid index to @var{array}.  In the second form, @var{index} must be
either a vector or a @math{0}-based @math{1}-dimensional array
containing @var{K} @dots{}.

@example
(let ((a (make-array (shape 4 5 4 5 4 5))))
  (array-set! a 4 4 4 'huuhkaja)
  (array-ref  a 4 4 4))
@result{} huuhkaja
@end example
@end defun


@defun share-array @var{array} @var{shape} @var{proc}
Return a new array of shape @var{shape} that shares elements of
@var{array} through @var{proc}.  The procedure @var{proc} must implement
an affine function that returns indices of @var{array} when given
indices of the array returned by @func{share-array}.  The array does not
retain a dependence to @var{shape}.


@example
(define i_4
  (let* ((i (make-array (shape 0 4 0 4) 0))
         (d (share-array i (shape 0 4)
                         (lambda (k)
                           (values k k)))))
    (do ((k 0 (+ k 1)))
         ((= k 4)
          i)
      (array-set! d k 1))))
@end example

@quotation
@strong{NOTE} The affinity requirement for @var{proc} means that each
value must be a sum of multiples of the arguments passed to @var{proc},
plus a constant.
@end quotation

@quotation
@strong{IMPLEMENTATION NOTE} Arrays have to maintain an internal index
mapping from indices @vari{k} @dots{} @var{kd} to a single index into a
backing vector; the composition of this mapping and @var{proc} can be
recognised as:

@example
(+ n0 (* n1 @vari{k}) ... (* nd @var{kd}))
@end example

@noindent
by setting each index in turn to @math{1} and others to @math{0}, and
all to @math{0} for the constant term; the composition can then be
compiled away, together with any complexity that the user introduced in
their procedure.
@end quotation
@end defun

This document does not specify any external representation for arrays.
This document does not specify when arrays are @func{equal?}.  (Indeed,
R5RS @func{equal?} will do the wrong thing.)

@c page
@node srfi marray ack
@subsection Acknowledgements


The original concept comes from a message to the Usenet newsgroup
@url{comp.lang.scheme} by Alan Bawden in 1993.  A variant of that
implementation by Richard Kelsey in the Scheme 48 system was also an
influence. Apart from the origins, the main design goal has been
consistency with the core types of Scheme.

Alan Bawden and Mark K. Gardner gave useful comments at an earlier
attempt to make this specification public.  (There was at least one
other. Notes have gone missing.)  @srfi{} feedback led to improved
wording, hidden shapes, and two kinds of index objects.

The exact title of the proposal comes from a
@url{http://@/zurich.ai.mit.edu/@/pipermail/@/rrrs-authors/@/1998-May/@/002349.html,
message} titled ``a process that might work'' by William D. Clinger to
the @code{rrrs-authors} mailing list in 1998.  That appears to be a part
of the past of the @url{http:/@//@/srfi.schemers.org/@/, @srfi{}}
process.

@c page
@node srfi marray copyright
@subsection Copyright


Copyright @copyright{} 2001 Jussi Piitulainen.  All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

@c end of file
