@node containers arrays
@section Multidimensional arrays


@cindex @library{nausicaa containers arrays}, library
@cindex Library @library{nausicaa containers arrays}


The library @library{nausicaa containers arrays} implements
mutidimensional arrays on top of built--in Scheme vectors.


@menu
* containers arrays conventions::  Arguments conventions.
* containers arrays layout::       Layout of elements in the vector.
* containers arrays proc::         Procedural @api{}.
* containers arrays class::        Classes and labels @api{}.
@end menu

@c page
@node containers arrays conventions
@subsection Arguments conventions


In the documentation of @library{nausicaa containers arrays} we call:

@table @dfn
@item items
The values collected in Scheme's built--in lists and vectors.

@item elements
The values collected in the arrays.
@end table

The following conventions are used in the documentation of arguments to
the functions of @library{nausicaa containers arrays}:

@table @var
@item array
A proper @code{array} object.

@item shape
A proper @code{shape} object.

@item position
A proper @code{position} object.

@item position-step
A Scheme built--in vector used to represent the difference between two
@code{position} values.

@item dimension
A strictly positive, exact integer representing the extension of a
dimension in an @code{array}.

@item index
A non--negative, exact integer representing the coordinate of an
element.

@item start
@itemx last
@itemx past
When specifying a range of items or elements: @var{start} is the
left--included bound, @var{last} is the right--included bound,
@var{past} is the right--excluded bound.

@item obj
Can be any value.
@end table

@c page
@node containers arrays layout
@subsection Layout of elements in the vector


A multidimensional array is a special @api{} to access built--in Scheme
vectors.  If we fill the underlying vector with integers representing
the vector index of the elements, for an array of one dimension and four
elements, the vector is:

@example
#(0 1 2 3)
@end example

For an array of two dimensions with @math{3} rows and @math{4} columns,
we can compute the vector index by multiplying the row coordinate by the
number of columns, then adding the column coordinate:

@example
;;     coordinates   formula
#( 0   ; 0 0         0 * 4 + 0 * 1
   1   ; 0 1         0 * 4 + 1 * 1
   2   ; 0 2         0 * 4 + 2 * 1
   3   ; 0 3         0 * 4 + 3 * 1
   4   ; 1 0         1 * 4 + 0 * 1
   5   ; 1 1         1 * 4 + 1 * 1
   6   ; 1 2         1 * 4 + 2 * 1
   7   ; 1 3         1 * 4 + 3 * 1
   8   ; 2 0         2 * 4 + 0 * 1
   9   ; 2 1         2 * 4 + 1 * 1
  10   ; 2 2         2 * 4 + 2 * 1
  11)  ; 2 3         2 * 4 + 3 * 1
@end example

For an array of three dimensions with @math{2} planes, @math{3} rows and
@math{4} columns, we can compute the vector index by multiplying the
plane, row and column coordinates by the appropriate factor:

@example
;;     coordinates    formula
#( 0   ; 0 0 0        0 * (3 * 4) + 0 * 4 + 0 * 1
   1   ; 0 0 1        0 * (3 * 4) + 0 * 4 + 1 * 1
   2   ; 0 0 2        0 * (3 * 4) + 0 * 4 + 2 * 1
   3   ; 0 0 3        0 * (3 * 4) + 0 * 4 + 3 * 1
   4   ; 0 1 0        0 * (3 * 4) + 1 * 4 + 0 * 1
   5   ; 0 1 1        0 * (3 * 4) + 1 * 4 + 1 * 1
   6   ; 0 1 2        0 * (3 * 4) + 1 * 4 + 2 * 1
   7   ; 0 1 3        0 * (3 * 4) + 1 * 4 + 3 * 1
   8   ; 0 2 0        0 * (3 * 4) + 2 * 4 + 0 * 1
   9   ; 0 2 1        0 * (3 * 4) + 2 * 4 + 1 * 1
  10   ; 0 2 2        0 * (3 * 4) + 2 * 4 + 2 * 1
  11   ; 0 2 3        0 * (3 * 4) + 2 * 4 + 3 * 1
  12   ; 1 0 3        1 * (3 * 4) + 0 * 4 + 0 * 1
  13   ; 1 0 3        1 * (3 * 4) + 0 * 4 + 1 * 1
  14   ; 1 0 3        1 * (3 * 4) + 0 * 4 + 2 * 1
  15   ; 1 0 3        1 * (3 * 4) + 0 * 4 + 3 * 1
  16   ; 1 1 3        1 * (3 * 4) + 1 * 4 + 0 * 1
  17   ; 1 1 3        1 * (3 * 4) + 1 * 4 + 1 * 1
  18   ; 1 1 3        1 * (3 * 4) + 1 * 4 + 2 * 1
  19   ; 1 1 3        1 * (3 * 4) + 1 * 4 + 3 * 1
  20   ; 1 2 3        1 * (3 * 4) + 2 * 4 + 0 * 1
  21   ; 1 2 3        1 * (3 * 4) + 2 * 4 + 1 * 1
  22   ; 1 2 3        1 * (3 * 4) + 2 * 4 + 2 * 1
  23)  ; 1 2 3        1 * (3 * 4) + 2 * 4 + 3 * 1
@end example

@noindent
that is:

@example
index = plane * (3 * 4) + row * 4 + column * 1
@end example

Generalising: the rightmost coordinate is always multiplied by @math{1},
while the others are multiplied by a product between the length of the
dimensions.

Precisely, let's call @math{N} the number of dimensions of an array, and
let's index the dimensions with @math{0 <= k < N}; then: @math{D(k)} is
the length of the @math{k}-th dimension; @math{C(k)} is the @math{k}-th
coordinate of an element and @math{F(k)} is its factor.  The index
of the element is computed with:

@example
index = F(0) * C(0) + F(1) * C(1) + ... + F(N-1) * C(N-1)
@end example

@noindent
being:

@example
0 <= k < N-2   =>   F(k) = D(k+1) * D(k+2) * ... * D(N-1)

     k = N-1   =>   F(N-1) = 1
@end example

@noindent
we note explicitly that @math{D(0)} is @strong{never} used in the
computation of the factors, and that @math{D(k)} is @strong{not} used in
the computation of @math{F(k)}.

If @code{dimensions} is the list of dimensions of an array, the
following function will compute and return the list of factors:

@example
(define (%compute-factors dimensions)
  (let loop ((dims    (cdr dimensions))
             (factors '()))
    (if (null? dims)
        (reverse (cons 1 factors))
      (loop (cdr dims)
            (cons (apply * dims) factors)))))
@end example

@c page
@node containers arrays proc
@subsection Procedural @api{}


@menu
* containers arrays proc position::  Specifying the coordinates of elements.
* containers arrays proc shape::     Specifying the shape of arrays.
* containers arrays proc array::     Dealing with arrays.
@end menu

@c page
@node containers arrays proc position
@subsubsection Specifying the coordinates of elements


The elements' positions in arrays are represented by built--in Scheme
vectors holding exact integers.


@subsubheading Constructors


@defun array-position @var{index0} @var{index} ...
Build and return a new Scheme vector holding the @var{index} arguments.
The indexes are checked to be exact integers.  The number of arguments
is meant to be equal to the number of dimensions of the array with which
the position value will be used.
@end defun


@subsubheading Predicates and assertions


@defun array-position? @var{obj}
Return @true{} if @var{obj} is a Scheme vector holding exact integers.
@end defun


@defun assert-array-position @var{obj} @var{func-name}
@defunx assert-array-position/or-false @var{obj} @var{func-name}
Raise an assertion violation exception if @var{obj} satisfies
@func{array-position?}, or it is @false{}.  @var{func-name} is used
@code{who} argument for the exception.  Return @true{} if no exception
is raised.
@end defun


@subsubheading Conversion


@defun array-position->string @var{position}
Return a string representation of @var{position}, specialised for array
positions.
@end defun


@subsubheading Port output


@defun array-position-display @var{position}
@defunx array-position-display @var{position} @var{port}
Write to @var{port} a human readable string representation of
@var{position}.  @var{port} defaults to the current output port.
@end defun


@defun array-position-write @var{position}
@defunx array-position-write @var{position} @var{port}
Write to @var{port} a string representation of @var{position} such that
it can be read back with @func{read}.  @var{port} defaults to the
current output port.
@end defun

@c page
@node containers arrays proc shape
@subsubsection Specifying the shape of arrays


Values of type @code{shape} represent the shape of an array, that is:
the number of dimensions, the start index of each dimension, the past
index of each dimension.  @code{shape} values are disjoint from the
other values.


@subsubheading Constructors


@defun array-shape @var{start-list} @var{past-list}
Build and return a new @code{shape} describing an array or array view
through the list of start indexes in @var{start-list} and the list of
past indexes in @var{past-list}.

The arguments must have the same length and be composed by
non--negative, exact integers.  Indexes from the arguments are taken in
couples: The first start with the first past, the second start with the
second past, and so on.  Each couple describes the range of valid
indexes for each dimension of an array.
@end defun


@subsubheading Predicates and assertions


@defun array-shape? @var{obj}
Return @true{} if @var{obj} is a @code{shape} value.
@end defun


@defun assert-array-shape @var{obj} @var{func-name}
@defunx assert-array-shape/or-false @var{obj} @var{func-name}
Raise an assertion violation exception if @var{obj} is not a
@code{shape} value, or @false{}.  @var{func-name} is used @code{who}
argument for the exception.  Return @true{} if no exception is raised.
@end defun


@subsubheading Comparison and set operations


@defun array-shape=? @var{shape0} @var{shape} ...
Return @true{} if the arguments have equal number of dimensions and hold
the same indexes.
@end defun


@defun array-supershape? @var{shape0} @var{shape} ...
@defunx array-supershape?/strict @var{shape0} @var{shape} ...
Return @true{} if the arguments, in the given order, are supershapes of
each other or strict supershapes of each other.  The shape @var{a} is
supershape of @var{b} if:

@enumerate
@item
They have the same number of dimensions.

@item
For each dimension, the range of elements in @var{b} is a subset of the
range of elements in @var{a}.
@end enumerate

The following two forms are equivalent:

@example
(array-supershape? a b c d)
(and (array-supershape? a b)
     (array-supershape? b c)
     (array-supershape? c d))
@end example
@end defun


@defun array-subshape? @var{shape0} @var{shape} ...
@defunx array-subshape?/strict @var{shape0} @var{shape} ...
Return @true{} if the arguments, in the given order, are subshapes of
each other or strict subshapes of each other.  These functions are like
the supershape functions with the arguments reversed.
@end defun


@defun array-shape-contains? @var{shape} @var{position}
Return @true{} if @var{position} selects an array element in the range
of elements described by @var{shape}.
@end defun


@subsubheading Inspection


@defun array-shape-number-of-dimensions @var{shape}
Return the number of dimensions of the array with which the shape
value will be used.
@end defun


@defun array-shape-number-of-elements @var{shape}
Return the number of elements in the range described by @var{shape}.
@end defun


@defun array-shape-index-start @var{shape} @var{dimension}
@defunx array-shape-index-past @var{shape} @var{dimension}
@defunx array-shape-index-last @var{shape} @var{dimension}
Return the start, past or last value for position indexes in @var{shape}
for the selected @var{dimension} (zero based).  Examples:

@example
(define s (array-shape '(-1  2 5)
                       '( 5 18 7)))

(array-shape-index-start s 0) @result{} -1
(array-shape-index-past  s 0) @result{}  5
(array-shape-index-last  s 0) @result{}  4

(array-shape-index-start s 1) @result{}  2
(array-shape-index-past  s 1) @result{} 18
(array-shape-index-last  s 1) @result{} 17

(array-shape-index-start s 2) @result{}  5
(array-shape-index-past  s 2) @result{}  7
(array-shape-index-last  s 3) @result{}  6
@end example
@end defun


@subsubheading Conversion


@defun array-shape->string @var{shape}
Return a string representation of @var{shape}.
@end defun


@subsubheading Port output


@defun array-shape-display @var{shape}
@defunx array-shape-display @var{shape} @var{port}
Write to @var{port} a human readable string representation of
@var{shape}.  @var{port} defaults to the current output port.
@end defun


@defun array-shape-write @var{shape}
@defunx array-shape-write @var{shape} @var{port}
Write to @var{port} a string representation of @var{shape} such that
it can be read back with @func{read}.  @var{port} defaults to the
current output port.
@end defun


@c page
@node containers arrays proc array
@subsubsection Dealing with arrays


Values of type @code{array} represent an array, a collection of values
that can be accessed by specifying a multidimensional position.  The
elements of an @code{array} are stored in a vector in row major order.

The @code{array} values are disjoint from all the other values, but the
@code{shape}; an @code{array} value represents itself its own
@code{shape}.  All the functions that can be applied to a @code{shape},
can also be applied to an @code{array}.


@subsubheading Constructors


@defun make-array @var{shape}
@defunx make-array @var{shape} @var{fill-value}
Build and return a new @code{array} described by @var{shape}.
@var{fill-value} is used as initialisation value for all the slots of
the array; it defaults to @false{}.
@end defun


@defun array @var{shape} @var{element} ...
Build and return a new @code{array} described by @var{shape}.  The
elements are stored in the slots of the underlying vector, in the given
order; there must be enough elements to fill the vector.
@end defun


@defun array-copy @var{array}
Build and return a deep clone of @var{array}.
@end defun


@defun array-view @var{array} @var{mapper}
Build and return a new @code{array} value sharing all the data with
@var{array} and using the closure @var{mapper} to map position
coordinates.

@var{mapper} must take a position value as argument and return a
position value.  There is no constraint on what @var{mapper} can do on
the position.  @var{mapper} is composed with whatever mapper function
@var{array} already uses.
@end defun


@subsubheading Predicates and assertions


@defun array? @var{obj}
Return @true{} if @var{obj} is an @code{array} value.
@end defun


@defun assert-array @var{obj} @var{func-name}
@defunx assert-array/or-false @var{obj} @var{func-name}
Raise an assertion violation exception if @var{obj} is not an
@code{array} value, or @false{}.  @var{func-name} is used @code{who}
argument for the exception.  Return @true{} if no exception is raised.
@end defun


@subsubheading Accessors


@defun array-set! @var{array} @var{position} @var{element}
Store @var{element} at @var{position} in @var{array}, overwriting the
old value.
@end defun


@defun array-ref @var{array} @var{position}
Return the element at @var{position} in @var{array}.
@end defun


@subsubheading Comparison


@defun array=? @var{pred=} @var{array0} @var{array} ...
Return @true{} if the arguments have equal number of dimensions and hold
the same elements according to @var{pred=}.  The predicate function
@var{pred=} should behave like @func{eqv?}.
@end defun


@subsubheading Conversion


@defun array->string @var{array}
Return a string representation of @var{array}.
@end defun


@subsubheading Port output


@defun array-display @var{array}
@defunx array-display @var{array} @var{port}
Write to @var{port} a human readable string representation of
@var{array}.  @var{port} defaults to the current output port.
@end defun


@defun array-write @var{array}
@defunx array-write @var{array} @var{port}
Write to @var{port} a string representation of @var{array} such that it
can be read back with @func{read}.  @var{port} defaults to the current
output port.
@end defun

@c page
@node containers arrays class
@subsection Classes and labels @api{}


@menu
* containers arrays class position::  Specifying the coordinates of elements.
* containers arrays class shape::     Specifying the shape of arrays.
* containers arrays class array::     Dealing with arrays.
@end menu

@c page
@node containers arrays class position
@subsubsection Specifying the coordinates of elements


The elements' positions in arrays are represented by built--in Scheme
vectors holding exact integers.  The following @api{} is compatible with
the one documented in @ref{containers arrays proc position}.

@c ------------------------------------------------------------

@subsubheading Type, constructor, predicate


@deftp Label @aclass{position}
Label to tag Scheme vectors used to select an element in a
multidimensional array; it is derived from @class{xvector} from
@library{nausicaa containers vectors}.
@end deftp


@defop Syntax @aclass{position} make @aclass{position} @var{index0} @var{index} ...
@defopx Syntax @aclass{position} make* @aclass{position} @var{index0} @var{index} ...
Build and return a new Scheme vector holding the @var{index} arguments.
The indexes are checked to be exact integers.  The number of arguments
is meant to be equal to the number of dimensions of the array with which
the position value will be used.
@end defop


@defop Syntax @aclass{position} is-a? @var{obj} @aclass{position}
Return @true{} if @var{obj} is a Scheme vector holding exact integers.
@end defop

@c ------------------------------------------------------------

@subsubheading Label fields


@defcv {Immutable Field} @aclass{position} string
A string representation of the instance, specialised for array
positions.
@end defcv

@c ------------------------------------------------------------

@subsubheading Port output


@defmethod @aclass{position} display
@defmethodx @aclass{position} display @var{port}
Write to @var{port} a human readable string representation of the
instance.  @var{port} defaults to the current output port.
@end defmethod


@defmethod @aclass{position} write
@defmethodx @aclass{position} write @var{port}
Write to @var{port} a string representation of the instance such that it
can be read back with @func{read}.  @var{port} defaults to the current
output port.
@end defmethod

@c page
@node containers arrays class shape
@subsubsection Specifying the shape of arrays


Values of class @class{shape} represent the shape of an array, that is:
the number of dimensions, the start index of each dimension, the past
index of each dimension.  The following @api{} is compatible with the
one documented in @ref{containers arrays proc shape}.

@c ------------------------------------------------------------

@subsubheading Type, constructor, predicate


@deftp Class @aclass{shape}
Describes the shape of an array.
@end deftp


@defop Syntax @aclass{shape} make @aclass{shape} @var{start-list} @var{past-list}
@defopx Syntax @aclass{shape} make* @aclass{shape} @var{start-list} @var{past-list}
Build and return a new @class{shape} instance describing an array or
array view through the list of start indexes in @var{start-list} and the
list of past indexes in @var{past-list}.

The arguments must have the same length and be composed by
non--negative, exact integers.  Indexes from the arguments are taken in
couples: The first start with the first past, the second start with the
second past, and so on.  Each couple describes the range of valid
indexes for each dimension of an array.
@end defop


@defop Syntax @aclass{shape} is-a? @var{obj} @aclass{shape}
Return @true{} if @var{obj} is a @class{shape} value.
@end defop

@c ------------------------------------------------------------

@subsubheading Class fields


@defcv {Immutable Field} @aclass{shape} starts @aclass{xvector}
@defcvx {Immutable Field} @aclass{shape} pasts @aclass{xvector}
Vector of start and past indexes.
@end defcv


@defcv {Immutable Field} @aclass{shape} number-of-dimensions
The number of dimensions of the array with which the shape value will be
used.
@end defcv


@defcv {Immutable Field} @aclass{shape} number-of-elements
The number of elements in the ranges described by the instance.
@end defcv


@defcv {Immutable Field} @aclass{shape} string
Return a string representation of the instance.
@end defcv

@c ------------------------------------------------------------

@subsubheading Inspection


@defmethod  @aclass{shape} index-start @var{dimension}
@defmethodx @aclass{shape} index-past @var{dimension}
@defmethodx @aclass{shape} index-last @var{dimension}
Return the start, past or last value for position indexes in the
instance for the selected @var{dimension} (zero based).
@end defmethod


@defmethod @aclass{shape} = @var{shape} @dots{}
Return @true{} if the instance and the arguments have equal number of
dimensions and hold the same indexes.
@end defmethod


@defmethod @aclass{shape} supershape? @var{shape} @dots{}
@defmethodx @aclass{shape} supershape?/strict @var{shape} @dots{}
Return @true{} if the instance and the arguments, in the given order,
are supershapes of each other or strict supershapes of each other.  The
shape @var{a} is supershape of @var{b} if:

@enumerate
@item
They have the same number of dimensions.

@item
For each dimension, the range of elements in @var{b} is a subset of the
range of elements in @var{a}.
@end enumerate
@end defmethod


@defmethod @aclass{shape} subshape? @var{shape} @dots{}
@defmethodx @aclass{shape} subshape?/strict @var{shape} @dots{}
Return @true{} if the instance and the arguments, in the given order,
are subshapes of each other or strict subshapes of each other.  These
functions are like the supershape functions with the arguments reversed.
@end defmethod


@defmethod @aclass{shape} contains? @var{position}
Return @true{} if @var{position} selects an array element in the range
of elements described by the instance.
@end defmethod

@c ------------------------------------------------------------

@subsubheading Port output


@defmethod @aclass{shape} display
@defmethodx @aclass{shape} display @var{port}
Write to @var{port} a human readable string representation of the
instance.  @var{port} defaults to the current output port.
@end defmethod


@defmethod @aclass{shape} write
@defmethodx @aclass{shape} write @var{port}
Write to @var{port} a string representation of the instance such that it
can be read back with @func{read}.  @var{port} defaults to the current
output port.
@end defmethod

@c page
@node containers arrays class array
@subsubsection Dealing with arrays


Instances of class @class{array} represent an array: a collection of
values that can be accessed by specifying a multidimensional position.
The elements of an @class{array} are stored in a vector in row major
order.

@c ------------------------------------------------------------

@subsubheading Type, constructor, predicate


@deftp Class array
Describes an array and holds its storage; it is derived by @class{shape}
@end deftp


@defop Syntax @aclass{array} make @var{shape} @var{fill-value}
@defopx Syntax @aclass{array} make* @var{shape} @var{fill-value}
Build and return a new @class{array} described by @var{shape}.
@var{fill-value} is used as initialisation value for all the slots of
the array; it defaults to @false{}.
@end defop


@defmethod @aclass{array} copy
Build and return a deep clone of the instance: all the fields are
duplicated by constructing new vectors.
@end defmethod


@defmethod @aclass{array} view @var{mapper}
Build and return a new @class{array} instance sharing all the data with
this instance and using the closure @var{mapper} to map position
coordinates.

@var{mapper} must take a position value as argument and return a
position value.  There is no constraint on what @var{mapper} can do on
the position.  @var{mapper} is composed with whatever mapper function
@var{array} already uses.
@end defmethod


@defop Syntax @aclass{array} is-a? @var{obj} @aclass{array}
Return @true{} if @var{obj} is an @class{array} instance.
@end defop


@c ------------------------------------------------------------

@subsubheading Accessors


@defmethod @aclass{array} set! @var{position} @var{element}
Store @var{element} at @var{position} in the instance, overwriting the
old value.
@end defmethod


@defmethod @aclass{array} ref @var{position}
Return the element at @var{position} in the instance.
@end defmethod


@defop Syntax @aclass{array} setf (@var{obj} @var{index} @dots{}) @var{element}
Store @var{element} at the position identified by the @var{index}
arguments in the instance, overwriting the old value.
@end defop


@defop Syntax @aclass{array} getf (@var{obj} @var{index} @dots{})
Return the element at the position identified by the @var{index}
arguments in the instance.
@end defop

@c ------------------------------------------------------------

@subsubheading Class fields


@defcv {Immutable Field} @aclass{array} dimensions @aclass{xvector}
A vector holding the lengths of the dimensions.
@end defcv


@defcv {Immutable Field} @aclass{array} factors @aclass{xvector}
A vector holding the factors used to compute the absolute index in the
underlying vector.
@end defcv


@defcv {Immutable Field} @aclass{array} mapper
A mapper function for coordinates.
@end defcv


@defcv {Immutable Field} @aclass{array} @var{vector} @aclass{xvector}
The underlying vector.
@end defcv

@c ------------------------------------------------------------

@subsubheading Miscellaneous methods


@defmethod @aclass{array} = @var{pred=} @var{array} ...
Return @true{} if the instance and the arguments have equal number of
dimensions and hold the same elements according to @var{pred=}.  The
predicate function @var{pred=} should behave like @func{eqv?}.
@end defmethod


@defmethod @aclass{array} string
Return a string representation of the instance.
@end defmethod

@c ------------------------------------------------------------

@subsubheading Port output


@defmethod @aclass{array} display
@defmethodx @aclass{array} display @var{port}
Write to @var{port} a human readable string representation of the
instance.  @var{port} defaults to the current output port.
@end defmethod


@defmethod @aclass{array} write
@defmethodx @aclass{array} write @var{port}
Write to @var{port} a string representation of the instance such that it
can be read back with @func{read}.  @var{port} defaults to the current
output port.
@end defmethod

@c end of file
