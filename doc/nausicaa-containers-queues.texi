@node containers queues
@section Simple queues


@cindex @library{nausicaa containers queues}, library
@cindex Library @library{nausicaa containers queues}


The library @library{nausicaa containers queues} implements queues
holding arbitrary scheme objects and designed for efficient
first--in/first--out operations; it is built on top of @library{vicare
containers queues}.

@menu
* containers queues objects::     Queue objects.
* containers queues inspection::  Inspecting queue objects.
* containers queues access::      Queue accessors and mutators.
* containers queues conversion::  Converting queues to other objects.
@end menu

@c page
@node containers queues objects
@subsection Queue objects


The following bindings are exported by the library @library{nausicaa
containers queues}.


@deftp {Label Type} @aclass{queue}
@cindex @var{queue} argument
@cindex Argument @var{queue}
Label type to be used to handle @objtype{queue} objects as defined by
the library @library{vicare containers queues}.  In this documentation
@class{queue} object arguments to functions are indicated as
@var{queue}.
@end deftp


@defop {Default constructor} @aclass{queue} constructor @var{obj} @dots{}
Build and return a @class{queue} object holding the given objects, which
are pushed on the queue from lefto to right.
@end defop


@deffn Syntax @aclass{queue} (@var{obj} @dots{})
Build and return a @class{queue} object using the default constructor.
@end deffn

@c ------------------------------------------------------------

@subsubheading Object properties


@defmethod @aclass{queue} putprop @var{key} @var{value}
@defmethodx @aclass{queue} $putprop @var{key} @var{value}
Add a new property @var{key} to the property list of the @class{queue};
@var{key} must be a symbol.  If @var{key} is already set: the old entry
is mutated to reference the new @var{value}.
@end defmethod


@defmethod @aclass{queue} getprop @var{queue} @var{key}
@defmethodx @aclass{queue} $getprop @var{queue} @var{key}
Return the value of the property @var{key} in the property list of the
@class{queue}; if @var{key} is not set: return @false{}.  @var{key} must
be a symbol.
@end defmethod


@defmethod @aclass{queue} remprop @var{queue} @var{key}
@defmethodx @aclass{queue} $remprop @var{queue} @var{key}
Remove the property @var{key} from the property list of the
@class{queue}; if @var{key} is not set: nothing happens.  @var{key} must
be a symbol.
@end defmethod


@defmethod @aclass{queue} property-list @var{queue}
@defmethodx @aclass{queue} $property-list @var{queue}
Return a new association list representing the property list of the
@class{queue}.  The order of the entries is the same as the property
creation order.
@end defmethod

@c ------------------------------------------------------------

@subsubheading Other operations


@defmethod @aclass{queue} hash @var{queue}
@defmethodx @aclass{queue} $hash @var{queue}
Return an exact integer to be used as hashtable key for the
@class{queue}.  Hashtables having a @class{queue} as key can be
instantiated as follows:

@example
(make-hashtable (lambda ((S <queue>))
                  (S hash))
                eq?)
@end example
@end defmethod

@c ------------------------------------------------------------

@subsubheading Arguments validation


The following bindings are meant to be used with the facilities of the
library @library{nausicaa arguments validation}.


@deffn {Validation Clause} @aclass{queue} @var{obj}
Succeed if @var{obj} is a @class{queue} object.
@end deffn

@c page
@node containers queues inspection
@subsection Inspecting queue objects


The following bindings are exported by the library @library{nausicaa
containers queues}.  The bindings whose name is prefixed with @code{$}
are unsafe operations: they do @strong{not} validate their arguments
before accessing them.


@deftypecv {Immutable virtual field} @aclass{queue} @aclass{boolean} empty?
@deftypecvx {Immutable virtual field} @aclass{queue} @aclass{boolean} $empty?
A boolean, @true{} if the instance is empty; otherwise return @false{}.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{queue} @aclass{boolean} not-empty?
@deftypecvx {Immutable virtual field} @aclass{queue} @aclass{boolean} $not-empty?
A boolean, @true{} if the instance is @strong{not} empty; otherwise
return @false{}.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{queue} @aclass{integer} size
@deftypecvx {Immutable virtual field} @aclass{queue} @aclass{integer} $size
An exact integer representing the number of objects in the instance.
@end deftypecv

@c page
@node containers queues access
@subsection Queue accessors and mutators


The following bindings are exported by the library @library{nausicaa
containers queues}.  The bindings whose name is prefixed with @code{$}
are unsafe operations: they do @strong{not} validate their arguments
before accessing them.


@defmethod @aclass{queue} front
@defmethodx @aclass{queue} $front
Return the object at the front of the queue.  Raise an assertion violation
if the instance is empty.
@end defmethod


@defmethod @aclass{queue} rear
@defmethodx @aclass{queue} $rear
Return the object at the rear of the queue.  Raise an assertion
violation if the instance is empty.
@end defmethod


@defmethod @aclass{queue} push! @var{obj}
@defmethodx @aclass{queue} $push! @var{obj}
Push @var{obj} on the @class{queue}.
@end defmethod


@defmethod @aclass{queue} pop!
@defmethodx @aclass{queue} $pop!
Remove the object at the front of the @class{queue} and return it.
Raise an assertion violation if @var{queue} is empty.
@end defmethod

@c page
@node containers queues conversion
@subsection Converting queues to other objects


The following bindings are exported by the library @library{nausicaa
containers queues}.  The bindings whose name is prefixed with @code{$}
are unsafe operations: they do @strong{not} validate their arguments
before accessing them.


@defmethod @aclass{queue} list
@defmethodx @aclass{queue} $list
Return null or a proper list holding the objects from the @class{queue},
top first.
@end defmethod


@defun list->queue @var{list}
Convert a proper list to a @class{queue} object; objects from the list
are pushed on the queue from left to right.

@example
(import (nausicaa)
  (nausicaa containers queues))

(<queue> S (list->queue '(1 2 3)))

(S front)       @result{} 1
@end example
@end defun


@defmethod @aclass{queue} vector
@defmethodx @aclass{queue} $vector
Return a vector holding the objects from the @class{queue}, top first.
@end defmethod


@defun vector->queue @var{vector}
Convert a vector to a @class{queue} object; objects from the vector are
pushed on the queue from left to right.
@end defun

@c end of file
