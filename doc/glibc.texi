@node glibc
@chapter The @gnu{} C Library interface


The functions described in this chapter are exported by the library
@library{vicare glibc}.  The @api{} attempts to create a one--to--one
Scheme functions mapping towards @gnu{} C Library functions, keeping the
same semantics as much as possible; the platform's own documentation is
relevant at the Scheme level.

@quotation
@strong{NOTE} These bindings are included and installed by default and
they can be excluded at compile time by giving the option
@option{--disable-glibc} to the @command{configure} stript.
@end quotation

All the constants needed to use the interface are available as
identifier syntaxes exported by the @library{vicare platform constants}
library; if a constant value is not exported file a feature request for
the project.  If a constant is not defined on a platform: its value is
set to @false{}.

On non--@gnu{} C Library platforms we must avoid calling these
functions, else the behaviour is undefined.

@menu
* glibc env::                   Operating system environment
                                variables.
* glibc dir::                   File system directories.
* glibc temp::                  Temporary files and directories.
* glibc sync::                  File system synchronisation.
* glibc socket::                Network sockets.
* glibc math::                  Mathematics.
* glibc random::                Pseudo--random numbers.
* glibc match::                 Pattern matching, globbing and
                                regular expressions.
* glibc word::                  Performing word expansion.
* glibc iconv::                 Generic character set conversion.
@end menu

@c page
@node glibc env
@section Operating system environment variables


The following bindings are exported by the @library{vicare glibc}
library.


@defun clearenv
Interface to the C function @cfunc{clearenv}, @glibcref{Environment
Access, clearenv}.  Remove all the entries from the environment.  Return
unspecified values.
@end defun

@c page
@node glibc dir
@section File system directories


The following bindings are exported by the @library{vicare glibc}
library.


@defun dirfd @var{stream}
Interface to the C function @cfunc{dirfd}, @glibcref{Opening a
Directory, dirfd}.  Acquire a file descriptor associated to
@var{stream}, which must be an instance of @code{directory-stream};
@ref{posix dir} for details.  If successful return a fixnum representing
the file descriptor, else raise an exception.
@end defun

@c page
@node glibc temp
@section Temporary files and directories


The following bindings are exported by the @library{vicare glibc}
library.


@defun mkstemp @var{template}
Interface to the C function @cfunc{mkstemp}, @glibcref{Temporary Files,
mkstemp}.  Create a temporary file, create it and open a file descriptor
for reading and writing.  @var{template} must be a mutable bytevector
holding a template pathname on entering and the actual pathname on
returning.  If successful return a file descriptor, else raise an
exception.
@end defun


@defun mkdtemp @var{template}
Interface to the C function @cfunc{mkdtemp}, @glibcref{Temporary Files,
mkdtemp}.  Create a temporary directory for reading and writing.
@var{template} must be a mutable bytevector holding a template pathname
on entering and the actual pathname on returning.  If successful return
@var{template} itself, else raise an exception.
@end defun

@c page
@node glibc sync
@section File system synchronisation


The following bindings are exported by the @library{vicare glibc}
library.


@defun sync
Interface to the C function @cfunc{sync}, @glibcref{Synchronizing I/O}.
Flush kernel buffer data and meta informations to the file system
devices.  If successful return unspecified values, else raise an
exception.
@end defun


@defun fsync @var{fd}
Interface to the C function @cfunc{fsync}, @glibcref{Synchronizing I/O}.
Flush kernel buffer data and meta informations to the file system device
for the file descriptor @var{fd}.  If successful return unspecified
values, else raise an exception.
@end defun


@defun fdatasync @var{fd}
Interface to the C function @cfunc{fdatasync}, @glibcref{Synchronizing
I/O}.  Flush kernel buffer data to the file system device for the file
descriptor @var{fd}.  If successful return unspecified values, else
raise an exception.
@end defun

@c page
@node glibc socket
@section Network sockets


The following bindings are exported by the @library{vicare glibc}
library.


@defun if-nametoindex @var{name}
Interface to the C function @cfunc{if_nametoindex}, @glibcref{Interface
Naming, if_nametoindex}.  Convert the string @var{name} representing a
network interface to the corresponding internal index.  Return a fixnum
representing the index or false if @var{name} is invalid.

@example
(import (vicare)
  (prefix (vicare glibc) glibc.))

(glibc.if-indextoname 0)      @result{} #f
(glibc.if-indextoname 1)      @result{} "lo"
(glibc.if-indextoname 2)      @result{} "eth0"
@end example
@end defun


@defun ikptr if-indextoname @var{index}
Interface to the C function @cfunc{if_indextoname}, @glibcref{Interface
Naming, if_indextoname}.  Convert the fixnum @var{index} associated to
an interface to the corresponding string name.  Return a string holding
the name or false if @var{index} is invalid.

@example
(import (vicare)
  (prefix (vicare glibc) glibc.))

(glibc.if-nametoindex "lo")   @result{} 1
(glibc.if-nametoindex "eth0") @result{} 2
@end example
@end defun


@defun if-nameindex
Interface to the C function @cfunc{if_nameindex}, @glibcref{Interface
Naming, if_nameindex}.  Build and return an association list having
fixnums as keys and strings as values; the fixnums are the interface
indexes, the strings are the corresponding interface names.

@example
(import (vicare)
  (prefix (vicare glibc) glibc.))

(glibc.if-nameindex)
@result{} ((4 . "wlan0")
    (2 . "eth0")
    (1 . "lo"))
@end example
@end defun

@c ------------------------------------------------------------

@defun gethostbyname2 @var{hostname} @var{addrtype}
Interface to the C function @cfunc{gethostbyname2}, @glibcref{Host Names,
gethostbyname2}.  Like @func{gethostbyname} but allows the selection of
the address type with the parameter @var{addrtype} which must be
@code{AF_INET} or @code{AF_INET6}.
@end defun

@c page
@node glibc math
@section Mathematics


A binding for each of the following constants is exported by
@library{vicare platform constants}:

@example
M_E         M_LOG2E     M_LOG10E
M_LN2       M_LN10      M_PI
M_PI_2      M_PI_4      M_1_PI
M_2_PI      M_2_SQRTPI  M_SQRT2
M_SQRT1_2
@end example

The following bindings are exported by the @library{vicare glibc}
library.  The functions are implemented by the @gnu{} C library and are
probably faster than the ones implemented by the @rnrs{6} libraries.
All the arguments @var{fl} must be flonums, all the arguments @var{cfl}
must be complex flonums.

@c ------------------------------------------------------------

@subsubheading Trigonometric functions


@defun csin @var{cfl}
@defunx ccos @var{cfl}
@defunx ctan @var{cfl}
Trigonometric functions for complex flonums.
@end defun


@defun casin @var{cfl}
@defunx cacos @var{cfl}
@defunx catan @var{cfl}
Inverse trigonometric functions for complex flonums.
@end defun

@c ------------------------------------------------------------

@subsubheading Exponents and logarithms


@defun cexp @var{cfl}
Return the base of the natural logarithms raised to the power of the
operand.
@end defun


@defun clog @var{cfl}
Return the natural logarithm of the operand.
@end defun


@defun clog10 @var{cfl}
Return the base @math{10} logarithm of the operand.
@end defun


@defun csqrt @var{cfl}
Return the square root of the operand.
@end defun


@defun cpow @vari{cfl} @varii{cfl}
Return @vari{cfl} raised to the power of @varii{cfl}.
@end defun

@c ------------------------------------------------------------

@subsubheading Hyperbolic functions


@defun sinh @var{fl}
@defunx cosh @var{fl}
@defunx tanh @var{fl}
Hyperbolic functions for flonums.
@end defun


@defun asinh @var{fl}
@defunx acosh @var{fl}
@defunx atanh @var{fl}
Inverse hyperbolic functions for flonums.
@end defun


@defun csinh @var{cfl}
@defunx ccosh @var{cfl}
@defunx ctanh @var{cfl}
Hyperbolic functions for complex flonums.
@end defun


@defun casinh @var{cfl}
@defunx cacosh @var{cfl}
@defunx catanh @var{cfl}
Inverse hyperbolic functions for complex flonums.
@end defun

@c ------------------------------------------------------------

@subsubheading Special functions


@defun erf @var{fl}
@defunx erfc @var{fl}
Interfaces to the C functions @cfunc{erf} and @cfunc{erfc},
@glibcref{Special Functions, erf}.  Compute the error function.
@end defun


@defun lgamma @var{fl}
Interface to the C function @cfunc{lgamma}, @glibcref{Special Functions,
lgamma}.  Compute the natural logarithm of the absolute value of the
gamma function of the operand.  Return two values: a flonum being the
result of the function and a fixnum representing the sign of the
intermediate result.
@end defun


@defun tgamma @var{fl}
Interface to the C function @cfunc{tgamma}, @glibcref{Special Functions,
lgamma}.  Compute the gamma function of the operand.
@end defun


@defun j0 @var{fl}
@defunx j1 @var{fl}
@defunx jn @var{fx} @var{fl}
Interfaces to the C functions @cfunc{j0}, @cfunc{j1} and @cfunc{jn};
@glibcref{Special Functions, j0}.  Compute the Bessel functions of the
first kind.  @var{fx} must be a fixnum.
@end defun


@defun y0 @var{fl}
@defunx y1 @var{fl}
@defunx yn @var{fx} @var{fl}
Interfaces to the C functions @cfunc{y0}, @cfunc{y1} and @cfunc{yn};
@glibcref{Special Functions, y0}.  Compute the Bessel functions of the
second kind.  @var{fx} must be a fixnum.
@end defun

@c page
@node glibc random
@section Pseudo--random numbers


The following bindings are exported by the @library{vicare glibc}
library.


@defun rand
Interface to the C function @cfunc{rand}, @glibcref{ISO Random, rand}.
Return a non--negative exact integer representing the next
pseudo--random number in the series.  The maximum returned value is
@code{RAND_MAX}, which is a binding exported by @library{vicare
platform constants}.
@end defun


@defun srand @var{seed}
Interface to the C function @cfunc{srand}, @glibcref{ISO Random, srand}.
Set to the exact integer @var{seed} the seed of the pseudo--random
numbers series.
@end defun

@c page
@node glibc match
@section Pattern matching, globbing and regular expressions


The following bindings are exported by the @library{vicare glibc}
library.


@defun fnmatch @var{pattern} @var{string} @var{flags}
Interface to the C function @cfunc{fnmatch}, @glibcref{Wildcard
Matching, fnmatch}.  Tests whether @var{string} matches @var{pattern}
according to @var{flags}; if it matches return @true{}, else return
@false{}.

@var{pattern} and @var{string} must be Scheme strings or bytevectors;
@var{flags} must be a fixnum resulting from the bitwise combination
(@func{fxior}) of the @code{FNM_} constants exported by @library{vicare
platform constants}.

@example
#!r6rs
(import (vicare)
  (prefix (vicare glibc) glibc.)
  (vicare platform constants))

(glibc.fnmatch "ciao" "ciao"  0)        @result{} #t
(glibc.fnmatch "ciao" "salut" 0)        @result{} #f

(glibc.fnmatch "ciao*" "ciao a tutti" 0)
@result{} #t

(glibc.fnmatch "*(Ciao)" "CiaoCiao" FNM_EXTMATCH)
@result{} #t

(glibc.fnmatch "?(Ciao|Hello)" "Hello" FNM_EXTMATCH)
@result{} #t
@end example
@end defun


@defun glob @var{pattern} @var{flags} @var{error-handler}
@defunx glob/string @var{pattern} @var{flags} @var{error-handler}
Interface to the C function @cfunc{glob}, @glibcref{Calling Glob, glob}.
Perform file globbing @strong{in the current directory} using
@var{pattern} to select entries according to @var{flags}.  If successful
@func{glob} returns a list of bytevectors representing the result,
@func{glob/string} returns a list of strings representing the result;
else both return a fixnum representing one of the error codes:
@code{GLOB_ABORTED}, @code{GLOB_NOMATCH}, @code{GLOB_NOSPACE}.

@var{pattern} must be a string or bytevector.  @var{flags} must be a
fixnum built as bitwise composition (@func{fxior}) of the flags:
@code{GLOB_ERR}, @code{GLOB_MARK}, @code{GLOB_NOCHECK},
@code{GLOB_NOSORT}, @code{GLOB_NOESCAPE}, @code{GLOB_PERIOD},
@code{GLOB_BRACE}, @code{GLOB_NOMAGIC}, @code{GLOB_TILDE},
@code{GLOB_TILDE_CHECK}, @code{GLOB_ONLYDIR}.

@var{error-handler} must be @false{} or a callback pointer with the
signature:

@example
int @var{error-handler} (const char * filename, int error-code)
@end example

@noindent
called by @func{glob} whenever it cannot open a directory; see the
documentation for @cfunc{glob} and the flag @code{GLOB_ERR} for details.

@example
#!r6rs
(import (vicare)
  (prefix (vicare glibc) glibc.)
  (vicare platform constants))

(glibc.glob/string "*" 0 #f)
@result{} ("bin" "boot" "dev" "etc" "home" "lib"
    "libexec" "lost+found" "media" "mnt" "opt"
    "proc" "root" "sbin" "share" "srv" "sys"
    "tmp" "usr" "var")

(glibc.glob/string "~marco" GLOB_TILDE #f)
@result{} ("/home/marco")
@end example
@end defun

@c ------------------------------------------------------------

@subsubheading @posix{} regular expressions

The following are usage examples of @posix{} regular expressions
matching:

@example
#!r6rs
(import (vicare)
  (prefix (vicare glibc) glibc.)
  (vicare platform constants))

(let ((rex (glibc.regcomp "abc" 0)))
  (glibc.regexec rex "abc" 0))
@result{} #((0 . 3)))   ;the regex matched the whole string

(let ((rex (glibc.regcomp "abc" 0)))
  (glibc.regexec rex "abcdef" 0))
@result{} #((0 . 3))    ;substring [0, 3) matched

(let ((rex (glibc.regcomp "ciao" 0)))
  (glibc.regexec rex "abc" 0))
@result{} #f            ;no match

(let ((rex (glibc.regcomp "\\(a\\)" 0)))
  (glibc.regexec rex "abc" 0))
@result{} #((0 . 1)     ;the regexp matched the whole string
     (0 . 1))    ;substring [0, 1) matched the 1st paren

(let ((rex (glibc.regcomp "\\(a\\)\\(b\\)\\(c\\)" 0)))
  (glibc.regexec rex "abc" 0))
@result{} #((0 . 3)     ;the regexp matched the whole string
     (0 . 1)     ;substring [0, 1) matched the 1st paren
     (1 . 2)     ;substring [1, 2) matched the 2nd paren
     (2 . 3))    ;substring [2, 3) matched the 3rd paren

(let ((rex (glibc.regcomp "\\(a\\(b\\(c\\)\\)\\)" 0)))
  (glibc.regexec rex "abc" 0))
@result{} #((0 . 3)     ;the regexp matched the whole string
     (0 . 3)     ;substring [0, 3) matched the 1st paren
     (1 . 3)     ;substring [1, 3) matched the 2nd paren
     (2 . 3))    ;substring [2, 3) matched the 3rd paren

(let* ((rex (glibc.regcomp/disown "[a-z]+" REG_EXTENDED))
       (rv  (glibc.regexec rex "abc" 0)))
  (glibc.regfree rex)
  rv)
@result{} #((0 . 3))
@end example

@noindent
we have to remember that this @api{} can be used only with bytevectors
representing @ascii{} coded strings and with Scheme strings containing
only characters whose Unicode code points are in the range @math{[0,
255]}.

@posix{} regular expression patterns are described in the ``Base
Definitions'' volume of @ieee{} Std 1003.1-2001, Chapter 9, Regular
Expressions:

@center @url{http://pubs.opengroup.org/onlinepubs/009695399/nframe.html}

@noindent
@aurl{} last verified Dec  9, 2011.


@defun regcomp @var{pattern} @var{flags}
Interface to the C function @cfunc{regcomp}, @glibcref{POSIX Regexp
Compilation, regcomp}.  Compile the regular expression in @var{pattern}
accoding to @var{flags}.  If successful return a pointer referencing the
compiled regexp, else raise an exception with condition components
@condition{error}, @condition{who}, @condition{message},
@condition{irritants}.

@var{pattern} must be a string or bytevector representing the regular
expression.  @var{flags} must be a fixnum resulting from the bitwise
combination (@func{fxior}) of @code{REG_} constants.

The pointer returned in case of success references a @code{regex_t} data
structure whose fields must be released explicitly by @func{regfree}, or
they are automatically released by the garbage collector whenever the
pointer itself is collected.
@end defun


@defun regcomp/disown @var{pattern} @var{flags}
Like @func{regcomp}, but when the returned pointer object is garbage
collected nothing happens; we have to explicitly apply @func{regfree} to
the returned pointer object to release the allocated resources.
@end defun


@defun regexec @var{regex} @var{string} @var{flags}
Interface to the C function @cfunc{regexec}, @glibcref{Matching POSIX
Regexps, regexec}.  Attempt to match @var{string} against the
precompiled regular expression @var{regex} according to @var{flags}.

@var{regex} must be a pointer returned by a previous call to
@func{regcomp}; @var{string} must be a string or bytevector in @ascii{}
encoding; @var{flags} must be a fixnum representing matching flags, we
can use zero for no flags.

If one or more matches occur return a vector holding pairs describing
the portions of @var{string} that did match; if no match occurs return
@false{}; if an error occurs raise an exception with condition
components: @condition{error}, @condition{who}, @condition{message},
@condition{irritants}.

The vector returned in case of success contains pairs: the car being a
fixnum representing the starting offset of a match substring, the cdr
being a fixnum representing the ending offset of a match substring.

The vector element at index @math{0} represents the portion of
@var{string} which matched the whole regular expression; the vector
element at index @math{1} represents the portion of @var{string} which
matched the first parenthetical subexpression, the vector element at
index @math{2} represents the portion of @var{string} which matched the
second parenthetical subexpression, and so on.  If @var{string} matches:
the returned vector has at least one element.
@end defun


@defun regfree @var{regex}
Interface to the C function @cfunc{regfree}, @glibcref{Regexp Cleanup,
regfree}.  Release the resources associated to the compiled regular
expression @var{regex}, which must be a pointer.

It is safe to apply this function multiple times to the same @var{regex}
pointer object: releasing occurs only if the first time, subsequent
applications do nothing.  After the resources have been released:
@var{regex} is reset to @cnull{}.
@end defun

@c page
@node glibc word
@section Performing word expansion


Word expansion is a set of operations acting on a given string and
involving the current system environment variable; it is usually
performed by Unix shell programs.  It works as follows:

@example
#!r6rs
(import (rnrs)
  (prefix (vicare posix) px.)
  (prefix (vicare glibc) glibc.)
  (vicare platform constants))

(px.setenv "CIAO" "BLU")
(glibc.wordexp/string "$CIAO" 0)        @result{} #("BLU")

(px.setenv "CIAO" "BLUETTE")
(glibc.wordexp/string "$@{CIAO##BLU@}" 0) @result{} #("ETTE")

(glibc.wordexp/string "/bin/ch*" 0)
@result{} #("/bin/chcon""/bin/chgrp"
     "/bin/chmod" "/bin/chown" "/bin/chroot")

@end example

The following bindings are exported by the @library{vicare glibc}
library.


@defun wordexp @var{words} @var{flags}
@defunx wordexp/string @var{words} @var{flags}
Interface to the C function @cfunc{wordexp}, @glibcref{Calling Wordexp,
wordexp}.  Perform word expansion on @var{words} according to
@var{flags}.

@var{words} must be a string or bytevector.  @var{flags} must be a
fixnum resulting from the bitwise combination (@func{fxior}) of the
flags: @code{WRDE_NOCMD}, @code{WRDE_SHOWERR}, @code{WRDE_UNDEF}.

If successful @func{wordexp} returns a vector holding the resulting
bytevectors, @func{wordexp/string} returns a vector holding the
resulting strings; else the return value is a fixnum among:
@code{WRDE_BADCHAR}, @code{WRDE_BADVAL}, @code{WRDE_CMDSUB},
@code{WRDE_NOSPACE}, @code{WRDE_SYNTAX}.
@end defun

@c page
@node glibc iconv
@section Generic character set conversion


The Iconv functions allow conversion among character set encodings,
@glibcref{Generic Charset Conversion, Conversion}.  This @api{} is
available only if, at package configuration time, it was enabled with
the @option{--with-iconv} option to the @command{configure} script.

@menu
* glibc iconv set::             Encoding enumeration sets.
* glibc iconv conv::            Conversion functions.
@end menu

@c page
@node glibc iconv set
@subsection Encoding enumeration sets


The following bindings are exported by the @library{vicare glibc}
library.


@deftp {Enumeration Type} enum-iconv-encoding
Enumeration type for the symbols describing supported Iconv encodings.
All the encoding symbols are included with the exception of @samp{850},
@samp{862} and @samp{866} (because they are numbers) which are aliases
for @samp{CP850}, @samp{CP862} and @samp{CP866}.

Additionally @samp{TRANSLIT} and @samp{IGNORE} are included to allow the
specification of the corresponding modes for @func{iconv!}.
@end deftp


@deffn Syntax iconv-encoding @ameta{symbol} ...
Evaluate to an enumeration set holding symbols from the
@code{enum-iconv-encoding} enumeration.  It should be used to compose
sets with a single encoding symbol and optionally none, one or both the
symbols @samp{TRANSLIT} and @samp{IGNORE}.

Examples:

@example
(iconv-encoding ISO8859-4)
(iconv-encoding UTF-16BE IGNORE)
(iconv-encoding UCS-4 TRANSLIT IGNORE)
@end example
@end deffn


@defvr Constant iconv-encoding-universe
Enumeration set holding all the symbols in the
@code{enum-iconv-encoding} enumeration.
@end defvr


@defun iconv-encoding-aliases? @vari{set} @varii{set}
Return true if the encodings specified by the enumeration sets
@vari{set} and @varii{set} are aliases for the same encoding.  This
predicate does @strong{not} take into account the @samp{TRANSLIT} and
@samp{IGNORE} symbols.
@end defun


@defun iconv-encoding=? @vari{set} @varii{set}
Return true if the encodings specified by the enumeration sets
@vari{set} and @varii{set} are aliases for the same encoding, taking
into account the @samp{TRANSLIT} and @samp{IGNORE} symbols.
@end defun

@c page
@node glibc iconv conv
@subsection Conversion functions


The basics of the conversion are as follows:

@example
#!r6rs
(import (vicare)
  (prefix (vicare glibc) glibc.))

(let* ((handle    (glibc.iconv-open
                    (glibc.iconv-encoding UTF-16BE) ;from
                    (glibc.iconv-encoding UTF-8)))  ;to
       (in.bv     (string->utf16 "ciao hello salut"
                    (endianness big)))
       (out.bv    (make-bytevector 16)))
  (let-values (((in.start out.start)
               (glibc.iconv! handle in.bv 0 #f out.bv 0 #f)))
    (utf8->string out.bv)))
@result{} "ciao hello salut"
@end example

The following bindings are exported by the @library{vicare glibc}
library.


@defun iconv-open @var{from} @var{to}
Build and return a new conversion context object for the specified
encodings.  @var{from} and @var{to} must be enumeration sets of type
@code{enum-iconv-encoding}.  The returned handle must be finalised with
@func{iconv-close}; this operation is automatically performed when the
handle is garbage collected.

@quotation
@strong{NOTE} Beware of the order of the arguments!  An error may be
difficult to detect.
@end quotation
@end defun


@defun iconv? @var{obj}
Return true if @var{obj} is an Iconv context object.  Context objects
are disjoint from the other Scheme objects.
@end defun


@defun iconv-closed? @var{context}
Return @true{} if @var{context} is an Iconv context already closed;
return @false{} otherwise.
@end defun


@defun iconv-close @var{context}
Close the conversion @var{context} releasing all the associated
resources.  Applying this function multiple times to the same
@var{context} object is safe: the first time the context is finalised,
the subsequent times nothing happens.
@end defun


@defun iconv! @var{context} @var{in} @var{in.start} @var{in.past} @var{out} @var{out.start} @var{out.past}
Convert a range of bytes from the bytevector @var{in} and store the
result into a range of bytes in the bytevector @var{out}, according
to the context specified by @var{context}.

@var{in.start} is a fixnum representing the input inclusive start index;
@var{in.past} is a fixnum representing the input exclusive end index;
@var{out.start} is a fixnum representing the output inclusive start
index; @var{out.past} is a fixnum representing the output exclusive end
index.  They must be such that:

@example
0 <= @var{in.start}  <= @var{in.past}  <= length(@var{in})
0 <= @var{out.start} <= @var{out.past} <= length(@var{out})
@end example

As special cases: if @var{in.past} is false, the input past index is the
length of @var{in}; if @var{out.past} is false, the output past index is
the length of @var{out}.

If the operation is successful return two values:

@enumerate
@item
A fixnum representing the index of the first byte in @var{in} that was
not consumed.  If all the input range was processed: this value equals
@var{in.past}.

@item
A fixnum representing the index of the first byte in @var{out} that was
not filled with output data.  If all the output range was filled with
output: this value equals @var{out.past}.
@end enumerate

If an error occurs raise an exception.

@quotation
@strong{NOTE} Beware of the order of the arguments!  An error may be
difficult to detect.
@end quotation
@end defun

@c end of file
