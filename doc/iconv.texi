@node iconv
@chapter Generic character set conversion


The Iconv functions allow conversion among character set encodings,
@glibcref{Generic Charset Conversion, Conversion}.  This @api{} is
available only if, at package configuration time, it was enabled with
the @option{--with-iconv} option to the @command{configure} script.

The availability of the Iconv @api{} can be tested at run--time with the
function @func{vicare-built-with-iconv-enabled} from @library{vicare}
(@pxref{iklib config, vicare-built-with-iconv-enabled}), and at
expand--time with the clause @code{iconv-enabled} of @func{cond-expand}
from @ansrfi{0} (@pxref{srfi cond-expand vicare, iconv-enabled}).

@menu
* iconv set::                   Encoding enumeration sets.
* iconv conv::                  Conversion functions.
@end menu

@c page
@node iconv set
@section Encoding enumeration sets


The following bindings are exported by the @library{vicare iconv}
library.


@deftp {Enumeration Type} enum-iconv-encoding
Enumeration type for the symbols describing supported Iconv encodings.
All the encoding symbols are included with the exception of @samp{850},
@samp{862} and @samp{866} (because they are numbers) which are aliases
for @samp{CP850}, @samp{CP862} and @samp{CP866}.

Additionally @samp{TRANSLIT} and @samp{IGNORE} are included to allow the
specification of the corresponding modes for @func{iconv!}.
@end deftp


@deffn Syntax iconv-encoding @ameta{symbol} ...
Evaluate to an enumeration set holding symbols from the
@code{enum-iconv-encoding} enumeration.  It should be used to compose
sets with a single encoding symbol and optionally none, one or both the
symbols @samp{TRANSLIT} and @samp{IGNORE}.

Examples:

@example
(iconv-encoding ISO8859-4)
(iconv-encoding UTF-16BE IGNORE)
(iconv-encoding UCS-4 TRANSLIT IGNORE)
@end example
@end deffn


@defvr Constant iconv-encoding-universe
Enumeration set holding all the symbols in the
@code{enum-iconv-encoding} enumeration.
@end defvr


@defun iconv-encoding-aliases? @vari{set} @varii{set}
Return true if the encodings specified by the enumeration sets
@vari{set} and @varii{set} are aliases for the same encoding.  This
predicate does @strong{not} take into account the @samp{TRANSLIT} and
@samp{IGNORE} symbols.
@end defun


@defun iconv-encoding=? @vari{set} @varii{set}
Return true if the encodings specified by the enumeration sets
@vari{set} and @varii{set} are aliases for the same encoding, taking
into account the @samp{TRANSLIT} and @samp{IGNORE} symbols.
@end defun

@c page
@node iconv conv
@section Conversion functions


The basics of the conversion are as follows:

@example
#!r6rs
(import (vicare)
  (prefix (vicare iconv) iconv.))

(let* ((handle    (iconv.iconv-open
                    (iconv.iconv-encoding UTF-16BE) ;from
                    (iconv.iconv-encoding UTF-8)))  ;to
       (in.bv     (string->utf16 "ciao hello salut"
                    (endianness big)))
       (out.bv    (make-bytevector 16)))
  (let-values (((in.start out.start)
               (iconv.iconv! handle in.bv 0 #f out.bv 0 #f)))
    (utf8->string out.bv)))
@result{} "ciao hello salut"
@end example

The following bindings are exported by the @library{vicare iconv}
library.


@defun iconv-open @var{from} @var{to}
Build and return a new conversion context object for the specified
encodings.  @var{from} and @var{to} must be enumeration sets of type
@code{enum-iconv-encoding}.  The returned handle must be finalised with
@func{iconv-close}; this operation is automatically performed when the
handle is garbage collected.

@quotation
@strong{NOTE} Beware of the order of the arguments!  An error may be
difficult to detect.
@end quotation
@end defun


@defun iconv? @var{obj}
Return true if @var{obj} is an Iconv context object.  Context objects
are disjoint from the other Scheme objects.
@end defun


@defun iconv-closed? @var{context}
Return @true{} if @var{context} is an Iconv context already closed;
return @false{} otherwise.
@end defun


@defun iconv-close @var{context}
Close the conversion @var{context} releasing all the associated
resources.  Applying this function multiple times to the same
@var{context} object is safe: the first time the context is finalised,
the subsequent times nothing happens.
@end defun


@defun iconv! @var{context} @var{in} @var{in.start} @var{in.past} @var{out} @var{out.start} @var{out.past}
Convert a range of bytes from the bytevector @var{in} and store the
result into a range of bytes in the bytevector @var{out}, according
to the context specified by @var{context}.

@var{in.start} is a fixnum representing the input inclusive start index;
@var{in.past} is a fixnum representing the input exclusive end index;
@var{out.start} is a fixnum representing the output inclusive start
index; @var{out.past} is a fixnum representing the output exclusive end
index.  They must be such that:

@example
0 <= @var{in.start}  <= @var{in.past}  <= length(@var{in})
0 <= @var{out.start} <= @var{out.past} <= length(@var{out})
@end example

As special cases: if @var{in.past} is false, the input past index is the
length of @var{in}; if @var{out.past} is false, the output past index is
the length of @var{out}.

If the operation is successful return two values:

@enumerate
@item
A fixnum representing the index of the first byte in @var{in} that was
not consumed.  If all the input range was processed: this value equals
@var{in.past}.

@item
A fixnum representing the index of the first byte in @var{out} that was
not filled with output data.  If all the output range was filled with
output: this value equals @var{out.past}.
@end enumerate

If an error occurs raise an exception.

@quotation
@strong{NOTE} Beware of the order of the arguments!  An error may be
difficult to detect.
@end quotation
@end defun

@c end of file
