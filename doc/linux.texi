@node linux
@chapter The @gnu{}+Linux interface


The functions described in this chapter are exported by the library
@library{vicare linux}.  The @api{} attempts to create a one--to--one
Scheme functions mapping towards Linux functions, keeping the same
semantics as much as possible; the platform's own documentation is
relevant at the Scheme level.

@quotation
@strong{NOTE} These bindings are included and installed by default and
they can be excluded at compile time by giving the option
@option{--disable-linux} to the @command{configure} stript.
@end quotation

All the constants needed to use the interface are available as
identifier syntaxes exported by the @library{vicare platform constants}
library; if a constant value is not exported, file a feature request for
the project.  If a constant is not defined on a platform: its value is
set to @false{}.

The library @library{vicare platform features} exports one identifier
syntax for each @code{HAVE_} symbol defined by @value{PRJNAME}
@command{configure} script, expanding to @true{} or @false{}.

For a list of Linux--specific system calls, see the @code{syscalls(2)}
manual page.

On non--Linux platforms we must avoid calling these functions, else the
behaviour is undefined.

@menu
* linux env::                   Operating system environment variables.
* linux status::                Process termination status.
* linux resources::             Resources usage and limits.
* linux epoll::                 Polling for events on file descriptors.
* linux signalfd::              Accepting signals through
                                file descriptors.
* linux timerfd::               Timer expiration handling through
                                file descriptors.
* linux inotify::               Monitoring file system events.
@end menu

@c page
@node linux env
@section Operating system environment variables


The following bindings are exported by the @library{vicare linux}
library.


@defun clearenv
Interface to the C function @cfunc{clearenv}, @glibcref{Environment
Access, clearenv}.  Remove all the entries from the environment.  Return
unspecified values.
@end defun

@c page
@node linux status
@section Process termination status


The following bindings are exported by the @library{vicare linux}
library.


@defun waitid @var{idtype} @var{id} @var{options}
Interface to the Linux specific C function @cfunc{waitid}, see the
@cfunc{waitid} manual page for details.  Wait for the termination of one
or more child processes with finer control of @func{waitpid}.  All the
arguments must be fixnums.  If successful: return an instance of
structure @code{struct-siginfo_t}, else raise an exception.
@end defun


@deftp Struct struct-siginfo_t
Data structure used by @func{waitid} to report its result; it has the
following fields:

@example
si_pid si_uid si_signo si_status si_code
@end example

See the @cfunc{waitid} manual page for details.
@end deftp


@defun make-struct-siginfo_t @var{pid} @var{uid} @var{signo} @var{status} @var{code}
@defunx struct-siginfo_t? @var{obj}
@defunx struct-siginfo_t-si_pid
@defunx struct-siginfo_t-si_uid
@defunx struct-siginfo_t-si_signo
@defunx struct-siginfo_t-si_status
@defunx struct-siginfo_t-si_code
Constructor, predicate and field accessors for structures of type
@code{struct-siginfo_t}.
@end defun


The following functions accept as argument a fixnum representing the
process termination status, for example the return value of
@cfunc{system} or the status acquired by @cfunc{waitpid}.


@defun WIFCONTINUED @var{status}
Interface to the Linux specific C macro @cfunc{WIFCONTINUED}.  Return
true if the process was resumed by delivery of @code{SIGCONT}.
@end defun

@c page
@node linux resources
@section Resources usage and limits


The following bindings are exported by @library{vicare posix} and
reexported by @library{vicare linux}.

@example
make-struct-rlimit      struct-rlimit?
struct-rlimit-rlim_cur  set-struct-rlimit-rlim_cur!
struct-rlimit-rlim_max  set-struct-rlimit-rlim_max!
RLIM_INFINITY
@end example


@defun prlimit @var{pid} @var{resource}
@defunx prlimit @var{pid} @var{resource} @var{new-rlim}
@defunx prlimit @var{pid} @var{resource} @var{new-rlim} @var{old-rlim}
Interface to the C function @cfunc{prlimit}, see the manual page
@code{prlimit(2)}.  Get and/or set the resource limits of an arbitrary
process; if successful return @var{old-rlim}, else raise an exception.

@var{pid} must be a fixnum representing the process identifier of the
target process.  @var{resource} must be an exact integer representing
the value of a @code{RLIMIT_} constant.

The optional @var{new-rlim} must be @false{} or an instance of
@code{struct-rlimit}; when @false{}: no new value is set and the
function only retrieves the current resources usage values; when a
structure instance: its fields are used to set new resource usage
limits.

The optional @var{old-rlim} must an instance of @code{struct-rlimit}: it
is filled with the previous values for the resource usage limits and
returned; when not given: a new instance is built, filled and returned.
@end defun

@c page
@node linux epoll
@section Polling for events on file descriptors


For details on the @api{} we should refer to the following manual pages:
@code{epoll(7)}, @code{epoll_create(2)}, @code{epoll_ctl(2)},
@code{epoll_wait(2)}.  The following bindings are exported by the
@library{vicare linux} library.


@defun epoll-create
@defunx epoll-create @var{size}
@defunx epoll-create1 @var{flags}
Interfaces to the C language functions @cfunc{epoll_create} and
@cfunc{epoll_create1}.  Open an epoll descriptor and return it as
fixnum.  When @var{size} is not used: it defaults to @math{16}.  If an
error occurs: raise an exception.
@end defun


@defun epoll-ctl @var{epfd} @var{op} @var{fd}
@defunx epoll-ctl @var{epfd} @var{op} @var{fd} @var{event}
Interface to the C language function @cfunc{epoll_ctl}.  Control
interface for an epoll descriptor.  Return unspecified values.  If an
error occurs: raise an exception.

@var{epfd} is the return value of a previous call to
@func{epoll-create}.  @var{op} is a fixnum representing an OR
combination of flags: @code{EPOLL_CTL_ADD}, @code{EPOLL_CTL_MOD},
@code{EPOLL_CTL_DEL}.  @var{fd} is a fixnum representing the file
descriptor subject of the action.  @var{event} is a pointer object
referencing a @code{struct epoll_event}; when @var{event} is @false{} or
not used: it defaults to the @cnull{} pointer.
@end defun


@defun epoll-wait @var{epfd} @var{event} @var{maxevents} @var{timeout-ms}
Interface to the C language function @cfunc{epoll_wait}.  Wait for an
I/O event on an epoll descriptor.  Return a fixnum representing the
number of file descriptors ready for the requested events; the return
value is zero if no file descriptors are ready.  If an error occurs:
raise an exception.

@var{epfd} is the return value of a previous call to
@func{epoll-create}.  @var{event} is a poiner object referencing an
array of @code{struct epoll_event} holding @var{maxevents} entries;
@var{maxevents} is a non--negative fixnum.  @var{timeout-ms} is an exact
integer in the range of a C language @code{int}, it represents a timeout
time in milliseconds; when set to @code{-1} causes the call to block
until at least one file descriptor is ready.
@end defun


To allow for faster operations, the @code{struct epoll_event} instances
handled by the epoll functions are meant to be allocated on raw memory.


@defun epoll-event-alloc @var{number-of-entries}
Allocate with @cfunc{malloc} an array of @code{struct epoll_event}
capable of holding @var{number-of-entries} structures.  If successful
return a pointer object, else raise an exception.
@end defun


@defun epoll-event-size
Return the number of bytes needed to hold an instance of @code{struct
epoll_event}.
@end defun


@defun epoll-event-set-events! @var{events-array} @var{index} @var{new-value}
@defunx epoll-event-ref-events @var{events-array} @var{index}
Mutator and accessor for the field @code{events} of the @code{struct
epoll_event} entry at @var{index}.
@end defun


@defun epoll-event-set-data-ptr! @var{events-array} @var{index} @var{new-value}
@defunx epoll-event-ref-data-ptr @var{events-array} @var{index}
Mutator and accessor for the field @code{data.ptr} of the @code{struct
epoll_event} entry at @var{index}.
@end defun


@defun epoll-event-set-data-fd! @var{events-array} @var{index} @var{new-value}
@defunx epoll-event-ref-data-fd @var{events-array} @var{index}
Mutator and accessor for the field @code{data.fd} of the @code{struct
epoll_event} entry at @var{index}.
@end defun


@defun epoll-event-set-data-u32! @var{events-array} @var{index} @var{new-value}
@defunx epoll-event-ref-data-u32 @var{events-array} @var{index}
Mutator and accessor for the field @code{data.u32} of the @code{struct
epoll_event} entry at @var{index}.
@end defun


@defun epoll-event-set-data-u64! @var{events-array} @var{index} @var{new-value}
@defunx epoll-event-ref-data-u64 @var{events-array} @var{index}
Mutator and accessor for the field @code{data.u4} of the @code{struct
epoll_event} entry at @var{index}.
@end defun


Here is a meaningless example showing the mechanics of the epoll @api{}:

@smallexample
(import (vicare)
  (prefix (vicare linux)
          linux.)
  (prefix (vicare posix)
          px.)
  (vicare platform constants)
  (vicare syntactic-extensions))

(let-values (((in ou) (px.pipe)))
  (unwind-protect
      (let ((epfd (linux.epoll-create)))
        (unwind-protect
            (let ((sizeof-struct (vector (linux.epoll-event-size))))
              (with-local-storage sizeof-struct
                (lambda (event)
                  (linux.epoll-event-set-events!  event 0 EPOLLIN)
                  (linux.epoll-event-set-data-fd! event 0 in)
                  (linux.epoll-ctl epfd EPOLL_CTL_ADD in event)))
              (px.write ou '#vu8(1))
              (with-local-storage sizeof-struct
                (lambda (events)
                  (linux.epoll-wait epfd events 1 -1)
                  (linux.epoll-event-ref-data-fd events 0) @result{} in
                  (linux.epoll-event-ref-events events 0)  @result{} EPOLLIN
                  ))))
          (px.close epfd)))
    (px.close in)
    (px.close ou))
@end smallexample

@c page
@node linux signalfd
@section Accepting signals through file descriptors


The @code{signalfd} @api{} transforms interprocess signals into file
descriptor events, this way we can code event loops using @func{select}
or @func{epoll} and a uniform interface for signal and input/output
events.  For the full documentation see the @code{signalfd(2)} manual
page.  The following bindings are exported by the @library{vicare linux}
library.


@defun signalfd @var{fd} @var{mask} @var{flags}
Interface to the C function @cfunc{signalfd}.  Create a file descriptor
that can be used to accept interprocess signals.  If successful return a
fixnum representing the file descriptor, else raise an exception.

@var{fd} can be either a fixnum representing the file descriptor or
@code{-1} to request a new, unspecified, file descriptor; if @var{fd} is
the return value of a previous call to @func{signalfd}: this call
replaces the signal set previously specified.

@var{mask} must be a Scheme vector of fixnums representing the signal
numbers to be accepted.  Notice that these signals should have been
blocked.

@var{flags} can be the fixnum zero or an OR combination (@func{fxior})
of the constants: @code{SFD_CLOEXEC}, @code{SFD_NONBLOCK}.
@end defun


@defun read-signalfd-siginfo @var{fd}
Attempt to read from the file descriptor @var{fd} a single instance of
@code{struct signalfd_siginfo}: if successful return the result as an
instance of @code{struct-signalfd-siginfo}; if no signal is pending, and
@var{fd} is non--blocking, return @false{}; if an error occurs raise an
exception.
@end defun


@deftp {Struct Type} struct-signalfd-siginfo
Structure type mirroring the C language @code{struct signalfd_siginfo}.
It has the following fields:

@example
ssi_signo       ssi_errno       ssi_code
ssi_pid         ssi_uid         ssi_fd
ssi_tid         ssi_band        ssi_overrun
ssi_trapno      ssi_status      ssi_int
ssi_ptr         ssi_utime       ssi_stime
ssi_addr
@end example
@end deftp


@deftp make-struct-signalfd-siginfo @var{signo} @var{errno} @var{code} @var{pid} @var{uid} @var{fd} @var{tid} @var{band} @var{overrun} @var{trapno} @var{status} @var{int} @var{ptr} @var{utime} @var{stime} @var{addr}
Build and return a new instance of @code{struct-signalfd-siginfo}.
@end deftp


@defun struct-signalfd-siginfo? @var{obj}
Return @true{} if @var{obj} is an instance of
@code{struct-signalfd-siginfo}, else return @false{}.
@end defun


@defun struct-signalfd-siginfo-ssi_signo @var{info}
@defunx struct-signalfd-siginfo-ssi_errno @var{info}
@defunx struct-signalfd-siginfo-ssi_code @var{info}
@defunx struct-signalfd-siginfo-ssi_pid @var{info}
@defunx struct-signalfd-siginfo-ssi_uid @var{info}
@defunx struct-signalfd-siginfo-ssi_fd @var{info}
@defunx struct-signalfd-siginfo-ssi_tid @var{info}
@defunx struct-signalfd-siginfo-ssi_band @var{info}
@defunx struct-signalfd-siginfo-ssi_overrun @var{info}
@defunx struct-signalfd-siginfo-ssi_trapno @var{info}
@defunx struct-signalfd-siginfo-ssi_status @var{info}
@defunx struct-signalfd-siginfo-ssi_int @var{info}
@defunx struct-signalfd-siginfo-ssi_ptr @var{info}
@defunx struct-signalfd-siginfo-ssi_utime @var{info}
@defunx struct-signalfd-siginfo-ssi_stime @var{info}
@defunx struct-signalfd-siginfo-ssi_addr @var{info}
Accessors for the fields of a @code{struct-signalfd-siginfo}.
@end defun

In the following examples we use @func{signal-bub-init}, from
@library{vicare posix}, to block all the signals.  Let's say no signal
is pending:

@example
#!r6rs
(import (vicare)
  (prefix (vicare linux) lx.)
  (prefix (vicare posix) px.)
  (vicare platform constants))

(px.signal-bub-init)
(let* ((mask  (vector SIGUSR1 SIGUSR2)
       (flags (fxior SFD_CLOEXEC SFD_NONBLOCK)))
       (fd    (lx.signalfd -1 mask flags)))
  (lx.read-signalfd-siginfo fd))
@result{} #f
@end example

@noindent
now we raise a single signal:

@example
#!r6rs
(import (vicare)
  (prefix (vicare linux) lx.)
  (prefix (vicare posix) px.)
  (vicare platform constants))

(px.signal-bub-init)
(let* ((mask  (vector SIGUSR1 SIGUSR2)
       (flags (fxior SFD_CLOEXEC SFD_NONBLOCK)))
       (fd    (lx.signalfd -1 mask flags)))
  (px.raise SIGUSR1)
  (let ((info (lx.read-signalfd-siginfo fd))
        (done (lx.read-signalfd-siginfo fd)))

    (lx.struct-signalfd-siginfo-ssi_signo info)
    @result{} SIGUSR1

    done))
@result{} @false{}
@end example

@noindent
now we raise two signals:

@example
#!r6rs
(import (vicare)
  (prefix (vicare linux) lx.)
  (prefix (vicare posix) px.)
  (vicare platform constants))

(px.signal-bub-init)
(let* ((mask  (vector SIGUSR1 SIGUSR2)
       (flags (fxior SFD_CLOEXEC SFD_NONBLOCK)))
       (fd    (lx.signalfd -1 mask flags)))
  (px.raise SIGUSR1)
  (px.raise SIGUSR2)
  (let ((info1 (lx.read-signalfd-siginfo fd))
        (info2 (lx.read-signalfd-siginfo fd))
        (done  (lx.read-signalfd-siginfo fd)))
    (lx.struct-signalfd-siginfo-ssi_signo info1)
    @result{} SIGUSR1

    (lx.struct-signalfd-siginfo-ssi_signo info2)
    @result{} SIGUSR2

    done))
@result{} #f
@end example

@c page
@node linux timerfd
@section Timer expiration handling through file descriptors


The @code{timerfd} @api{} transforms timer expiration events into file
descriptor events, this way we can code event loops using @func{select}
or @func{epoll} and a uniform interface for timer and input/output
events.  For the full documentation see the following manual pages:
@code{timerfd_create(2)}, @code{timerfd_settime(2)},
@code{timerfd_gettime(2)}.

@menu
* linux timerfd intro::         Introduction to the @code{timerfd} @api{}.
* linux timerfd api::           The @code{timerfd} @api{}.
* linux timerfd examples::      Usage examples of the @code{timerfd} @api{}.
@end menu

@c page
@node linux timerfd intro
@subsection Introduction to the @code{timerfd} @api{}


The @code{timerfd} @api{} allows the definition of time--periodic events
by specification of two time intervals:

@enumerate
@item
Initial expiration: how much time before the first event.

@item
Period: how much time between two time--adjacent events.
@end enumerate

@example
    time before the
    first event       period      period      period
   |               |           |           |           |
---+---------------+-----------+-----------+-----------+----
   ^               ^           ^           ^           ^
  now          1st event   2nd event   3rd event   4th event
@end example

Each timer can be started, stopped, reconfigured and queried for how
much time until the next event.

@c page
@node linux timerfd api
@subsection The @code{timerfd} @api{}


The following bindings are exported by @library{vicare posix} and
reexported by @library{vicare linux}:

@example
make-struct-timespec           struct-timespec?
struct-timespec-tv_sec         struct-timespec-tv_nsec
set-struct-timespec-tv_sec!    set-struct-timespec-tv_nsec!

make-struct-itimerspec         struct-itimerspec?
struct-itimerspec-it_interval  struct-itimerspec-it_value
set-struct-itimerspec-it_interval!
set-struct-itimerspec-it_value!
@end example

The following bindings are exported by the @library{vicare linux}
library.


@defun timerfd-create @var{clockid}
@defunx timerfd-create @var{clockid} @var{flags}
Interface to the C function @cfunc{timerfd_create}.  Create a new timer
object and a file descriptor that refers to that timer; if successful
return a fixnum representing the file descriptor, else raise an
exception.

@var{clockid} must be one among: @code{CLOCK_REALTIME},
@code{CLOCK_MONOTONIC}.  @var{flags} can be either the fixnum zero or a
bitwise OR combination of: @code{TFD_CLOEXEC}, @code{TFD_NONBLOCK}; when
not given: it defaults to the fixnum zero.
@end defun


@defun timerfd-settime @var{fd} @var{flags} @var{new}
@defunx timerfd-settime @var{fd} @var{flags} @var{new} @var{old}
Interface to the C function @cfunc{timerfd_settime}.  Start or stop the
timer referred to by the file descriptor @var{fd}.  If successful return
@var{old} or @false{} when @var{old} is not given; if an error occurs
raise an exception.

@var{flags} can be either the fixnum zero or @code{TFD_TIMER_ABSTIME}.
@var{new} must be a valid instance of @code{struct-itimerspec}, which is
used to set the timer.  The optional @var{old} can be @false{} or a
valid instance of @code{struct-itimerspec}; when given: it is filled
with the old timer specification.
@end defun


@defun timerfd-gettime @var{fd}
@defunx timerfd-gettime @var{fd} @var{curr}
Interface to the C function @cfunc{timerfd_gettime}.  Retrieve the
current timer specification associated to the file descriptor @var{fd}.
If successful return @var{curr} or a newly built instance of
@code{struct-itimerspec}; if an error occurs: raise an exception.

The optional @var{curr} must be a valid instance of
@code{struct-itimerspec}, when not given a new instance of this
structure type is internally built: it is filled with the current timer
specification.
@end defun


@defun timerfd-read @var{fd}
Perform a @cfunc{read} operation on @var{fd}, which must be a file
descriptor associated to a timer.  The function behaves as follows:

@itemize
@item
If the operation is successful: return the number of timer expirations
occurred since the timer was set or the last successful @cfunc{read}.

@item
if the operation fails with code @code{EWOULDBLOCK}: the return value is
zero.

@item
Else an exception is raised.
@end itemize
@end defun

@c page
@node linux timerfd examples
@subsection Usage examples of the @code{timerfd} @api{}


The following program watches a timer as time goes by:

@example
#!r6rs
(import (vicare)
  (vicare platform constants)
  (only (vicare syntactic-extensions)
        unwind-protect)
  (prefix (vicare posix) px.)
  (prefix (vicare linux) lx.))

(set-port-buffer-mode! (current-output-port)
                       (buffer-mode none))

(define (%print-remaining-time fd)
  (pretty-print (lx.struct-itimerspec-it_value
                 (lx.timerfd-gettime fd))))

(define (%sleep-one-second)
  (px.nanosleep 1 0))

(let ((fd (lx.timerfd-create CLOCK_REALTIME)))
  (unwind-protect
      (let ( ;; one event every 3 seconds
            (period (lx.make-struct-timespec 3 0))
            ;; the first event after 1 nanosecond
            (offset (lx.make-struct-timespec 0 1)))
        (lx.timerfd-settime fd 0
           (lx.make-struct-itimerspec period offset))
        (do ((i 0 (fx+ 1 i)))
            ((fx= i 6))
          (%print-remaining-time fd)
          (%sleep-one-second))
        #f)
    (px.close fd)))
@end example

@noindent
the output is:

@example
#["struct-timespec" tv_sec=2 tv_nsec=999911022]
#["struct-timespec" tv_sec=1 tv_nsec=999307638]
#["struct-timespec" tv_sec=0 tv_nsec=998303788]
#["struct-timespec" tv_sec=2 tv_nsec=997338092]
#["struct-timespec" tv_sec=1 tv_nsec=996393490]
#["struct-timespec" tv_sec=0 tv_nsec=995418649]
@end example

The following example prints the number of timer expirations:

@example
#!r6rs
(import (vicare)
  (vicare platform constants)
  (only (vicare syntactic-extensions)
        unwind-protect)
  (prefix (vicare posix) px.)
  (prefix (vicare linux) lx.))

(set-port-buffer-mode! (current-output-port)
                       (buffer-mode none))
(define fd
  (lx.timerfd-create CLOCK_REALTIME TFD_NONBLOCK))
(unwind-protect
    (begin
      ;; 0.3 seconds = 300 ms = 300,000 us = 300,000,000 ns
      (define nsecs  300000000)
;;;                 9876543210
      (lx.timerfd-settime fd 0
        (lx.make-struct-itimerspec
         ;; one event every 0.3 seconds
         (lx.make-struct-timespec 0 nsecs)
         ;; the first event after 1 nanosecond
         (lx.make-struct-timespec 0 1)))
      (printf "right after starting timer: ~a\n"
        (lx.timerfd-read fd))
      (px.nanosleep 1 0)
      (printf "after 1 second: ~a\n"
        (lx.timerfd-read fd))
      (px.nanosleep 0 nsecs)
      (printf "after 0.3 seconds: ~a\n"
        (lx.timerfd-read fd)))
  (px.close fd))
@end example

@noindent
the output is:

@example
right after starting timer: 1
after 1 second: 3
after 0.3 seconds: 1
@end example

@noindent
we notice that right after starting the timer: the number of expirations
is @math{1} because the timer starts @math{1} nanosecond after the call
to @func{timerfd-settime}, which is almost immediately.

@c page
@node linux inotify
@section Monitoring file system events


The @code{inotify} @api{} allows us to monitor file system events; for
an overview of the @api{} we must refer to the @code{inotify(7)} manual
page.


@deftp {Struct Type} struct-inotify-event
Scheme level representation of the C language type @code{struct
inotify-event}, see the @code{inotify(7)} manual page.  It has the
following fields:

@table @code
@item wd
An exact integer in the range of the C language type @code{int}.

@item mask
An exact integer in the range of the C language type @code{uint32_t}.

@item cookie
An exact integer in the range of the C language type @code{uint32_t}.

@item len
An exact integer in the range of the C language type @code{uint32_t}.
Zero or the number of bytes in the pathname represented by the
@code{name} field.

@item name
A bytevector representing a file system pathname or @false{}.
@end table
@end deftp


@defun make-struct-inotify-event
@defunx make-struct-inotify-event @var{wd} @var{mask} @var{cookie} @var{len} @var{name}
Build and return a new instance of @code{struct-inotify-event}.  When no
arguments are given: all the fields are set to the fixnum zero, but the
field @var{name} which is set to @false{}.
@end defun


@defun struct-inotify-event? @var{obj}
Return @true{} if @var{obj} is an instance of
@code{struct-inotify-event}.
@end defun


@defun struct-inotify-event-wd @var{iev}
@defunx struct-inotify-event-mask @var{iev}
@defunx struct-inotify-event-cookie @var{iev}
@defunx struct-inotify-event-len @var{iev}
@defunx struct-inotify-event-name @var{iev}
Accessors for the fields of @code{struct-inotify-event}.
@end defun


@defun set-struct-inotify-event-wd! @var{iev} @var{value}
@defunx set-struct-inotify-event-mask! @var{iev} @var{value}
@defunx set-struct-inotify-event-cookie! @var{iev} @var{value}
@defunx set-struct-inotify-event-len! @var{iev} @var{value}
@defunx set-struct-inotify-event-name! @var{iev} @var{value}
Mutators for the fields of @code{struct-inotify-event}.
@end defun


@defun inotify-init
Interface to the C function @cfunc{inotify_init}, see the manual page
@code{inotify_init(2)}.  Initialise a new @code{inotify} instance; if
successful return a file descriptor associated to a new event queue,
else raise an exception.
@end defun


@defun inotify-init1 @var{flags}
Interface to the C function @cfunc{inotify_init1}, see the manual page
@code{inotify_init1(2)}.  Initialise a new @code{inotify} instance; if
successful return a file descriptor associated to a new event queue,
else raise an exception.

@var{flags} must be a fixnum representing the bitwise inclusive OR
combination of @code{IN_NONBLOCK} and @code{IN_CLOEXEC}.
@end defun


@defun inotify-add-watch @var{fd} @var{pathname} @var{mask}
Interface to the C function @cfunc{inotify_add_watch}, see the manual
page @code{inotify_add_watch(2)}.  Add a watch to an initialised
@code{inotify} instance; if successful return an exact integer
representing watch descriptor, else raise an exception.

@var{fd} must be a finxum representing the file descriptor associated to
the @code{inotify} instance.  @var{pathname} must be a Scheme string or
bytevector representing the pathname to watch.  @var{mask} must be an
exact integer in the range of the C language type @code{uint32_t}
representing the watch mask.
@end defun


@defun inotify-rm-watch @var{fd} @var{wd}
Interface to the C function @cfunc{inotify_rm_watch}, see the manual
page @code{inotify_rm_watch(2)}.  Remove an existing watch from an
@code{inotify} instance; if successful return unspecified values, else
raise an exception.

@var{fd} must be a fixnum representing the file descriptor associated to
the @code{inotify} instance.  @var{wd} must be an exact integer in the
range of the C language type @code{int} representing the watch
descriptor.
@end defun


The following meaningless example shows how to watch for a modification
event on a file:

@example
#!r6rs
(import (vicare)
  (prefix (vicare linux) lx.)
  (prefix (vicare posix) px.)
  (vicare platform constants)
  (vicare syntactic-extensions))

(let* ((infd     (lx.inotify-init))
       (pathname "inotify.test")
       (fd       (px.open pathname
                          (fxior O_CREAT O_EXCL O_RDWR)
                          (fxior S_IRUSR S_IWUSR))))
  (unwind-protect
       (let ((wd (lx.inotify-add-watch infd pathname
                                       IN_MODIFY)))
         (unwind-protect
              (begin
                (px.write fd #vu8(1 2 3))
                ;; let the event happen
                (px.select-fd infd 1 0)
                (let ((ev (lx.inotify-read infd)))
                  (lx.struct-inotify-event? ev)
                  @result{} #t
                  (= wd (lx.struct-inotify-event-wd ev))
                  @result{} #t
                  (lx.struct-inotify-event-len ev)
                  @result{} 0
                  (lx.struct-inotify-event-name ev)
                  @result{} #f
                  ))
              (lx.inotify-rm-watch infd wd)))
     (px.close fd)
     (delete-file pathname)))
@end example

@c end of file
