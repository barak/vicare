@node uri ip
@section Generic @ip{} addresses


@cindex @library{nausicaa uri ip}, library
@cindex Library @library{nausicaa uri ip}


The library @library{nausicaa uri ip} exports facilities to handle
generic @ip{} addresses specifications.

@menu
* uri ip methods::              Multimethods for @ip{} address objects.
* uri ip base::                 Base @ip{} address objects.
* uri ip numeric::              Numeric @ip{} address objects.
* uri ip v4::                   IPv4 address objects.
* uri ip v6::                   IPv6 address objects.
* uri ip name::                 Registered name @ip{} address objects.
* uri ip future::               Future versions of @ip{} address
                                objects.
* uri ip misc::                 Miscellaneous definitions.
@end menu

@c page
@node uri ip methods
@subsection Multimethods for @ip{} address objects


The following bindings are exported by the library @library{nausicaa uri
ip}.


@deffn Multimethod ip-address->string @var{ip-address}
Given as argument an object type subclassed from @class{ip-address}
build and return a string representation as defined by @rfc{} 3986;
every character in the string can be directly converted to an @ascii{}
encoded character, some sequences of characters may represent a
percent--encoded character.

Notice that some subclasses of @class{ip-address} have string
representation that is @strong{invalid} as percent--encoded string as
defined by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bytevector @var{ip-address}
Given as argument an object type subclassed from @class{ip-address}
build and return a bytevector representation as defined by @rfc{} 3986;
every octet in the bytevector represents an @ascii{} encoded character,
some sequences of octets may represent a percent--encoded character.

Notice that some subclasses of @class{ip-address} have bytevector
representation that is @strong{invalid} as percent--encoded bytevector
as defined by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bignum @var{ip-address}
Given as argument an object type subclassed from
@class{ip-numeric-address} build and return an exact integer
representation.
@end deffn

@c page
@node uri ip base
@subsection Generic @ip{} address objects


The following bindings are exported by the library @library{nausicaa uri
ip}.


@deftp {Abstract Class} @aclass{ip-address}
Base class for all the address types representing @ip{} addresses.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Super constructor} @aclass{ip-address} constructor
@defopx {Super constructor} @aclass{ip-address} constructor @var{option} @dots{}
Supertype constructor for types derived from @class{ip-address}.  When
called with some arguments it supports the following keyword values:

@table @asis
@item @keyword{string-rep} @var{obj}
The argument @var{obj} must be @false{} or a string object
representation of the address as defined by @rfc{} 3986.

@item @keyword{bytevector-rep} @var{obj}
The argument @var{obj} must be @false{} or a bytevector object
representation of the address as defined by @rfc{} 3986.
@end table
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{ip-address} @aclass{ascii-string} string
String object representation of the address.  It must represent the
address string as defined by @rfc{} 3986; every character in the string
can be directly converted to an @ascii{} encoded character, some
sequences of characters may represent a percent--encoded character.

The value of this field is set by the constructor with the keyword
@keyword{string-rep} or computed by the multimethod
@func{ip-address->string} and memoized in the object.

Notice that some subclasses of @class{ip-address} have string
representation that is @strong{invalid} as percent--encoded string as
defined by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ip-address} @aclass{ascii-bytevector} bytevector
Bytevector object representation of the address as defined by @rfc{}
3986; every octet in the bytevector represents an @ascii{} encoded
character, some sequences of octets may represent a percent--encoded
character.

The value of this field is set by the constructor with the keyword
@keyword{bytevector-rep} or computed by the multimethod
@func{ip-address->bytevector} and memoized in the object.

Notice that some subclasses of @class{ip-address} have bytevector
representation that is @strong{invalid} as percent--encoded bytevector
as defined by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->bytevector @{@var{addr} @aclass{ip-address}@}
Build and return a bytevector representation of the address from its
string representation; raise an error if a string representation cannot
be built.  Expect all the characters in the field @code{string} of
@var{addr} to be directly convertible to the corresponding @ascii{}
encoding.
@end deffn

@c page
@node uri ip numeric
@subsection Numeric @ip{} address objects


The following bindings are exported by the library @library{nausicaa uri
ip}.


@deftp {Abstract Class} @aclass{ip-numeric-address}
Base class for all the address types representing numeric @ip{}
addresses.  It is derived from @class{ip-address}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Super constructor} @aclass{ip-numeric-address} constructor
@defopx {Super constructor} @aclass{ip-numeric-address} constructor @var{option} @dots{}
Supertype constructor for types derived from @class{ip-numeric-address}.
When called with some arguments it supports the following keyword
values:

@table @asis
@item @keyword{bignum-rep} @var{obj}
The argument @var{obj} must be @false{} or an exact integer
representation of the address.
@end table

@noindent
all the other values are handed to the constructor of
@class{ip-address}.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{ip-numeric-address} @aclass{exact-integer} bignum
Exact integer object representation of the address.  The value of this
field is set by the constructor or computed by the multimethod
@func{ip-address->bignum} and it is memoized in the object.
@end deftypecv

@c page
@node uri ip v4
@subsection Ipv4 address objects


The library @library{nausicaa uri ip} exports utilities to handle IPv4
addresses specifications, according to @rfc{} 5735.  To parse the string
representation of IPv4 addresses we can use the library
@library{nausicaa parser-tools ipv4-addresses}.

@menu
* uri ip v4 address::           IPv4 address objects class.
* uri ip v4 prefix::            IPv4 address prefix objects class.
* uri ip v4 aux::               IPv4 address auxiliary classes.
@end menu

@c page
@node uri ip v4 address
@subsubsection IPv4 address objects class


The following bindings are exported by the library @library{nausicaa uri
ip}.


@deftp Class @aclass{ipv4-address}
Represents an IPv4 address.  It is derived from
@class{ip-numeric-address} as defined by @library{nausicaa uri ip},
@ref{uri ip numeric, Numeric @ip{} address object}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv4-address} constructor @var{numbers}
@defopx {Common constructor} @aclass{ipv4-address} constructor @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv4-address}.  When
applied to a single argument: @var{numbers} must be a vector of @math{4}
fixnums in the range @math{[0, 255]}.  When applied to @math{4}
arguments: each one must be a fixnum in the range @math{[0, 255]}.
@end defop


@defop Maker @aclass{ipv4-address} @aclass{ipv4-address} (@meta{numbers})
@defopx Maker @aclass{ipv4-address} @aclass{ipv4-address} (@meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv4-address} using the
common constructor.

@example
(<ipv4-address> O
  (<> ((parse-ipv4-address-only "1.2.3.4"))))

(list (O third) (O second) (O first) (O zeroth))
@result{} (1 2 3 4)
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv4-address} @aclass{ipv4-address-fixnum} third
The numeric components of the address, each representing @math{8} bits.
@code{zeroth} is the rightmost component, @code{first} is the second
from the right, etc.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} private?
True if the address' prefix is @code{10.0.0.0/8} or @code{172.16.0.0/12}
or @code{192.168.0.0/16}.  See Section 3 ``Global and Other Specialized
Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} loopback?
True if the address' prefix is @code{127.0.0.0/8}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} localhost?
True if the address is @code{127.0.0.1}.  See Section 3 ``Global and
Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} link-local?
True if the address' prefix is @code{169.254.0.0/16}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} reserved?
True if the address' prefix is @code{192.0.0.0/24} or
@code{240.0.0.0/4}.  See Section 3 ``Global and Other Specialized
Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} test-net-1?
True if the address' prefix is @code{192.0.2.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} six-to-four-relay-anycast?
True if the address' prefix is @code{192.88.99.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} benchmark-tests?
True if the address' prefix is @code{198.18.0.0/15}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} test-net-2?
True if the address' prefix is @code{198.51.100.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} test-net-3?
True if the address' prefix is @code{203.0.113.0/24}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} multicast?
True if the address' prefix is @code{224.0.0.0/4}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address} @aclass{boolean} limited-broadcast?
True if the address prefix is @code{255.255.255.255}.  See Section 3
``Global and Other Specialized Address Blocks'' of @rfc{} 5735.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->string @{@var{addr} @aclass{ipv4-address}@}
Build and return a string representation of the address in the format
specified for @uri{}s by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bytevector @{@var{addr} @aclass{ipv4-address}@}
Build and return a bytevector representation of the address in the
format specified for @uri{}s by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bignum @{@var{addr} @aclass{ipv4-address}@}
Build and return an exact integer representation of the address.
@end deffn

@c page
@node uri ip v4 prefix
@subsubsection IPv4 address prefix objects class


The following bindings are exported by the library @library{nausicaa uri
ip}.


@deftp Class @aclass{ipv4-address-prefix}
Represents an IPv4 address prefix.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv4-address-prefix} constructor @var{prefix-length} @var{numbers}
@defopx {Common constructor} @aclass{ipv4-address-prefix} constructor @var{prefix-length} @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv4-address-prefix}.

When called with 2 arguments: @var{prefix-length} must be a
non--negative fixnum specifying how many of the leftmost contiguous bits
of the address comprise the prefix; @var{numbers} must be a vector of
@math{4} fixnums in the range @math{[0, 255]}; .

When called with 5 arguments: @var{prefix-length} must be a
non--negative fixnum specifying how many of the leftmost contiguous bits
of the address comprise the prefix; each of the other arguments must be
a fixnum in the range @math{[0, 255]}.
@end defop


@defop Maker @aclass{ipv4-address-prefix} @aclass{ipv4-address-prefix} (@meta{prefix-length} @meta{numbers})
@defopx Maker @aclass{ipv4-address-prefix} @aclass{ipv4-address-prefix} (@meta{prefix-length} @meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv4-address-prefix} using
the common constructor.

@example
(<ipv4-address-prefix> O
  (receive (numbers len)
      (parse-ipv4-address-prefix "1.2.3.4/8")
    (<ipv4-address-prefix> (len numbers))))

(list (O third) (O second) (O first) (O zeroth))
@result{} (1 2 3 4)

(O prefix-length)
@result{} 8

(O string)
@result{} "1.2.3.4/8"
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-fixnum} third
The numeric components of the address prefix, each representing @math{8}
bits.  @code{zeroth} is the rightmost component, @code{first} is the
second from the right, etc.
@end deftypecv


@deftypecv {Immutable Field} @aclass{ipv4-address-prefix} @aclass{ipv4-address-prefix-length} prefix-length
A fixnum specifying how many of the leftmost contiguous bits of the
address comprise the prefix.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address-prefix} @aclass{string} string
The string representation of the address prefix.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv4-address-prefix} @aclass{ascii-bytevector} bytevector
The bytevector representation of the address prefix, in @ascii{}
encoding.
@end deftypecv

@c page
@node uri ip v4 aux
@subsubsection IPv4 address auxiliary classes


The following bindings are exported by the library @library{nausicaa uri
ip}.


@deftp Label @aclass{ipv4-address-fixnum}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @math{[0, 255]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp


@deftp Label @aclass{vector-of-ipv4-address-fixnums}
Label type whose predicate tests that the object is a vector of @math{4}
items all being of type @class{ipv4-address-fixnum}.  It is derived from
@class{vector} as defined by @library{nausicaa language builtins},
@ref{builtins vectors, Vector type}.
@end deftp


@deftp Label @aclass{ipv4-address-prefix-length}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @math{[0, 32]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp

@c page
@node uri ip v6
@subsection IPv6 address objects


The library @library{nausicaa uri ip} exports utilities to handle IPv6
addresses specifications, according to @rfc{} 4291.  To parse the string
representation of IPv4 addresses we can use the library
@library{nausicaa parser-tools ipv6-addresses}.

@menu
* uri ip v6 address::  IPv6 address objects class.
* uri ip v6 prefix::   IPv6 address prefix objects class.
* uri ip v6 aux::      IPv6 address auxiliary classes.
@end menu

@c page
@node uri ip v6 address
@subsubsection IPv6 address objects class


The following bindings are exported by the @library{nausicaa uri ip}
library.


@deftp Class @aclass{ipv6-address}
Represents an IPv6 address.  It is derived from
@class{ip-numeric-address} as defined by @library{nausicaa uri ip},
@ref{uri ip numeric, Numeric @ip{} address object}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv6-address} constructor @var{numbers}
@defopx {Common constructor} @aclass{ipv6-address} constructor @var{seventh} @var{sixth} @var{fifth} @var{fourth} @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv6-address}.  When
applied to a single argument: @var{numbers} must be a vector of @math{8}
fixnums in the range @code{[0, #xFFFF]} representing the address
components.  When applied to @math{8} arguments: each must be a fixnum
in the range @code{[0, #xFFFF]} representing an address component.
@end defop


@defop Maker @aclass{ipv6-address} @aclass{ipv6-address} (@meta{numbers})
@defopx Maker @aclass{ipv6-address} @aclass{ipv6-address} (@meta{seventh} @meta{sixth} @meta{fifth} @meta{fourth} @meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv6-address} using the
common constructor.

@example
(<ipv6-address> O
  (<> (1 2 3 4 5 6 7 8)))

(list (O third) (O second) (O first) (O zeroth))
@result{} (5 6 7 8)
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} third
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} fourth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} fifth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} sixth
@deftypecvx {Immutable field} @aclass{ipv6-address} @aclass{ipv6-address-fixnum} seventh
The numeric components of the address, each representing @math{16} bits.
@code{zeroth} is the rightmost component, @code{first} is the second
from the right, etc.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} unspecified?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} loopback?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} multicast?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} link-local-unicast?
@deftypecvx {Immutable virtual field} @aclass{ipv6-address} @aclass{boolean} global-unicast?
True if the address has type, respectively: unspecified, loopback,
multicast, link--local unicast, global unicast.  See Section 2.4
``Address Type Identification'' of @rfc{} 4291.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->string @{@var{addr} @aclass{ipv6-address}@}
Build and return a string representation of the address in the format
specified for @uri{}s by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bytevector @{@var{addr} @aclass{ipv6-address}@}
Build and return a bytevector representation of the address in the
format specified for @uri{}s by @rfc{} 3986.
@end deffn


@deffn Multimethod ip-address->bignum @{@var{addr} @aclass{ipv6-address}@}
Build and return an exact integer representation of the address.
@end deffn

@c page
@node uri ip v6 prefix
@subsubsection IPv6 address prefix objects class


The following bindings are exported by the @library{nausicaa uri ip}
library.


@deftp Class @aclass{ipv6-address-prefix}
Represents an IPv6 address prefix.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipv6-address-prefix} constructor @var{prefix-length} @var{numbers}
@defopx {Common constructor} @aclass{ipv6-address-prefix} constructor @var{prefix-length} @var{seventh} @var{sixth} @var{fifth} @var{fourth} @var{third} @var{second} @var{first} @var{zeroth}
Build and return a new object of type @class{ipv6-address-prefix}.

When called with two arguments: @var{prefix-length} must be a
non--negative fixnum specifying how many of the leftmost contiguous bits
of the address comprise the prefix; @var{numbers} must be a vector of
@math{8} fixnums in the range @code{[0, #xFFFF]} representing the
address components.

When called with 9 arguments: @var{prefix-length} must be a
non--negative fixnum specifying how many of the leftmost contiguous bits
of the address comprise the prefix; each of the other arguments must be
a fixnum in the range @code{[0, #xFFFF]} representing an address
component.
@end defop


@defop Maker @aclass{ipv6-address-prefix} @aclass{ipv6-address-prefix} (@meta{prefix-length} @meta{numbers})
@defopx Maker @aclass{ipv6-address-prefix} @aclass{ipv6-address} (@meta{prefix-length} @meta{seventh} @meta{sixth} @meta{fifth} @meta{fourth} @meta{third} @meta{second} @meta{first} @meta{zeroth})
Build and return a new object of type @class{ipv6-address-prefix} using
the common constructor.

@example
(<ipv6-address-prefix> O
  (<> (10 '#(1 2 3 4 5 6 7 8))))

(list (O third) (O second) (O first) (O zeroth))
@result{} (5 6 7 8)

(O prefix-length)
@result{} 10

(O string)
@result{} "1:2:3:4:0:0:0:0/50"
@end example
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-prefix-length} prefix-length
A number specifying how many of the leftmost contiguous bits of the
address comprise the prefix.
@end deftypecv


@deftypecv {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} zeroth
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} first
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} second
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} third
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} fourth
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} fifth
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} sixth
@deftypecvx {Immutable field} @aclass{ipv6-address-prefix} @aclass{ipv6-address-fixnum} seventh
The numeric components of the address prefix, each representing
@math{16} bits.  @code{zeroth} is the rightmost component, @code{first}
is the second from the right, etc.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address-prefix} @aclass{string} string
The string representation of the address prefix.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{ipv6-address-prefix} @aclass{ascii-bytevector} bytevector
The bytevector representation of the address prefix, in @ascii{}
encoding.
@end deftypecv

@c page
@node uri ip v6 aux
@subsubsection IPv6 address auxiliary classes


The following bindings are exported by the library @library{nausicaa uri
ip}.


@deftp Label @aclass{ipv6-address-fixnum}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @code{[0, #xFFFF]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp


@deftp Label @aclass{vector-of-ipv6-address-fixnums}
Label type whose predicate tests that the object is a vector of @math{8}
items all being of type @class{ipv6-address-fixnum}.  It is derived from
@class{vector} as defined by @library{nausicaa language builtins},
@ref{builtins vectors, Vector type}.
@end deftp


@deftp Label @aclass{ipv6-address-prefix-length}
Label type whose predicate tests that the object is a non--negative
fixnum in the range @math{[0, 128]}.  It is derived from
@class{nonnegative-fixnum} as defined by @library{nausicaa language
builtins}, @ref{builtins numbers fixnum, Fixnum number objects}.
@end deftp

@c page
@node uri ip name
@subsection Registered name @ip{} address objects


The following bindings are exported by the library @library{nausicaa uri
ip}.


@deftp {Abstract Class} @aclass{reg-name-address}
Type of @ip{} address representations as ``registered name''.  It is
derived from @class{ip-address}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{reg-name-address} constructor @var{address}
Common constructor for objects of type @class{reg-name-address}.  The
argument @var{address} must be a bytevector object representation of the
address; it must represent a string in percent--encoding as defined by
@rfc{} 3986.
@end defop


@defop Maker @aclass{reg-name-address} @aclass{reg-name-address} (@meta{address})
Build and return a new instance of @class{reg-name-address} using the
common constructor.
@end defop

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->string @{@var{addr} @aclass{reg-name-address}@}
Objects of type @class{reg-name-address} have a percent--encoded
bytevector representation set by the constructor; this method uses that
to build a string representation.

Build and return a string representation of the address from its
percent--encoded representation; the returned object still represents a
percent--encoded string.
@end deffn

@c page
@node uri ip future
@subsection Future versions of @ip{} address objects


@rfc{} 3986 defines a syntax to specify future versions of address
literals, beyond the one for registered names and numeric IPv4 and IPv6;
the class @class{ipvfuture-address} is a container to represent such
address representations.

@example
#!vicare
(import (nausicaa)
  (prefix (nausicaa uri ip) ip.))

(ip.<ipvfuture-address> O
  (<> (10 '#ve(ascii "ci%3Fa%3Do"))))

(O string)
@result{} "[vA.ci%3Fa%3Do]"

(O bytevector)
@result{} #ve(ascii "[vA.ci%3Fa%3Do]")

(O version-flag)        @result{} 10
(O literal)             @result{} #ve(ascii "ci%3Fa%3Do")
@end example

The following bindings are exported by the library @library{nausicaa uri
ip}.


@deftp {Abstract Class} @aclass{ipvfuture-address}
Type for future versions of @ip{} address literals.  It is derived from
@class{ip-address}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Common constructor} @aclass{ipvfuture-address} constructor @var{version-flag} @var{address}
Common constructor for objects of type @class{ipvfuture-address}.
@var{version-flag} must be a fixnum in the range @math{[0, 15]}
representing the version number of the literal format, according to
@rfc{} 3986.  @var{address} must be a bytevector object representation
of the address as defined by @rfc{} 3986.
@end defop


@defop Maker @aclass{ipvfuture-address} @aclass{ipvfuture-address} (@meta{version-flag} @meta{address})
Build and return a new instance of @class{ipvfuture-address} using the
common constructor.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{ipvfuture-address} @aclass{ipvfuture-version-flag} version-flag
A fixnum in the range @math{[0, 15]} representing the version of the
literal format, according to @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable field} @aclass{ipvfuture-address} @aclass{ascii-bytevector} literal
A bytevector object representation of the address literal as defined by
@rfc{} 3986.  Every octet represents a character in @ascii{} encoding,
some sequences of octets may represent a percent--encoded character.

Notice that the bytevector representation of the literal is, in general,
@strong{invalid} as percent--encoded bytevector as defined by @rfc{}
3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Multimethod implementations


@deffn Multimethod ip-address->string @{@var{addr} @aclass{ipvfuture-address}@}
Build and return a string representation of the address in the format
specified for @uri{}s by @rfc{} 3986.  In general, the returned object
is @strong{not} a valid percent--encoded string.
@end deffn


@deffn Multimethod ip-address->bytevector @{@var{addr} @aclass{ipvfuture-address}@}
Build and return a bytevector representation of the address in the
format specified for @uri{}s by @rfc{} 3986.  In general, the returned
object is @strong{not} a valid percent--encoded bytevector.
@end deffn

@c page
@node uri ip misc
@subsection Miscellaneous definitions


The following bindings are exported by the library @library{nausicaa uri
ip}.


@deftp Label @aclass{ipvfuture-version-flag}
Type of exact integers representing version flags for future
representations of @ip{} addresses.  It is derived from @class{fixnum}.
The version flag must be in the range @math{[0, 15]}.
@end deftp


@defun make-host-object @var{type} @{@var{ascii} @aclass{bytevector}@} @var{data}
Build and return a new instance of a specialised object of class
@class{ip-address} representing the host component of a @uri{}.  The
possible classes of the returned object are: @class{reg-name-address},
@class{ipv4-address}, @class{ipv6-address}, @class{ipvfuture-address}.
As a special case if @var{host.type} is @false{}: the other arguments
are ignored and the return value is the value @code{unspecified} from
@library{nausicaa}.

@var{type} a symbol among: @code{reg-name}, @code{ipv4-address},
@code{ipv6-address}, @code{ipvfuture}.

@var{ascii} must be a bytevector representing the @ascii{}
representation of the host component.

@var{data} must be auxiliary data representing the host component:

@itemize
@item
For @code{reg-name}: @var{data} is undefined and unused.

@item
For @code{ipv4-address}: @var{data} must be a vector of @math{4} exact
integers representing the address components.

@item
For @code{ipv6-address}: @var{data} must be a vector of @math{8} exact
integers representing the address components.

@item
For @code{ipvfuture}: @var{data} must be an exact integer representing
the version number of the @ip{} address literal representation.
@end itemize

The arguments are modeled after the @math{3} return values of
@func{parse-host} from the library @library{nausicaa parser-tools uri}.
@end defun

@c page
@node uri uri
@section Uniform Resource Identifier objects


@cindex @library{nausicaa uri}, library
@cindex Library @library{nausicaa uri}


The library @library{nausicaa uri} exports utilities to handle Uniform
Resource Identifiers (@uri{}) specifications, according to @rfc{} 3986:
``Uniform Resource Identifier (@uri{}): Generic Syntax''.  The @rfc{}
defines @uri{}s as follows:

@quotation
A Uniform Resource Identifier (@uri{}) is a compact sequence of
characters that identifies an abstract or physical resource.
@end quotation

In the context of the Nausicaa libraries: the proper representation of a
@uri{} is the Scheme bytevector.  Such representation can be parsed to
produce objects of type @class{uri} or @class{relative-ref}; the @oopp{}
@api{} to @uri{} parsing and producing is really basic; this is because
advanced handling of @uri{}s should be merged with requirements of
specific @uri{} schemes, like @code{http:} and @code{file:}.

The library @library{nausicaa uri} reexports all the bindings from
@library{nausicaa uri ip}.  To parse a representation of @uri{}s we can
use the library @library{nausicaa parser-tools uri} and its
simplification trough the library @library{nausicaa parser-tools uri
utilities}.

@menu
* uri uri scheme::        @uri{} scheme objects.
* uri uri userinfo::      @uri{} userinfo objects.
* uri uri host::          @uri{} host objects.
* uri uri port-number::   @uri{} port-number objects.
* uri uri path::          @uri{} path objects.
* uri uri query::         @uri{} query objects.
* uri uri fragment::      @uri{} fragment objects.
* uri uri uri::           Uniform Resource Identifiers objects.
* uri uri ref::           Relative references objects.
@end menu

@c page
@node uri uri scheme
@subsection @uri{} scheme objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Label @aclass{scheme}
Label used to tag bytevectors representing the @code{scheme} component
of @uri{}s; it is derived from @class{nonempty-bytevector}.
@end deftp


@defop Constructor @aclass{scheme} constructor @var{obj}
Just return the given argument.  If tagged argument validation is
enabled: validate the argument with the predicate of @class{scheme}.
@end defop


@defop Maker @aclass{scheme} @aclass{scheme} (@meta{obj})
Filter the given argument using the label constructor.
@end defop


@defop Predicate @aclass{scheme} predicate @var{obj}
Return @true{} if @var{obj} is a non--empty bytevector in which every
octet can be interpreted as character in @ascii{} encoding and the
sequence of characters is valid for a @code{scheme} @uri{} component.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{scheme} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{scheme} component in the format
requested by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{scheme} @aclass{ascii-string} string
A string representing the @code{scheme} component in the format
requested by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{scheme} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{scheme}
component in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node uri uri userinfo
@subsection @uri{} userinfo objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Label @aclass{userinfo}
Label used to tag bytevectors representing the @code{userinfo} component
of @uri{}s; it is derived from @class{bytevector}.
@end deftp


@defop Constructor @aclass{userinfo} constructor @var{obj}
Just return the given argument.  If tagged argument validation is
enabled: validate the argument with the predicate of @class{userinfo}.
@end defop


@defop Maker @aclass{userinfo} @aclass{userinfo} (@meta{obj})
Filter the given argument using the label constructor.
@end defop


@defop Predicate @aclass{userinfo} predicate @var{obj}
Return @true{} if @var{obj} is a bytevector in which every octet can be
interpreted as character in @ascii{} encoding and the sequence of
characters is valid for a @code{userinfo} @uri{} component.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{userinfo} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{userinfo} component in the format
requested by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{userinfo} @aclass{ascii-string} string
A string representing the @code{userinfo} component in the format
requested by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{userinfo} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{userinfo}
component in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node uri uri host
@subsection @uri{} host objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Label @aclass{host}
Label used to tag bytevectors representing the @code{host} component of
@uri{}s; it is derived from @class{ip-address} defined by
@library{nausicaa uri ip}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{host} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{host} component
in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node uri uri port-number
@subsection @uri{} port--number objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Label @aclass{port-number}
Label used to tag fixnums representing the @code{port-number} component
of @uri{}s; it is derived from @class{nonnegative-fixnum}.
@end deftp


@defop Constructor @aclass{port-number} constructor @var{obj}
Just return the given argument.  If tagged argument validation is
enabled: validate the argument with the predicate of
@class{port-number}.
@end defop


@defop Maker @aclass{port-number} @aclass{port-number} (@meta{obj})
Filter the given argument using the label constructor.
@end defop


@defop Predicate @aclass{port-number} predicate @var{obj}
Return @true{} if @var{obj} is a non--negative fixnum in the range
@math{[0, 65535]}.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{port-number} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{port-number} component in the format
requested by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{port-number} @aclass{ascii-string} string
A string representing the @code{port-number} component in the format
requested by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{port-number} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{port-number}
component in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node uri uri path
@subsection @uri{} path objects


@menu
* uri uri segment::       @uri{} segment objects.
* uri uri listseg::       @uri{} list of segment objects.
* uri uri path base::     Base @uri{} path objects.
* uri uri path-empty::    @uri{} empty path objects.
* uri uri path-abempty::  @uri{} abempty path objects.
* uri uri path-absolute:: @uri{} absolute path objects.
* uri uri path-rootless:: @uri{} rootless path objects.
* uri uri path-noscheme:: @uri{} noscheme path objects.
@end menu

@c page
@node uri uri segment
@subsubsection @uri{} segment objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Label @aclass{segment}
Label used to tag bytevectors representing path @code{segment}
components of @uri{}s; it is derived from @class{bytevector}.
@end deftp


@defop Constructor @aclass{segment} constructor @var{obj}
Just return the given argument.  If tagged argument validation is
enabled: validate the argument with the predicate of @class{segment}.
@end defop


@defop Maker @aclass{segment} @aclass{segment} (@meta{obj})
Filter the given argument using the label constructor.
@end defop


@defop Predicate @aclass{segment} predicate @var{obj}
Return @true{} if @var{obj} is a non--empty bytevector in which every
octet can be interpreted as character in @ascii{} encoding and the
sequence of characters is valid for a @code{segment} @uri{} component.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{segment} @aclass{segment} bytevector
A bytevector representing the @code{segment} component in the format
requested by @rfc{} 3986.  Accessing this field just return the instance
bytevector itself.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{segment} @aclass{ascii-string} string
A string representing the @code{segment} component in the format
requested by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{segment} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{segment}
component in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node uri uri listseg
@subsubsection @uri{} list of segment objects


The @code{path} component of @uri{}s is made of @code{segment}
components, which are stored in lists by @library{nausicaa uri}:

@example
#!vicare
(import (nausicaa)
  (prefix (nausicaa uri) uri.))

(define ell
  '(#ve(ascii "home")
    #ve(ascii "marco")
    #ve(ascii "src")
    #ve(ascii "devel")))

(uri.<list-of-segments> O
  (<> (ell)))

(O bytevector)
@result{} #ve(ascii "home/marco/src/devel")

(O string)
@result{} "home/marco/src/devel"

(receive (port getter)
    (open-bytevector-output-port)
  (O put-bytevector port)
  (getter))
@result{} #ve(ascii "home/marco/src/devel")
@end example

The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Label @aclass{list-of-segments}
Label used to tag list of bytevectors representing path @code{segment}
components of @uri{}s; it is derived from @class{list}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors, makers, predicates


@defop Constructor @aclass{list-of-segments} constructor @var{obj}
Just return the given argument.  If tagged argument validation is
enabled: validate the argument with the predicate of
@class{list-of-segments}.
@end defop


@defop Maker @aclass{list-of-segments} @aclass{list-of-segments} (@meta{obj})
Filter the given argument using the label constructor.
@end defop


@defop Predicate @aclass{list-of-segments} predicate @var{obj}
Return @true{} if @var{obj} is a, possibly empty, list of bytevectors in
which every octet can be interpreted as character in @ascii{} encoding
and the sequence of characters is valid for a @code{segment} @uri{}
component.

An empty bytevector is allowed only as last component and only if it is
preceded by another component; in this case the empty bytevector
represents a segment with string representation @samp{.}.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{list-of-segments} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{segment} components in the format
requested by @rfc{} 3986, with slash characters as separators; notice
that @strong{no} leading slash is inserted.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{list-of-segments} @aclass{ascii-string} string
A string representing the @code{segment} components in the format
requested by @rfc{} 3986, with slash characters as separators; notice
that @strong{no} leading slash is inserted.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{list-of-segments} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{segment}
components in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node uri uri path base
@subsubsection Base @uri{} path objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp {Abstract Class} @aclass{path}
Base class representing @code{path} components of @uri{}s.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors and makers


@defop {Super constructor} @aclass{path} constructor @{@var{obj} @aclass{list-of-segments}@}
Build and return a new instance of @class{path}.  The argument must be a
list of objects satisfying the requirements of @class{list-of-segments}.
@end defop


@defun make-path-object @{@var{path-type} @aclass{symbol}@} @var{path}
Utility function returning a subclass of @class{path}.  @var{path-type}
must be a symbol among: @code{path-empty}, @code{path-abempty},
@code{path-absolute}, @code{path-noscheme}, @code{path-rootless}.
@var{path} must be, a possibly empty, list of @class{segment} objects.

Depending on the value of @var{path-type} the returned value is of
class: @class{path-empty}, @class{path-abempty}, @class{path-absolute},
@class{path-rootless}, @class{path-noscheme}.

The arguments of this function are modeled after the return values of
@func{parse-path} from @library{nausicaa parser-tools uri},
@ref{parser-tools uri parser main, parse-path}.
@end defun

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{path} @aclass{list-of-segments} path
A possibly empty list of @class{segment} instances.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{path} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{path} component in the format
requested by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{path} @aclass{ascii-string} string
A string representing the @code{path} component in the format requested
by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual fields} @aclass{path} @aclass{symbol} type
A symbol among: @code{path-empty}, @code{path-abempty},
@code{path-absolute}, @code{path-noscheme}, @code{path-rootless}.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{path} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{path}
component in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node uri uri path-empty
@subsubsection @uri{} empty path objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp {Abstract Class} @aclass{path-empty}
Base class representing @code{path-empty} components of @uri{}s; it is
derived from @class{path}.
@end deftp


@defop {Super constructor} @aclass{path-empty} constructor ()
Build and return an instance of @class{path-empty}; there is only one
instance of @class{path-empty}: the constructor always returns the same
object.
@end defop

@c page
@node uri uri path-abempty
@subsubsection @uri{} abempty path objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp {Abstract Class} @aclass{path-abempty}
Base class representing @code{path-abempty} components of @uri{}s; it is
derived from @class{path}.
@end deftp


@defop {Super constructor} @aclass{path-abempty} constructor @{@var{obj} @aclass{list-of-segments}@}
Build and return a new instance of @class{path-abempty}.  The argument
must be a list of objects satisfying the requirements of
@class{list-of-segments}.
@end defop

@c page
@node uri uri path-absolute
@subsubsection @uri{} absolute path objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp {Abstract Class} @aclass{path-absolute}
Base class representing @code{path-absolute} components of @uri{}s; it
is derived from @class{path}.
@end deftp


@defop {Super constructor} @aclass{path-absolute} constructor @{@var{obj} @aclass{list-of-segments}@}
Build and return a new instance of @class{path-absolute}.  The argument
must be a list of objects satisfying the requirements of
@class{list-of-segments}.
@end defop

@c page
@node uri uri path-rootless
@subsubsection @uri{} rootless path objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp {Abstract Class} @aclass{path-rootless}
Base class representing @code{path-rootless} components of @uri{}s; it
is derived from @class{path}.
@end deftp


@defop {Super constructor} @aclass{path-rootless} constructor @{@var{obj} @aclass{list-of-segments}@}
Build and return a new instance of @class{path-rootless}.  The argument
must be a non--empty, list of objects satisfying the requirements of
@class{list-of-segments}.
@end defop

@c page
@node uri uri path-noscheme
@subsubsection @uri{} noscheme path objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp {Abstract Class} @aclass{path-noscheme}
Base class representing @code{path-noscheme} components of @uri{}s; it
is derived from @class{path}.
@end deftp


@defop {Super constructor} @aclass{path-noscheme} constructor @{@var{obj} @aclass{list-of-segments}@}
Build and return a new instance of @class{path-noscheme}.  The argument
must be a non--empty, list of objects satisfying the requirements of
@class{list-of-segments}.
@end defop

@c page
@node uri uri query
@subsection @uri{} query objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Label @aclass{query}
Label used to tag bytevectors representing the @code{query} component of
@uri{}s; it is derived from @class{bytevector}.
@end deftp


@defop Constructor @aclass{query} constructor @var{obj}
Just return the given argument.  If tagged argument validation is
enabled: validate the argument with the predicate of @class{query}.
@end defop


@defop Maker @aclass{query} @aclass{query} (@var{obj})
Filter the given argument using the label constructor.
@end defop


@defop Predicate @aclass{query} predicate @var{obj}
Return @true{} if @var{obj} is a bytevector in which every octet can be
interpreted as character in @ascii{} encoding and the sequence of
characters is valid for a @code{query} @uri{} component.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{query} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{query} component in the format
requested by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{query} @aclass{ascii-string} string
A string representing the @code{query} component in the format
requested by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{query} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{query} component
in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node uri uri fragment
@subsection @uri{} fragment objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Label @aclass{fragment}
Label used to tag bytevectors representing the @code{fragment} component of
@uri{}s; it is derived from @class{bytevector}.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors, makers, predicates


@defop Constructor @aclass{fragment} constructor @var{obj}
Just return the given argument.  If tagged argument validation is
enabled: validate the argument with the predicate of @class{fragment}.
@end defop


@defop Maker @aclass{fragment} @aclass{fragment} (@var{obj})
Filter the given argument using the label constructor.
@end defop


@defop Predicate @aclass{fragment} predicate @var{obj}
Return @true{} if @var{obj} is a bytevector in which every octet can be
interpreted as character in @ascii{} encoding and the sequence of
characters is valid for a @code{fragment} @uri{} component.
@end defop

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable virtual field} @aclass{fragment} @aclass{ascii-bytevector} bytevector
A bytevector representing the @code{fragment} component in the format
requested by @rfc{} 3986.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{fragment} @aclass{ascii-string} string
A string representing the @code{fragment} component in the format
requested by @rfc{} 3986.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{fragment} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{fragment}
component in the format requested by @rfc{} 3986.
@end defmethod

@c page
@node uri uri uri
@subsection Uniform Resource Identifiers objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Class @aclass{uri}
Represents a @code{uri} component.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors, makers, predicates


@defop {Common constructor} @aclass{uri} constructor @var{scheme} @var{userinfo} @var{host} @var{port} @var{path} @var{query} @var{fragment}
Build and return a new @class{uri} instance.  Arguments description
follows:

@table @var
@item scheme
An instance of @class{scheme}; a @code{scheme} component is mandatory
for @uri{} representations.

@item userinfo
An instance of @class{userinfo} or the value @code{unspecified} from
@library{nausicaa}.

@item host
An instance of @class{host} or the value @code{unspecified} from
@library{nausicaa}.  Notice that the @code{authority} component is
specified only if the @code{host} component is specified, too; an empty
but defined @code{host} component is possible as empty but defined
@code{reg-name} component.

@item port
An instance of @class{port-number} or the value @code{unspecified} from
@library{nausicaa}.

@item path
An instance of @class{path}.

@item query
An instance of @class{query} or the value @code{unspecified} from
@library{nausicaa}.

@item fragment
An instance of @class{fragment} or the value @code{unspecified} from
@library{nausicaa}.
@end table

It is an assertion violation if the @code{userinfo} component or the
@code{port} component are specified when the @code{host} component is
not.
@end defop


@deffn Maker @aclass{uri} (@meta{clause} @dots{})
@deffnx {Maker Clause} scheme @meta{scheme}
@deffnx {Maker Clause} userinfo @meta{userinfo}
@deffnx {Maker Clause} host @meta{host}
@deffnx {Maker Clause} port-number @meta{port-number}
@deffnx {Maker Clause} path @meta{path}
@deffnx {Maker Clause} query @meta{query}
@deffnx {Maker Clause} fragment @meta{fragment}
Build and return a new @class{uri} instance using the common
constructor.  When a clause is not used: the corresponding constructor
argument is set to @code{undefined} from @library{nausicaa}.

@table @asis
@item @meta{scheme}
An instance of @class{scheme}; a @code{scheme} component is mandatory
for @uri{} representations.

@item @meta{userinfo}
An instance of @class{userinfo} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.

@item @meta{host}
An instance of @class{host} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.

@item @meta{port-number}
An instance of @class{port-number} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.

@item @meta{path}
An instance of @class{path} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to an instance of
@class{path-empty}.

@item @meta{query}
An instance of @class{query} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.

@item @meta{fragment}
An instance of @class{fragment} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.
@end table
@end deffn

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{uri} @aclass{scheme} scheme
The @code{scheme} component as a bytevector.  The @code{scheme}
component is mandatory and does not contain percent--encoded characters.
@end deftypecv


@deftypecv {Immutable field} @aclass{uri} @aclass{path} path
An object representing the @code{path} component.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Flag virtual fields


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{boolean} has-authority?
@true{} if the @code{authority} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{boolean} has-userinfo?
@true{} if the @code{userinfo} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{boolean} has-host?
@true{} if the @code{host} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{boolean} has-port?
@true{} if the @code{port} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{boolean} has-query?
@true{} if the @code{query} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{boolean} has-fragment?
@true{} if the @code{fragment} component is defined.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Components virtual fields


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{ascii-bytevector} hier-part
The @code{hier-part} component as a bytevector.  Accessing this field
when the @code{authority} is unspecified causes an exception to be
raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{ascii-bytevector} authority
The @code{authority} component as a bytevector.  Accessing this field
when the @code{authority} is unspecified causes an exception to be
raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{userinfo} userinfo
The @code{userinfo} component.  Accessing this field when the
@code{userinfo} is unspecified causes an exception to be raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{host} host
The @code{host} component.  Accessing this field when the @code{host} is
unspecified causes an exception to be raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{port-number} port
The @code{port} component.  Accessing this field when the @code{port} is
unspecified causes an exception to be raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{query} query
The @code{query} component.  Accessing this field when the @code{query}
is unspecified causes an exception to be raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{fragment} fragment
The @code{fragment} component.  Accessing this field when the
@code{fragment} is unspecified causes an exception to be raised.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Serialised representations virtual fields


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{ascii-bytevector} bytevector
A bytevector representing the whole @uri{}.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{ascii-string} string
A string representing the whole @uri{}; it is built from the
@code{bytevector} field with the @func{to-string} function.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{uri} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{uri} component
in the format requested by @rfc{} 3986.
@end defmethod


@defmethod @aclass{uri} put-authority-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{authority}
component in the format requested by @rfc{} 3986; notice that the
@code{authority} component may be empty or unspecified.  If the
@code{authority} component is empty or unspecified: nothing is put in
the port.
@end defmethod


@defmethod @aclass{uri} put-hier-part-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{hier-part}
component in the format requested by @rfc{} 3986; notice that the
@code{hier-part} can be empty.  If the @code{hier-part} component is
unspecified: nothing is put in the port.  If the @code{hier-part}
component is empty: only the leading @samp{//} is put in the port.
@end defmethod

@c page
@node uri uri ref
@subsection Relative references objects


The following bindings are exported by the @library{nausicaa uri uri}
library.


@deftp Class @aclass{relative-ref}
Represents a @code{relative-ref} component.
@end deftp

@c ------------------------------------------------------------

@subsubheading Constructors, makers, predicates


@defop {Common constructor} @aclass{relative-ref} constructor @var{userinfo} @var{host} @var{port} @var{path} @var{query} @var{fragment}
Build and return a new @class{relative-ref} instance.  Arguments description
follows:

@table @var
@item userinfo
An instance of @class{userinfo} or the value @code{unspecified} from
@library{nausicaa}.

@item host
An instance of @class{host} or the value @code{unspecified} from
@library{nausicaa}.  Notice that the @code{authority} component is
specified only if the @code{host} component is specified, too; an empty
but defined @code{host} component is possible as empty but defined
@code{reg-name} component.

@item port
An instance of @class{port-number} or the value @code{unspecified} from
@library{nausicaa}.

@item path
An instance of @class{path} or the value @code{unspecified} from
@library{nausicaa}.

@item query
An instance of @class{query} or the value @code{unspecified} from
@library{nausicaa}.

@item fragment
An instance of @class{fragment} or the value @code{unspecified} from
@library{nausicaa}.
@end table

It is an assertion violation if the @code{userinfo} component or the
@code{port} component are specified when the @code{host} component is
not.
@end defop


@deffn Maker @aclass{relative-ref} (@meta{clause} @dots{})
@deffnx {Maker Clause} userinfo @meta{userinfo}
@deffnx {Maker Clause} host @meta{host}
@deffnx {Maker Clause} port-number @meta{port-number}
@deffnx {Maker Clause} path @meta{path}
@deffnx {Maker Clause} query @meta{query}
@deffnx {Maker Clause} fragment @meta{fragment}
Build and return a new @class{relative-ref} instance using the common
constructor.  When a clause is not used: the corresponding constructor
argument is set to @code{undefined} from @library{nausicaa}.

@table @asis
@item @meta{userinfo}
An instance of @class{userinfo} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.

@item @meta{host}
An instance of @class{host} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.

@item @meta{port-number}
An instance of @class{port-number} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.

@item @meta{path}
An instance of @class{path} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to an instance of
@class{path-empty}.

@item @meta{query}
An instance of @class{query} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.

@item @meta{fragment}
An instance of @class{fragment} or the value @code{unspecified} from
@library{nausicaa}.  When not used it defaults to @code{unspecified}.
@end table
@end deffn

@c ------------------------------------------------------------

@subsubheading Fields


@deftypecv {Immutable field} @aclass{relative-ref} @aclass{path} path
An object representing the @code{path} component.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Flag virtual fields


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{boolean} has-authority?
@true{} if the @code{authority} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{boolean} has-userinfo?
@true{} if the @code{userinfo} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{boolean} has-host?
@true{} if the @code{host} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{boolean} has-port?
@true{} if the @code{port} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{boolean} has-query?
@true{} if the @code{query} component is defined.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{boolean} has-fragment?
@true{} if the @code{fragment} component is defined.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Components virtual fields


@deftypecv {Immutable virtual field} @aclass{uri} @aclass{ascii-bytevector} relative-part
The @code{relative-part} component as a bytevector.  Accessing this
field when the @code{authority} is unspecified causes an exception to be
raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{ascii-bytevector} authority
The @code{authority} component as a bytevector.  Accessing this field
when the @code{authority} is unspecified causes an exception to be
raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{userinfo} userinfo
The @code{userinfo} component.  Accessing this field when the
@code{userinfo} is unspecified causes an exception to be raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{host} host
The @code{host} component.  Accessing this field when the @code{host} is
unspecified causes an exception to be raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{port-number} port
The @code{port} component.  Accessing this field when the @code{port} is
unspecified causes an exception to be raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{query} query
The @code{query} component.  Accessing this field when the @code{query}
is unspecified causes an exception to be raised.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{fragment} fragment
The @code{fragment} component.  Accessing this field when the
@code{fragment} is unspecified causes an exception to be raised.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Serialised representations virtual fields


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{ascii-bytevector} bytevector
A bytevector representing the whole @uri{}.
@end deftypecv


@deftypecv {Immutable virtual field} @aclass{relative-ref} @aclass{ascii-string} string
A string representing the whole @uri{}; it is built from the
@code{bytevector} field with the @func{to-string} function.
@end deftypecv

@c ------------------------------------------------------------

@subsubheading Methods


@defmethod @aclass{relative-ref} put-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{relative-ref} component
in the format requested by @rfc{} 3986.
@end defmethod


@defmethod @aclass{relative-ref} put-authority-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{authority}
component in the format requested by @rfc{} 3986.
@end defmethod


@defmethod @aclass{uri} put-relative-part-bytevector @{@var{port} @aclass{binary-output-port}@}
Write to @var{port} a bytevector representing the @code{relative-part}
component in the format requested by @rfc{} 3986; notice that the
@code{relative-part} can be empty.  If the @code{relative-part}
component is unspecified: nothing is put in the port.  If the
@code{relative-part} component is empty: only the leading @samp{//} is
put in the port.
@end defmethod

@c end of file
