@node infix
@chapter Infix to prefix transformer


@cindex Library @library{nausicaa language infix}
@cindex @library{nausicaa language infix}, library


The library @library{nausicaa language infix} provides the @func{infix}
macro which converts the traditional infix notation for expressions to
the equivalent Scheme's prefix notation.

To use the library just import @library{nausicaa language infix} and use
the @func{infix} macro: it expands to a prefix expression to be
evaluated at runtime, in the lexical context of the macro use; as a
special case @code{(infix)} is equivalent to @code{(values)}.

The macro allows us to evaluate forms like:

@example
(let ((a 1) (b 2) (c 3))

  (infix cos (a) * tan (b) / c)
  @expansion{} (/ (* (cos a) (tan b)) c)

  (infix (cos (a) * tan (b) / c))
  @expansion{} (/ (* (cos a) (tan b)) c)

  (infix a ? b : c)
  @expansion{} (if a b c)

 #f)
@end example

Some interpretation rules:

@itemize
@item
Any Scheme value can be element of the input form.

@item
The following infix operators are supported; in order of descending
precedence from top to bottom, operators on the same line have equal
precedence:

@example
bitwise-arithmetic-shift-left bitwise-arithmetic-shift-right
bitwise-not
bitwise-and bitwise-ior bitwise-xor
incr! decr!
(unary +) (unary -)
expt
mod mod0
* / div div0
+ -
< > <= >= = eq? eqv? equal?
not
and or xor
@end example

@noindent
remember that the Scheme comparison operators are meant to return a
boolean value, rather than a number object.  @func{xor} is the binding
exported by @library{vicare}.  @func{incr!} and @func{decr!} are the
bindings exported by @library{nausicaa language increments}.

@item
All the operators are left--associative with the exception of
@func{expt} which is right--associative and of the unary @func{+},
@func{-}, @func{incr!}, @func{decr!}, @func{not} and @func{bitwise-not}
which are non--associative:

@example
;; left-associative
(infix 10 - 5 - 3) @expansion{} (- (- 10 5) 3)
(infix 10 - 5 - 3) @expansion{} (- 10 5 3)
(infix 10 / 5 / 3) @expansion{} (/ (/ 10 5) 3)
(infix 10 / 5 / 3) @expansion{} (/ 10 5 3)

;; right-associative
(infix 10 expt 5 expt 3) @expansion{} (expt 10 (expt 5 3))
@end example

@item
The following operators for fixnums are supported with the same
precedence of the corresponding generic operators:

@example
fx+               fx-
fx*
fxdiv             fxdiv0
fxmod             fxmod0
fx<?              fx>?
fx<=?             fx>=?
fx=?

fxand             fxior
fxxor             fxnot
fxarithmetic-shift-left
fxarithmetic-shift-right
@end example

All the operators are left-associative with the exception of FXNOT which
is non-associative:

@example
(infix 10 fx- 5 fx- 3)     @expansion{} (fx- (fx- 10 5) 3)
(infix 10 fxdiv 5 fxdiv 3) @expansion{} (fxdiv (fxdiv 10 5) 3)
@end example

@item
The following operators for flonums are supported with the same
precedence of the corresponding generic operators:

@example
fl+               fl-
fl*               fl/
flexpt
fl<?              fl>?
fl<=?             fl>=?
fl=?
@end example

All the operators are left--associative with the exception of
@func{flexpt} which is right--associative:

@example
;; left-associative
(infix 10. fl- 5. fl- 3.)         @expansion{} (fl- (fl- 10. 5.) 3.))
(infix 10. fl- 5. fl- 3.)         @expansion{} (fl- 10. 5. 3.))
(infix 10. fl/ 5. fl/ 3.)         @expansion{} (fl/ (fl/ 10. 5.) 3.))
(infix 10. fl/ 5. fl/ 3.)         @expansion{} (fl/ 10. 5. 3.))

;; right-associative
(infix 10 expt 5 expt 3)          @expansion{} (expt 10 (expt 5 3))
(infix 10. flexpt 5. flexpt 3.)   @expansion{} (flexpt 10. (flexpt 5. 3.))
@end example

@item
@func{incr!} and @func{decr!} are unary operators that can be applied to
expressions both in prefix and suffix positions.  @library{nausicaa
language infix} exports the identifiers @func{++} and @func{--} as
aliases for @func{incr!} and @func{decr!}; such aliases are invalid in
@code{#!r6rs} mode, but are allowed by the reader when in
@code{#!vicare} mode.

When applied in prefix position to an identifier, @func{incr!} expands
to:

@example
(infix incr! @meta{expr})
@expansion{} (begin (set!/tags @meta{expr} (+ @meta{expr} 1)) @meta{expr})
@end example

@noindent
and @func{decr!} expands to:

@example
(infix decr! @meta{expr})
@expansion{} (begin (set!/tags @meta{expr} (- @meta{expr} 1)) @meta{expr})
@end example

When applied in suffix position to an identifier, @func{incr!} expands
to:

@example
(infix @meta{expr} incr!)
@expansion{} (let ((v @meta{expr})) (set!/tags @meta{expr} (+ @meta{expr} 1)) v)
@end example

@noindent
and @func{decr!} expands to:

@example
(infix @meta{expr} decr!) @expansion{}
(let ((v @meta{expr})) (set!/tags @meta{expr} (- @meta{expr} 1)) v)
@end example

@item
The if-then-else statement involves the identifiers @func{?}  and
@func{:}.  This statement has the least precedence of all.

@item
Identifiers which are not operators are interpreted as variable
references; if an identifier is followed by a list, it is a function
call.

@item
Function calls with one or more arguments require the arguments to be
grouped in a list; there is no special separator in the list of
arguments.

@example
(define (fun a b c)
  (+ a b c))

(infix fun (1 2 3)) @expansion{} (fun 1 2 3)
@end example

Notice that grouping the function arguments in a list is a requirement
of the infix expression grammar.

@item
Numbers and all the other values are just put there as operands.

@item
As a special exception: the binding @func{begin} from @library{vicare}
and the binding @func{begin/tags} from @library{nausicaa language oopp}
are recognised in the input form and allow us to nest prefix--notation
expressions.

@example
(infix (begin (+ 1 2))) @result{} 3

(infix (begin
         (let ((a 3))
           (/ a 4))))
@result{} 3/4

(let ((a 3))
  (infix (begin (/ a 4))))
@result{} 3/4

(let ((a 1) (b 2) (c 3))
  (infix (1 + a ? (begin
                    (+ 2 b))
                : 3 + c - 4))
  @expansion{} (if (+ 1 a)
          (begin (+ 2 b))
        (- (+ 3 c) 4))
  #f)
@end example

@item
The following binding aliases are exported by the library:
@findex &&
@findex !!
@findex ^^
@findex ~~
@findex %
@findex &
@findex !
@findex ^
@findex ~
@findex <<
@findex >>
@findex fx&
@findex fx!
@findex fx^
@findex fx~
@findex fx<<
@findex fx>>

@example
and                               -> &&
or                                -> !!
xor                               -> ^^
not                               -> ~~
mod                               -> %
bitwise-and                       -> &
bitwise-ior                       -> !
bitwise-xor                       -> ^
bitwise-not                       -> ~
bitwise-arithmetic-shift-left     -> <<
bitwise-arithmetic-shift-right    -> >>
fxand                             -> fx&
fxior                             -> fx!
fxxor                             -> fx^
fxnot                             -> fx~
fxarithmetic-shift-left           -> fx<<
fxarithmetic-shift-right          -> fx>>
@end example
@end itemize

@c end of file
